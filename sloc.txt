
build\notarize.js:1:const { notarize } = require('@electron/notarize')
build\notarize.js:3:module.exports = async (context) => {
build\notarize.js:4:  if (process.platform !== 'darwin') return
build\notarize.js:6:  console.log('aftersign hook triggered, start to notarize app.')
build\notarize.js:8:  if (!process.env.CI) {
build\notarize.js:9:    console.log(`skipping notarizing, not in CI.`)
build\notarize.js:10:    return
build\notarize.js:11:  }
build\notarize.js:13:  if (!('APPLE_ID' in process.env && 'APPLE_ID_PASS' in process.env)) {
build\notarize.js:14:    console.warn('skipping notarizing, APPLE_ID and APPLE_ID_PASS env variables must be set.')
build\notarize.js:15:    return
build\notarize.js:16:  }
build\notarize.js:18:  const appId = 'com.electron.app'
build\notarize.js:20:  const { appOutDir } = context
build\notarize.js:22:  const appName = context.packager.appInfo.productFilename
build\notarize.js:24:  try {
build\notarize.js:25:    await notarize({
build\notarize.js:26:      appBundleId: appId,
build\notarize.js:27:      appPath: `${appOutDir}/${appName}.app`,
build\notarize.js:28:      appleId: process.env.APPLE_ID,
build\notarize.js:29:      appleIdPassword: process.env.APPLEIDPASS
build\notarize.js:30:    })
build\notarize.js:31:  } catch (error) {
build\notarize.js:32:    console.error(error)
build\notarize.js:33:  }
build\notarize.js:35:  console.log(`done notarizing ${appId}.`)
build\notarize.js:36:}
out\main\index.js:1:"use strict";
out\main\index.js:2:const electron = require("electron");
out\main\index.js:3:const path = require("path");
out\main\index.js:4:const utils = require("@electron-toolkit/utils");
out\main\index.js:5:const icon = path.join(__dirname, "../../resources/icon.png");
out\main\index.js:6:function createWindow() {
out\main\index.js:7:  const mainWindow = new electron.BrowserWindow({
out\main\index.js:8:    width: 1024,
out\main\index.js:9:    height: 800,
out\main\index.js:10:    show: false,
out\main\index.js:11:    autoHideMenuBar: true,
out\main\index.js:12:    ...process.platform === "linux" ? { icon } : {},
out\main\index.js:13:    webPreferences: {
out\main\index.js:14:      preload: path.join(__dirname, "../preload/index.js"),
out\main\index.js:15:      sandbox: false
out\main\index.js:16:    }
out\main\index.js:17:  });
out\main\index.js:18:  mainWindow.on("ready-to-show", () => {
out\main\index.js:19:    mainWindow.show();
out\main\index.js:20:  });
out\main\index.js:21:  mainWindow.webContents.setWindowOpenHandler((details) => {
out\main\index.js:22:    electron.shell.openExternal(details.url);
out\main\index.js:23:    return { action: "deny" };
out\main\index.js:24:  });
out\main\index.js:25:  electron.ipcMain.handle("hey", () => 0.1);
out\main\index.js:26:  if (utils.is.dev && process.env["ELECTRON_RENDERER_URL"]) {
out\main\index.js:27:    mainWindow.loadURL(process.env["ELECTRON_RENDERER_URL"]);
out\main\index.js:28:  } else {
out\main\index.js:29:    mainWindow.loadFile(path.join(__dirname, "../renderer/index.html"));
out\main\index.js:30:  }
out\main\index.js:31:}
out\main\index.js:32:electron.app.whenReady().then(() => {
out\main\index.js:33:  utils.electronApp.setAppUserModelId("com.electron");
out\main\index.js:34:  electron.app.on("browser-window-created", (_, window) => {
out\main\index.js:35:    utils.optimizer.watchWindowShortcuts(window);
out\main\index.js:36:  });
out\main\index.js:37:  createWindow();
out\main\index.js:38:  electron.app.on("activate", function() {
out\main\index.js:39:    if (electron.BrowserWindow.getAllWindows().length === 0)
out\main\index.js:40:      createWindow();
out\main\index.js:41:  });
out\main\index.js:42:});
out\main\index.js:43:electron.app.on("window-all-closed", () => {
out\main\index.js:44:  if (process.platform !== "darwin") {
out\main\index.js:45:    electron.app.quit();
out\main\index.js:46:  }
out\main\index.js:47:});
out\preload\index.js:1:"use strict";
out\preload\index.js:2:const electron = require("electron");
out\preload\index.js:3:const preload = require("@electron-toolkit/preload");
out\preload\index.js:4:const api = {};
out\preload\index.js:5:if (process.contextIsolated) {
out\preload\index.js:6:  try {
out\preload\index.js:7:    electron.contextBridge.exposeInMainWorld("electron", preload.electronAPI);
out\preload\index.js:8:    electron.contextBridge.exposeInMainWorld("api", api);
out\preload\index.js:9:  } catch (error) {
out\preload\index.js:10:    console.error(error);
out\preload\index.js:11:  }
out\preload\index.js:12:} else {
out\preload\index.js:13:  window.electron = preload.electronAPI;
out\preload\index.js:14:  window.api = api;
out\preload\index.js:15:}
out\renderer\assets\index-4641637a.js:1:const style = "";
out\renderer\assets\index-4641637a.js:2:function noop() {
out\renderer\assets\index-4641637a.js:3:}
out\renderer\assets\index-4641637a.js:4:function run(fn) {
out\renderer\assets\index-4641637a.js:5:  return fn();
out\renderer\assets\index-4641637a.js:6:}
out\renderer\assets\index-4641637a.js:7:function blank_object() {
out\renderer\assets\index-4641637a.js:8:  return /* @__PURE__ */ Object.create(null);
out\renderer\assets\index-4641637a.js:9:}
out\renderer\assets\index-4641637a.js:10:function run_all(fns) {
out\renderer\assets\index-4641637a.js:11:  fns.forEach(run);
out\renderer\assets\index-4641637a.js:12:}
out\renderer\assets\index-4641637a.js:13:function is_function(thing) {
out\renderer\assets\index-4641637a.js:14:  return typeof thing === "function";
out\renderer\assets\index-4641637a.js:15:}
out\renderer\assets\index-4641637a.js:16:function safe_not_equal(a, b) {
out\renderer\assets\index-4641637a.js:17:  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
out\renderer\assets\index-4641637a.js:18:}
out\renderer\assets\index-4641637a.js:19:function is_empty(obj) {
out\renderer\assets\index-4641637a.js:20:  return Object.keys(obj).length === 0;
out\renderer\assets\index-4641637a.js:21:}
out\renderer\assets\index-4641637a.js:22:/* @__PURE__ */ new Set();
out\renderer\assets\index-4641637a.js:23:const globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
out\renderer\assets\index-4641637a.js:24:"WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;
out\renderer\assets\index-4641637a.js:25:function append(target, node) {
out\renderer\assets\index-4641637a.js:26:  target.appendChild(node);
out\renderer\assets\index-4641637a.js:27:}
out\renderer\assets\index-4641637a.js:28:function insert(target, node, anchor) {
out\renderer\assets\index-4641637a.js:29:  target.insertBefore(node, anchor || null);
out\renderer\assets\index-4641637a.js:30:}
out\renderer\assets\index-4641637a.js:31:function detach(node) {
out\renderer\assets\index-4641637a.js:32:  if (node.parentNode) {
out\renderer\assets\index-4641637a.js:33:    node.parentNode.removeChild(node);
out\renderer\assets\index-4641637a.js:34:  }
out\renderer\assets\index-4641637a.js:35:}
out\renderer\assets\index-4641637a.js:36:function element(name) {
out\renderer\assets\index-4641637a.js:37:  return document.createElement(name);
out\renderer\assets\index-4641637a.js:38:}
out\renderer\assets\index-4641637a.js:39:function text(data) {
out\renderer\assets\index-4641637a.js:40:  return document.createTextNode(data);
out\renderer\assets\index-4641637a.js:41:}
out\renderer\assets\index-4641637a.js:42:function space() {
out\renderer\assets\index-4641637a.js:43:  return text(" ");
out\renderer\assets\index-4641637a.js:44:}
out\renderer\assets\index-4641637a.js:45:function listen(node, event, handler, options) {
out\renderer\assets\index-4641637a.js:46:  node.addEventListener(event, handler, options);
out\renderer\assets\index-4641637a.js:47:  return () => node.removeEventListener(event, handler, options);
out\renderer\assets\index-4641637a.js:48:}
out\renderer\assets\index-4641637a.js:49:function attr(node, attribute, value) {
out\renderer\assets\index-4641637a.js:50:  if (value == null)
out\renderer\assets\index-4641637a.js:51:    node.removeAttribute(attribute);
out\renderer\assets\index-4641637a.js:52:  else if (node.getAttribute(attribute) !== value)
out\renderer\assets\index-4641637a.js:53:    node.setAttribute(attribute, value);
out\renderer\assets\index-4641637a.js:54:}
out\renderer\assets\index-4641637a.js:55:function children(element2) {
out\renderer\assets\index-4641637a.js:56:  return Array.from(element2.childNodes);
out\renderer\assets\index-4641637a.js:57:}
out\renderer\assets\index-4641637a.js:58:function set_data(text2, data) {
out\renderer\assets\index-4641637a.js:59:  data = "" + data;
out\renderer\assets\index-4641637a.js:60:  if (text2.data === data)
out\renderer\assets\index-4641637a.js:61:    return;
out\renderer\assets\index-4641637a.js:62:  text2.data = data;
out\renderer\assets\index-4641637a.js:63:}
out\renderer\assets\index-4641637a.js:64:/* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:65:let current_component;
out\renderer\assets\index-4641637a.js:66:function set_current_component(component) {
out\renderer\assets\index-4641637a.js:67:  current_component = component;
out\renderer\assets\index-4641637a.js:68:}
out\renderer\assets\index-4641637a.js:69:function get_current_component() {
out\renderer\assets\index-4641637a.js:70:  if (!current_component)
out\renderer\assets\index-4641637a.js:71:    throw new Error("Function called outside component initialization");
out\renderer\assets\index-4641637a.js:72:  return current_component;
out\renderer\assets\index-4641637a.js:73:}
out\renderer\assets\index-4641637a.js:74:function onMount(fn) {
out\renderer\assets\index-4641637a.js:75:  get_current_component().$$.on_mount.push(fn);
out\renderer\assets\index-4641637a.js:76:}
out\renderer\assets\index-4641637a.js:77:const dirty_components = [];
out\renderer\assets\index-4641637a.js:78:const binding_callbacks = [];
out\renderer\assets\index-4641637a.js:79:let render_callbacks = [];
out\renderer\assets\index-4641637a.js:80:const flush_callbacks = [];
out\renderer\assets\index-4641637a.js:81:const resolved_promise = /* @__PURE__ */ Promise.resolve();
out\renderer\assets\index-4641637a.js:82:let update_scheduled = false;
out\renderer\assets\index-4641637a.js:83:function schedule_update() {
out\renderer\assets\index-4641637a.js:84:  if (!update_scheduled) {
out\renderer\assets\index-4641637a.js:85:    update_scheduled = true;
out\renderer\assets\index-4641637a.js:86:    resolved_promise.then(flush);
out\renderer\assets\index-4641637a.js:87:  }
out\renderer\assets\index-4641637a.js:88:}
out\renderer\assets\index-4641637a.js:89:function add_render_callback(fn) {
out\renderer\assets\index-4641637a.js:90:  render_callbacks.push(fn);
out\renderer\assets\index-4641637a.js:91:}
out\renderer\assets\index-4641637a.js:92:function add_flush_callback(fn) {
out\renderer\assets\index-4641637a.js:93:  flush_callbacks.push(fn);
out\renderer\assets\index-4641637a.js:94:}
out\renderer\assets\index-4641637a.js:95:const seen_callbacks = /* @__PURE__ */ new Set();
out\renderer\assets\index-4641637a.js:96:let flushidx = 0;
out\renderer\assets\index-4641637a.js:97:function flush() {
out\renderer\assets\index-4641637a.js:98:  if (flushidx !== 0) {
out\renderer\assets\index-4641637a.js:99:    return;
out\renderer\assets\index-4641637a.js:100:  }
out\renderer\assets\index-4641637a.js:101:  const saved_component = current_component;
out\renderer\assets\index-4641637a.js:102:  do {
out\renderer\assets\index-4641637a.js:103:    try {
out\renderer\assets\index-4641637a.js:104:      while (flushidx < dirty_components.length) {
out\renderer\assets\index-4641637a.js:105:        const component = dirty_components[flushidx];
out\renderer\assets\index-4641637a.js:106:        flushidx++;
out\renderer\assets\index-4641637a.js:107:        set_current_component(component);
out\renderer\assets\index-4641637a.js:108:        update(component.$$);
out\renderer\assets\index-4641637a.js:109:      }
out\renderer\assets\index-4641637a.js:110:    } catch (e2) {
out\renderer\assets\index-4641637a.js:111:      dirty_components.length = 0;
out\renderer\assets\index-4641637a.js:112:      flushidx = 0;
out\renderer\assets\index-4641637a.js:113:      throw e2;
out\renderer\assets\index-4641637a.js:114:    }
out\renderer\assets\index-4641637a.js:115:    set_current_component(null);
out\renderer\assets\index-4641637a.js:116:    dirty_components.length = 0;
out\renderer\assets\index-4641637a.js:117:    flushidx = 0;
out\renderer\assets\index-4641637a.js:118:    while (binding_callbacks.length)
out\renderer\assets\index-4641637a.js:119:      binding_callbacks.pop()();
out\renderer\assets\index-4641637a.js:120:    for (let i = 0; i < render_callbacks.length; i += 1) {
out\renderer\assets\index-4641637a.js:121:      const callback = render_callbacks[i];
out\renderer\assets\index-4641637a.js:122:      if (!seen_callbacks.has(callback)) {
out\renderer\assets\index-4641637a.js:123:        seen_callbacks.add(callback);
out\renderer\assets\index-4641637a.js:124:        callback();
out\renderer\assets\index-4641637a.js:125:      }
out\renderer\assets\index-4641637a.js:126:    }
out\renderer\assets\index-4641637a.js:127:    render_callbacks.length = 0;
out\renderer\assets\index-4641637a.js:128:  } while (dirty_components.length);
out\renderer\assets\index-4641637a.js:129:  while (flush_callbacks.length) {
out\renderer\assets\index-4641637a.js:130:    flush_callbacks.pop()();
out\renderer\assets\index-4641637a.js:131:  }
out\renderer\assets\index-4641637a.js:132:  update_scheduled = false;
out\renderer\assets\index-4641637a.js:133:  seen_callbacks.clear();
out\renderer\assets\index-4641637a.js:134:  set_current_component(saved_component);
out\renderer\assets\index-4641637a.js:135:}
out\renderer\assets\index-4641637a.js:136:function update($$) {
out\renderer\assets\index-4641637a.js:137:  if ($$.fragment !== null) {
out\renderer\assets\index-4641637a.js:138:    $$.update();
out\renderer\assets\index-4641637a.js:139:    run_all($$.before_update);
out\renderer\assets\index-4641637a.js:140:    const dirty = $$.dirty;
out\renderer\assets\index-4641637a.js:141:    $$.dirty = [-1];
out\renderer\assets\index-4641637a.js:142:    $$.fragment && $$.fragment.p($$.ctx, dirty);
out\renderer\assets\index-4641637a.js:143:    $$.after_update.forEach(add_render_callback);
out\renderer\assets\index-4641637a.js:144:  }
out\renderer\assets\index-4641637a.js:145:}
out\renderer\assets\index-4641637a.js:146:function flush_render_callbacks(fns) {
out\renderer\assets\index-4641637a.js:147:  const filtered = [];
out\renderer\assets\index-4641637a.js:148:  const targets = [];
out\renderer\assets\index-4641637a.js:149:  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
out\renderer\assets\index-4641637a.js:150:  targets.forEach((c) => c());
out\renderer\assets\index-4641637a.js:151:  render_callbacks = filtered;
out\renderer\assets\index-4641637a.js:152:}
out\renderer\assets\index-4641637a.js:153:const outroing = /* @__PURE__ */ new Set();
out\renderer\assets\index-4641637a.js:154:let outros;
out\renderer\assets\index-4641637a.js:155:function transition_in(block, local) {
out\renderer\assets\index-4641637a.js:156:  if (block && block.i) {
out\renderer\assets\index-4641637a.js:157:    outroing.delete(block);
out\renderer\assets\index-4641637a.js:158:    block.i(local);
out\renderer\assets\index-4641637a.js:159:  }
out\renderer\assets\index-4641637a.js:160:}
out\renderer\assets\index-4641637a.js:161:function transition_out(block, local, detach2, callback) {
out\renderer\assets\index-4641637a.js:162:  if (block && block.o) {
out\renderer\assets\index-4641637a.js:163:    if (outroing.has(block))
out\renderer\assets\index-4641637a.js:164:      return;
out\renderer\assets\index-4641637a.js:165:    outroing.add(block);
out\renderer\assets\index-4641637a.js:166:    outros.c.push(() => {
out\renderer\assets\index-4641637a.js:167:      outroing.delete(block);
out\renderer\assets\index-4641637a.js:168:      if (callback) {
out\renderer\assets\index-4641637a.js:169:        if (detach2)
out\renderer\assets\index-4641637a.js:170:          block.d(1);
out\renderer\assets\index-4641637a.js:171:        callback();
out\renderer\assets\index-4641637a.js:172:      }
out\renderer\assets\index-4641637a.js:173:    });
out\renderer\assets\index-4641637a.js:174:    block.o(local);
out\renderer\assets\index-4641637a.js:175:  } else if (callback) {
out\renderer\assets\index-4641637a.js:176:    callback();
out\renderer\assets\index-4641637a.js:177:  }
out\renderer\assets\index-4641637a.js:178:}
out\renderer\assets\index-4641637a.js:179:const _boolean_attributes = [
out\renderer\assets\index-4641637a.js:180:  "allowfullscreen",
out\renderer\assets\index-4641637a.js:181:  "allowpaymentrequest",
out\renderer\assets\index-4641637a.js:182:  "async",
out\renderer\assets\index-4641637a.js:183:  "autofocus",
out\renderer\assets\index-4641637a.js:184:  "autoplay",
out\renderer\assets\index-4641637a.js:185:  "checked",
out\renderer\assets\index-4641637a.js:186:  "controls",
out\renderer\assets\index-4641637a.js:187:  "default",
out\renderer\assets\index-4641637a.js:188:  "defer",
out\renderer\assets\index-4641637a.js:189:  "disabled",
out\renderer\assets\index-4641637a.js:190:  "formnovalidate",
out\renderer\assets\index-4641637a.js:191:  "hidden",
out\renderer\assets\index-4641637a.js:192:  "inert",
out\renderer\assets\index-4641637a.js:193:  "ismap",
out\renderer\assets\index-4641637a.js:194:  "loop",
out\renderer\assets\index-4641637a.js:195:  "multiple",
out\renderer\assets\index-4641637a.js:196:  "muted",
out\renderer\assets\index-4641637a.js:197:  "nomodule",
out\renderer\assets\index-4641637a.js:198:  "novalidate",
out\renderer\assets\index-4641637a.js:199:  "open",
out\renderer\assets\index-4641637a.js:200:  "playsinline",
out\renderer\assets\index-4641637a.js:201:  "readonly",
out\renderer\assets\index-4641637a.js:202:  "required",
out\renderer\assets\index-4641637a.js:203:  "reversed",
out\renderer\assets\index-4641637a.js:204:  "selected"
out\renderer\assets\index-4641637a.js:205:];
out\renderer\assets\index-4641637a.js:206:/* @__PURE__ */ new Set([..._boolean_attributes]);
out\renderer\assets\index-4641637a.js:207:function bind(component, name, callback) {
out\renderer\assets\index-4641637a.js:208:  const index = component.$$.props[name];
out\renderer\assets\index-4641637a.js:209:  if (index !== void 0) {
out\renderer\assets\index-4641637a.js:210:    component.$$.bound[index] = callback;
out\renderer\assets\index-4641637a.js:211:    callback(component.$$.ctx[index]);
out\renderer\assets\index-4641637a.js:212:  }
out\renderer\assets\index-4641637a.js:213:}
out\renderer\assets\index-4641637a.js:214:function create_component(block) {
out\renderer\assets\index-4641637a.js:215:  block && block.c();
out\renderer\assets\index-4641637a.js:216:}
out\renderer\assets\index-4641637a.js:217:function mount_component(component, target, anchor, customElement) {
out\renderer\assets\index-4641637a.js:218:  const { fragment, after_update } = component.$$;
out\renderer\assets\index-4641637a.js:219:  fragment && fragment.m(target, anchor);
out\renderer\assets\index-4641637a.js:220:  if (!customElement) {
out\renderer\assets\index-4641637a.js:221:    add_render_callback(() => {
out\renderer\assets\index-4641637a.js:222:      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
out\renderer\assets\index-4641637a.js:223:      if (component.$$.on_destroy) {
out\renderer\assets\index-4641637a.js:224:        component.$$.on_destroy.push(...new_on_destroy);
out\renderer\assets\index-4641637a.js:225:      } else {
out\renderer\assets\index-4641637a.js:226:        run_all(new_on_destroy);
out\renderer\assets\index-4641637a.js:227:      }
out\renderer\assets\index-4641637a.js:228:      component.$$.on_mount = [];
out\renderer\assets\index-4641637a.js:229:    });
out\renderer\assets\index-4641637a.js:230:  }
out\renderer\assets\index-4641637a.js:231:  after_update.forEach(add_render_callback);
out\renderer\assets\index-4641637a.js:232:}
out\renderer\assets\index-4641637a.js:233:function destroy_component(component, detaching) {
out\renderer\assets\index-4641637a.js:234:  const $$ = component.$$;
out\renderer\assets\index-4641637a.js:235:  if ($$.fragment !== null) {
out\renderer\assets\index-4641637a.js:236:    flush_render_callbacks($$.after_update);
out\renderer\assets\index-4641637a.js:237:    run_all($$.on_destroy);
out\renderer\assets\index-4641637a.js:238:    $$.fragment && $$.fragment.d(detaching);
out\renderer\assets\index-4641637a.js:239:    $$.on_destroy = $$.fragment = null;
out\renderer\assets\index-4641637a.js:240:    $$.ctx = [];
out\renderer\assets\index-4641637a.js:241:  }
out\renderer\assets\index-4641637a.js:242:}
out\renderer\assets\index-4641637a.js:243:function make_dirty(component, i) {
out\renderer\assets\index-4641637a.js:244:  if (component.$$.dirty[0] === -1) {
out\renderer\assets\index-4641637a.js:245:    dirty_components.push(component);
out\renderer\assets\index-4641637a.js:246:    schedule_update();
out\renderer\assets\index-4641637a.js:247:    component.$$.dirty.fill(0);
out\renderer\assets\index-4641637a.js:248:  }
out\renderer\assets\index-4641637a.js:249:  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
out\renderer\assets\index-4641637a.js:250:}
out\renderer\assets\index-4641637a.js:251:function init(component, options, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
out\renderer\assets\index-4641637a.js:252:  const parent_component = current_component;
out\renderer\assets\index-4641637a.js:253:  set_current_component(component);
out\renderer\assets\index-4641637a.js:254:  const $$ = component.$$ = {
out\renderer\assets\index-4641637a.js:255:    fragment: null,
out\renderer\assets\index-4641637a.js:256:    ctx: [],
out\renderer\assets\index-4641637a.js:258:    props,
out\renderer\assets\index-4641637a.js:259:    update: noop,
out\renderer\assets\index-4641637a.js:260:    not_equal,
out\renderer\assets\index-4641637a.js:261:    bound: blank_object(),
out\renderer\assets\index-4641637a.js:263:    on_mount: [],
out\renderer\assets\index-4641637a.js:264:    on_destroy: [],
out\renderer\assets\index-4641637a.js:265:    on_disconnect: [],
out\renderer\assets\index-4641637a.js:266:    before_update: [],
out\renderer\assets\index-4641637a.js:267:    after_update: [],
out\renderer\assets\index-4641637a.js:268:    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
out\renderer\assets\index-4641637a.js:270:    callbacks: blank_object(),
out\renderer\assets\index-4641637a.js:271:    dirty,
out\renderer\assets\index-4641637a.js:272:    skip_bound: false,
out\renderer\assets\index-4641637a.js:273:    root: options.target || parent_component.$$.root
out\renderer\assets\index-4641637a.js:274:  };
out\renderer\assets\index-4641637a.js:275:  append_styles && append_styles($$.root);
out\renderer\assets\index-4641637a.js:276:  let ready = false;
out\renderer\assets\index-4641637a.js:277:  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
out\renderer\assets\index-4641637a.js:278:    const value = rest.length ? rest[0] : ret;
out\renderer\assets\index-4641637a.js:279:    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
out\renderer\assets\index-4641637a.js:280:      if (!$$.skip_bound && $$.bound[i])
out\renderer\assets\index-4641637a.js:281:        $$.bound[i](value);
out\renderer\assets\index-4641637a.js:282:      if (ready)
out\renderer\assets\index-4641637a.js:283:        make_dirty(component, i);
out\renderer\assets\index-4641637a.js:284:    }
out\renderer\assets\index-4641637a.js:285:    return ret;
out\renderer\assets\index-4641637a.js:286:  }) : [];
out\renderer\assets\index-4641637a.js:287:  $$.update();
out\renderer\assets\index-4641637a.js:288:  ready = true;
out\renderer\assets\index-4641637a.js:289:  run_all($$.before_update);
out\renderer\assets\index-4641637a.js:290:  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
out\renderer\assets\index-4641637a.js:291:  if (options.target) {
out\renderer\assets\index-4641637a.js:292:    if (options.hydrate) {
out\renderer\assets\index-4641637a.js:293:      const nodes = children(options.target);
out\renderer\assets\index-4641637a.js:294:      $$.fragment && $$.fragment.l(nodes);
out\renderer\assets\index-4641637a.js:295:      nodes.forEach(detach);
out\renderer\assets\index-4641637a.js:296:    } else {
out\renderer\assets\index-4641637a.js:297:      $$.fragment && $$.fragment.c();
out\renderer\assets\index-4641637a.js:298:    }
out\renderer\assets\index-4641637a.js:299:    if (options.intro)
out\renderer\assets\index-4641637a.js:300:      transition_in(component.$$.fragment);
out\renderer\assets\index-4641637a.js:301:    mount_component(component, options.target, options.anchor, options.customElement);
out\renderer\assets\index-4641637a.js:302:    flush();
out\renderer\assets\index-4641637a.js:303:  }
out\renderer\assets\index-4641637a.js:304:  set_current_component(parent_component);
out\renderer\assets\index-4641637a.js:305:}
out\renderer\assets\index-4641637a.js:306:class SvelteComponent {
out\renderer\assets\index-4641637a.js:307:  $destroy() {
out\renderer\assets\index-4641637a.js:308:    destroy_component(this, 1);
out\renderer\assets\index-4641637a.js:309:    this.$destroy = noop;
out\renderer\assets\index-4641637a.js:310:  }
out\renderer\assets\index-4641637a.js:311:  $on(type, callback) {
out\renderer\assets\index-4641637a.js:312:    if (!is_function(callback)) {
out\renderer\assets\index-4641637a.js:313:      return noop;
out\renderer\assets\index-4641637a.js:314:    }
out\renderer\assets\index-4641637a.js:315:    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
out\renderer\assets\index-4641637a.js:316:    callbacks.push(callback);
out\renderer\assets\index-4641637a.js:317:    return () => {
out\renderer\assets\index-4641637a.js:318:      const index = callbacks.indexOf(callback);
out\renderer\assets\index-4641637a.js:319:      if (index !== -1)
out\renderer\assets\index-4641637a.js:320:        callbacks.splice(index, 1);
out\renderer\assets\index-4641637a.js:321:    };
out\renderer\assets\index-4641637a.js:322:  }
out\renderer\assets\index-4641637a.js:323:  $set($$props) {
out\renderer\assets\index-4641637a.js:324:    if (this.$$set && !is_empty($$props)) {
out\renderer\assets\index-4641637a.js:325:      this.$$.skip_bound = true;
out\renderer\assets\index-4641637a.js:326:      this.$$set($$props);
out\renderer\assets\index-4641637a.js:327:      this.$$.skip_bound = false;
out\renderer\assets\index-4641637a.js:328:    }
out\renderer\assets\index-4641637a.js:329:  }
out\renderer\assets\index-4641637a.js:330:}
out\renderer\assets\index-4641637a.js:331:const app = "";
out\renderer\assets\index-4641637a.js:332:const colors = ["white", "black"];
out\renderer\assets\index-4641637a.js:333:const files = ["a", "b", "c", "d", "e", "f", "g", "h"];
out\renderer\assets\index-4641637a.js:334:const ranks = ["1", "2", "3", "4", "5", "6", "7", "8"];
out\renderer\assets\index-4641637a.js:335:const invRanks = [...ranks].reverse();
out\renderer\assets\index-4641637a.js:336:const allKeys = Array.prototype.concat(...files.map((c) => ranks.map((r2) => c + r2)));
out\renderer\assets\index-4641637a.js:337:const pos2key = (pos) => allKeys[8 * pos[0] + pos[1]];
out\renderer\assets\index-4641637a.js:338:const key2pos = (k) => [k.charCodeAt(0) - 97, k.charCodeAt(1) - 49];
out\renderer\assets\index-4641637a.js:339:const allPos = allKeys.map(key2pos);
out\renderer\assets\index-4641637a.js:340:function memo(f) {
out\renderer\assets\index-4641637a.js:341:  let v;
out\renderer\assets\index-4641637a.js:342:  const ret = () => {
out\renderer\assets\index-4641637a.js:343:    if (v === void 0)
out\renderer\assets\index-4641637a.js:344:      v = f();
out\renderer\assets\index-4641637a.js:345:    return v;
out\renderer\assets\index-4641637a.js:346:  };
out\renderer\assets\index-4641637a.js:347:  ret.clear = () => {
out\renderer\assets\index-4641637a.js:348:    v = void 0;
out\renderer\assets\index-4641637a.js:349:  };
out\renderer\assets\index-4641637a.js:350:  return ret;
out\renderer\assets\index-4641637a.js:351:}
out\renderer\assets\index-4641637a.js:352:const timer = () => {
out\renderer\assets\index-4641637a.js:353:  let startAt;
out\renderer\assets\index-4641637a.js:354:  return {
out\renderer\assets\index-4641637a.js:355:    start() {
out\renderer\assets\index-4641637a.js:356:      startAt = performance.now();
out\renderer\assets\index-4641637a.js:357:    },
out\renderer\assets\index-4641637a.js:358:    cancel() {
out\renderer\assets\index-4641637a.js:359:      startAt = void 0;
out\renderer\assets\index-4641637a.js:360:    },
out\renderer\assets\index-4641637a.js:361:    stop() {
out\renderer\assets\index-4641637a.js:362:      if (!startAt)
out\renderer\assets\index-4641637a.js:363:        return 0;
out\renderer\assets\index-4641637a.js:364:      const time = performance.now() - startAt;
out\renderer\assets\index-4641637a.js:365:      startAt = void 0;
out\renderer\assets\index-4641637a.js:366:      return time;
out\renderer\assets\index-4641637a.js:367:    }
out\renderer\assets\index-4641637a.js:368:  };
out\renderer\assets\index-4641637a.js:369:};
out\renderer\assets\index-4641637a.js:370:const opposite$1 = (c) => c === "white" ? "black" : "white";
out\renderer\assets\index-4641637a.js:371:const distanceSq = (pos1, pos2) => {
out\renderer\assets\index-4641637a.js:372:  const dx = pos1[0] - pos2[0], dy = pos1[1] - pos2[1];
out\renderer\assets\index-4641637a.js:373:  return dx * dx + dy * dy;
out\renderer\assets\index-4641637a.js:374:};
out\renderer\assets\index-4641637a.js:375:const samePiece = (p1, p2) => p1.role === p2.role && p1.color === p2.color;
out\renderer\assets\index-4641637a.js:376:const posToTranslate = (bounds) => (pos, asWhite) => [(asWhite ? pos[0] : 7 - pos[0]) * bounds.width / 8, (asWhite ? 7 - pos[1] : pos[1]) * bounds.height / 8];
out\renderer\assets\index-4641637a.js:377:const translate = (el, pos) => {
out\renderer\assets\index-4641637a.js:378:  el.style.transform = `translate(${pos[0]}px,${pos[1]}px)`;
out\renderer\assets\index-4641637a.js:379:};
out\renderer\assets\index-4641637a.js:380:const translateAndScale = (el, pos, scale = 1) => {
out\renderer\assets\index-4641637a.js:381:  el.style.transform = `translate(${pos[0]}px,${pos[1]}px) scale(${scale})`;
out\renderer\assets\index-4641637a.js:382:};
out\renderer\assets\index-4641637a.js:383:const setVisible = (el, v) => {
out\renderer\assets\index-4641637a.js:384:  el.style.visibility = v ? "visible" : "hidden";
out\renderer\assets\index-4641637a.js:385:};
out\renderer\assets\index-4641637a.js:386:const eventPosition = (e2) => {
out\renderer\assets\index-4641637a.js:387:  var _a;
out\renderer\assets\index-4641637a.js:388:  if (e2.clientX || e2.clientX === 0)
out\renderer\assets\index-4641637a.js:389:    return [e2.clientX, e2.clientY];
out\renderer\assets\index-4641637a.js:390:  if ((_a = e2.targetTouches) === null || _a === void 0 ? void 0 : _a[0])
out\renderer\assets\index-4641637a.js:391:    return [e2.targetTouches[0].clientX, e2.targetTouches[0].clientY];
out\renderer\assets\index-4641637a.js:392:  return;
out\renderer\assets\index-4641637a.js:393:};
out\renderer\assets\index-4641637a.js:394:const isRightButton = (e2) => e2.buttons === 2 || e2.button === 2;
out\renderer\assets\index-4641637a.js:395:const createEl = (tagName, className) => {
out\renderer\assets\index-4641637a.js:396:  const el = document.createElement(tagName);
out\renderer\assets\index-4641637a.js:397:  if (className)
out\renderer\assets\index-4641637a.js:398:    el.className = className;
out\renderer\assets\index-4641637a.js:399:  return el;
out\renderer\assets\index-4641637a.js:400:};
out\renderer\assets\index-4641637a.js:401:function computeSquareCenter(key, asWhite, bounds) {
out\renderer\assets\index-4641637a.js:402:  const pos = key2pos(key);
out\renderer\assets\index-4641637a.js:403:  if (!asWhite) {
out\renderer\assets\index-4641637a.js:404:    pos[0] = 7 - pos[0];
out\renderer\assets\index-4641637a.js:405:    pos[1] = 7 - pos[1];
out\renderer\assets\index-4641637a.js:406:  }
out\renderer\assets\index-4641637a.js:407:  return [
out\renderer\assets\index-4641637a.js:408:    bounds.left + bounds.width * pos[0] / 8 + bounds.width / 16,
out\renderer\assets\index-4641637a.js:409:    bounds.top + bounds.height * (7 - pos[1]) / 8 + bounds.height / 16
out\renderer\assets\index-4641637a.js:410:  ];
out\renderer\assets\index-4641637a.js:411:}
out\renderer\assets\index-4641637a.js:412:const diff = (a, b) => Math.abs(a - b);
out\renderer\assets\index-4641637a.js:413:const pawn = (color) => (x1, y1, x2, y2) => diff(x1, x2) < 2 && (color === "white" ? (
out\renderer\assets\index-4641637a.js:415:  y2 === y1 + 1 || y1 <= 1 && y2 === y1 + 2 && x1 === x2
out\renderer\assets\index-4641637a.js:416:) : y2 === y1 - 1 || y1 >= 6 && y2 === y1 - 2 && x1 === x2);
out\renderer\assets\index-4641637a.js:417:const knight = (x1, y1, x2, y2) => {
out\renderer\assets\index-4641637a.js:418:  const xd = diff(x1, x2);
out\renderer\assets\index-4641637a.js:419:  const yd = diff(y1, y2);
out\renderer\assets\index-4641637a.js:420:  return xd === 1 && yd === 2 || xd === 2 && yd === 1;
out\renderer\assets\index-4641637a.js:421:};
out\renderer\assets\index-4641637a.js:422:const bishop = (x1, y1, x2, y2) => {
out\renderer\assets\index-4641637a.js:423:  return diff(x1, x2) === diff(y1, y2);
out\renderer\assets\index-4641637a.js:424:};
out\renderer\assets\index-4641637a.js:425:const rook = (x1, y1, x2, y2) => {
out\renderer\assets\index-4641637a.js:426:  return x1 === x2 || y1 === y2;
out\renderer\assets\index-4641637a.js:427:};
out\renderer\assets\index-4641637a.js:428:const queen = (x1, y1, x2, y2) => {
out\renderer\assets\index-4641637a.js:429:  return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);
out\renderer\assets\index-4641637a.js:430:};
out\renderer\assets\index-4641637a.js:431:const king = (color, rookFiles, canCastle) => (x1, y1, x2, y2) => diff(x1, x2) < 2 && diff(y1, y2) < 2 || canCastle && y1 === y2 && y1 === (color === "white" ? 0 : 7) && (x1 === 4 && (x2 === 2 && rookFiles.includes(0) || x2 === 6 && rookFiles.includes(7)) || rookFiles.includes(x2));
out\renderer\assets\index-4641637a.js:432:function rookFilesOf(pieces, color) {
out\renderer\assets\index-4641637a.js:433:  const backrank = color === "white" ? "1" : "8";
out\renderer\assets\index-4641637a.js:434:  const files2 = [];
out\renderer\assets\index-4641637a.js:435:  for (const [key, piece] of pieces) {
out\renderer\assets\index-4641637a.js:436:    if (key[1] === backrank && piece.color === color && piece.role === "rook") {
out\renderer\assets\index-4641637a.js:437:      files2.push(key2pos(key)[0]);
out\renderer\assets\index-4641637a.js:438:    }
out\renderer\assets\index-4641637a.js:439:  }
out\renderer\assets\index-4641637a.js:440:  return files2;
out\renderer\assets\index-4641637a.js:441:}
out\renderer\assets\index-4641637a.js:442:function premove(pieces, key, canCastle) {
out\renderer\assets\index-4641637a.js:443:  const piece = pieces.get(key);
out\renderer\assets\index-4641637a.js:444:  if (!piece)
out\renderer\assets\index-4641637a.js:445:    return [];
out\renderer\assets\index-4641637a.js:446:  const pos = key2pos(key), r2 = piece.role, mobility = r2 === "pawn" ? pawn(piece.color) : r2 === "knight" ? knight : r2 === "bishop" ? bishop : r2 === "rook" ? rook : r2 === "queen" ? queen : king(piece.color, rookFilesOf(pieces, piece.color), canCastle);
out\renderer\assets\index-4641637a.js:447:  return allPos.filter((pos2) => (pos[0] !== pos2[0] || pos[1] !== pos2[1]) && mobility(pos[0], pos[1], pos2[0], pos2[1])).map(pos2key);
out\renderer\assets\index-4641637a.js:448:}
out\renderer\assets\index-4641637a.js:449:function callUserFunction(f, ...args) {
out\renderer\assets\index-4641637a.js:450:  if (f)
out\renderer\assets\index-4641637a.js:451:    setTimeout(() => f(...args), 1);
out\renderer\assets\index-4641637a.js:452:}
out\renderer\assets\index-4641637a.js:453:function toggleOrientation(state) {
out\renderer\assets\index-4641637a.js:454:  state.orientation = opposite$1(state.orientation);
out\renderer\assets\index-4641637a.js:455:  state.animation.current = state.draggable.current = state.selected = void 0;
out\renderer\assets\index-4641637a.js:456:}
out\renderer\assets\index-4641637a.js:457:function setPieces(state, pieces) {
out\renderer\assets\index-4641637a.js:458:  for (const [key, piece] of pieces) {
out\renderer\assets\index-4641637a.js:459:    if (piece)
out\renderer\assets\index-4641637a.js:460:      state.pieces.set(key, piece);
out\renderer\assets\index-4641637a.js:461:    else
out\renderer\assets\index-4641637a.js:462:      state.pieces.delete(key);
out\renderer\assets\index-4641637a.js:463:  }
out\renderer\assets\index-4641637a.js:464:}
out\renderer\assets\index-4641637a.js:465:function setCheck(state, color) {
out\renderer\assets\index-4641637a.js:466:  state.check = void 0;
out\renderer\assets\index-4641637a.js:467:  if (color === true)
out\renderer\assets\index-4641637a.js:468:    color = state.turnColor;
out\renderer\assets\index-4641637a.js:469:  if (color)
out\renderer\assets\index-4641637a.js:470:    for (const [k, p] of state.pieces) {
out\renderer\assets\index-4641637a.js:471:      if (p.role === "king" && p.color === color) {
out\renderer\assets\index-4641637a.js:472:        state.check = k;
out\renderer\assets\index-4641637a.js:473:      }
out\renderer\assets\index-4641637a.js:474:    }
out\renderer\assets\index-4641637a.js:475:}
out\renderer\assets\index-4641637a.js:476:function setPremove(state, orig, dest, meta) {
out\renderer\assets\index-4641637a.js:477:  unsetPredrop(state);
out\renderer\assets\index-4641637a.js:478:  state.premovable.current = [orig, dest];
out\renderer\assets\index-4641637a.js:479:  callUserFunction(state.premovable.events.set, orig, dest, meta);
out\renderer\assets\index-4641637a.js:480:}
out\renderer\assets\index-4641637a.js:481:function unsetPremove(state) {
out\renderer\assets\index-4641637a.js:482:  if (state.premovable.current) {
out\renderer\assets\index-4641637a.js:483:    state.premovable.current = void 0;
out\renderer\assets\index-4641637a.js:484:    callUserFunction(state.premovable.events.unset);
out\renderer\assets\index-4641637a.js:485:  }
out\renderer\assets\index-4641637a.js:486:}
out\renderer\assets\index-4641637a.js:487:function setPredrop(state, role, key) {
out\renderer\assets\index-4641637a.js:488:  unsetPremove(state);
out\renderer\assets\index-4641637a.js:489:  state.predroppable.current = { role, key };
out\renderer\assets\index-4641637a.js:490:  callUserFunction(state.predroppable.events.set, role, key);
out\renderer\assets\index-4641637a.js:491:}
out\renderer\assets\index-4641637a.js:492:function unsetPredrop(state) {
out\renderer\assets\index-4641637a.js:493:  const pd = state.predroppable;
out\renderer\assets\index-4641637a.js:494:  if (pd.current) {
out\renderer\assets\index-4641637a.js:495:    pd.current = void 0;
out\renderer\assets\index-4641637a.js:496:    callUserFunction(pd.events.unset);
out\renderer\assets\index-4641637a.js:497:  }
out\renderer\assets\index-4641637a.js:498:}
out\renderer\assets\index-4641637a.js:499:function tryAutoCastle(state, orig, dest) {
out\renderer\assets\index-4641637a.js:500:  if (!state.autoCastle)
out\renderer\assets\index-4641637a.js:501:    return false;
out\renderer\assets\index-4641637a.js:502:  const king2 = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:503:  if (!king2 || king2.role !== "king")
out\renderer\assets\index-4641637a.js:504:    return false;
out\renderer\assets\index-4641637a.js:505:  const origPos = key2pos(orig);
out\renderer\assets\index-4641637a.js:506:  const destPos = key2pos(dest);
out\renderer\assets\index-4641637a.js:507:  if (origPos[1] !== 0 && origPos[1] !== 7 || origPos[1] !== destPos[1])
out\renderer\assets\index-4641637a.js:508:    return false;
out\renderer\assets\index-4641637a.js:509:  if (origPos[0] === 4 && !state.pieces.has(dest)) {
out\renderer\assets\index-4641637a.js:510:    if (destPos[0] === 6)
out\renderer\assets\index-4641637a.js:511:      dest = pos2key([7, destPos[1]]);
out\renderer\assets\index-4641637a.js:512:    else if (destPos[0] === 2)
out\renderer\assets\index-4641637a.js:513:      dest = pos2key([0, destPos[1]]);
out\renderer\assets\index-4641637a.js:514:  }
out\renderer\assets\index-4641637a.js:515:  const rook2 = state.pieces.get(dest);
out\renderer\assets\index-4641637a.js:516:  if (!rook2 || rook2.color !== king2.color || rook2.role !== "rook")
out\renderer\assets\index-4641637a.js:517:    return false;
out\renderer\assets\index-4641637a.js:518:  state.pieces.delete(orig);
out\renderer\assets\index-4641637a.js:519:  state.pieces.delete(dest);
out\renderer\assets\index-4641637a.js:520:  if (origPos[0] < destPos[0]) {
out\renderer\assets\index-4641637a.js:521:    state.pieces.set(pos2key([6, destPos[1]]), king2);
out\renderer\assets\index-4641637a.js:522:    state.pieces.set(pos2key([5, destPos[1]]), rook2);
out\renderer\assets\index-4641637a.js:523:  } else {
out\renderer\assets\index-4641637a.js:524:    state.pieces.set(pos2key([2, destPos[1]]), king2);
out\renderer\assets\index-4641637a.js:525:    state.pieces.set(pos2key([3, destPos[1]]), rook2);
out\renderer\assets\index-4641637a.js:526:  }
out\renderer\assets\index-4641637a.js:527:  return true;
out\renderer\assets\index-4641637a.js:528:}
out\renderer\assets\index-4641637a.js:529:function baseMove(state, orig, dest) {
out\renderer\assets\index-4641637a.js:530:  const origPiece = state.pieces.get(orig), destPiece = state.pieces.get(dest);
out\renderer\assets\index-4641637a.js:531:  if (orig === dest || !origPiece)
out\renderer\assets\index-4641637a.js:532:    return false;
out\renderer\assets\index-4641637a.js:533:  const captured = destPiece && destPiece.color !== origPiece.color ? destPiece : void 0;
out\renderer\assets\index-4641637a.js:534:  if (dest === state.selected)
out\renderer\assets\index-4641637a.js:535:    unselect(state);
out\renderer\assets\index-4641637a.js:536:  callUserFunction(state.events.move, orig, dest, captured);
out\renderer\assets\index-4641637a.js:537:  if (!tryAutoCastle(state, orig, dest)) {
out\renderer\assets\index-4641637a.js:538:    state.pieces.set(dest, origPiece);
out\renderer\assets\index-4641637a.js:539:    state.pieces.delete(orig);
out\renderer\assets\index-4641637a.js:540:  }
out\renderer\assets\index-4641637a.js:541:  state.lastMove = [orig, dest];
out\renderer\assets\index-4641637a.js:542:  state.check = void 0;
out\renderer\assets\index-4641637a.js:543:  callUserFunction(state.events.change);
out\renderer\assets\index-4641637a.js:544:  return captured || true;
out\renderer\assets\index-4641637a.js:545:}
out\renderer\assets\index-4641637a.js:546:function baseNewPiece(state, piece, key, force) {
out\renderer\assets\index-4641637a.js:547:  if (state.pieces.has(key)) {
out\renderer\assets\index-4641637a.js:548:    if (force)
out\renderer\assets\index-4641637a.js:549:      state.pieces.delete(key);
out\renderer\assets\index-4641637a.js:550:    else
out\renderer\assets\index-4641637a.js:551:      return false;
out\renderer\assets\index-4641637a.js:552:  }
out\renderer\assets\index-4641637a.js:553:  callUserFunction(state.events.dropNewPiece, piece, key);
out\renderer\assets\index-4641637a.js:554:  state.pieces.set(key, piece);
out\renderer\assets\index-4641637a.js:555:  state.lastMove = [key];
out\renderer\assets\index-4641637a.js:556:  state.check = void 0;
out\renderer\assets\index-4641637a.js:557:  callUserFunction(state.events.change);
out\renderer\assets\index-4641637a.js:558:  state.movable.dests = void 0;
out\renderer\assets\index-4641637a.js:559:  state.turnColor = opposite$1(state.turnColor);
out\renderer\assets\index-4641637a.js:560:  return true;
out\renderer\assets\index-4641637a.js:561:}
out\renderer\assets\index-4641637a.js:562:function baseUserMove(state, orig, dest) {
out\renderer\assets\index-4641637a.js:563:  const result = baseMove(state, orig, dest);
out\renderer\assets\index-4641637a.js:564:  if (result) {
out\renderer\assets\index-4641637a.js:565:    state.movable.dests = void 0;
out\renderer\assets\index-4641637a.js:566:    state.turnColor = opposite$1(state.turnColor);
out\renderer\assets\index-4641637a.js:567:    state.animation.current = void 0;
out\renderer\assets\index-4641637a.js:568:  }
out\renderer\assets\index-4641637a.js:569:  return result;
out\renderer\assets\index-4641637a.js:570:}
out\renderer\assets\index-4641637a.js:571:function userMove(state, orig, dest) {
out\renderer\assets\index-4641637a.js:572:  if (canMove(state, orig, dest)) {
out\renderer\assets\index-4641637a.js:573:    const result = baseUserMove(state, orig, dest);
out\renderer\assets\index-4641637a.js:574:    if (result) {
out\renderer\assets\index-4641637a.js:575:      const holdTime = state.hold.stop();
out\renderer\assets\index-4641637a.js:576:      unselect(state);
out\renderer\assets\index-4641637a.js:577:      const metadata = {
out\renderer\assets\index-4641637a.js:578:        premove: false,
out\renderer\assets\index-4641637a.js:579:        ctrlKey: state.stats.ctrlKey,
out\renderer\assets\index-4641637a.js:580:        holdTime
out\renderer\assets\index-4641637a.js:581:      };
out\renderer\assets\index-4641637a.js:582:      if (result !== true)
out\renderer\assets\index-4641637a.js:583:        metadata.captured = result;
out\renderer\assets\index-4641637a.js:584:      callUserFunction(state.movable.events.after, orig, dest, metadata);
out\renderer\assets\index-4641637a.js:585:      return true;
out\renderer\assets\index-4641637a.js:586:    }
out\renderer\assets\index-4641637a.js:587:  } else if (canPremove(state, orig, dest)) {
out\renderer\assets\index-4641637a.js:588:    setPremove(state, orig, dest, {
out\renderer\assets\index-4641637a.js:589:      ctrlKey: state.stats.ctrlKey
out\renderer\assets\index-4641637a.js:590:    });
out\renderer\assets\index-4641637a.js:591:    unselect(state);
out\renderer\assets\index-4641637a.js:592:    return true;
out\renderer\assets\index-4641637a.js:593:  }
out\renderer\assets\index-4641637a.js:594:  unselect(state);
out\renderer\assets\index-4641637a.js:595:  return false;
out\renderer\assets\index-4641637a.js:596:}
out\renderer\assets\index-4641637a.js:597:function dropNewPiece(state, orig, dest, force) {
out\renderer\assets\index-4641637a.js:598:  const piece = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:599:  if (piece && (canDrop(state, orig, dest) || force)) {
out\renderer\assets\index-4641637a.js:600:    state.pieces.delete(orig);
out\renderer\assets\index-4641637a.js:601:    baseNewPiece(state, piece, dest, force);
out\renderer\assets\index-4641637a.js:602:    callUserFunction(state.movable.events.afterNewPiece, piece.role, dest, {
out\renderer\assets\index-4641637a.js:603:      premove: false,
out\renderer\assets\index-4641637a.js:604:      predrop: false
out\renderer\assets\index-4641637a.js:605:    });
out\renderer\assets\index-4641637a.js:606:  } else if (piece && canPredrop(state, orig, dest)) {
out\renderer\assets\index-4641637a.js:607:    setPredrop(state, piece.role, dest);
out\renderer\assets\index-4641637a.js:608:  } else {
out\renderer\assets\index-4641637a.js:609:    unsetPremove(state);
out\renderer\assets\index-4641637a.js:610:    unsetPredrop(state);
out\renderer\assets\index-4641637a.js:611:  }
out\renderer\assets\index-4641637a.js:612:  state.pieces.delete(orig);
out\renderer\assets\index-4641637a.js:613:  unselect(state);
out\renderer\assets\index-4641637a.js:614:}
out\renderer\assets\index-4641637a.js:615:function selectSquare(state, key, force) {
out\renderer\assets\index-4641637a.js:616:  callUserFunction(state.events.select, key);
out\renderer\assets\index-4641637a.js:617:  if (state.selected) {
out\renderer\assets\index-4641637a.js:618:    if (state.selected === key && !state.draggable.enabled) {
out\renderer\assets\index-4641637a.js:619:      unselect(state);
out\renderer\assets\index-4641637a.js:620:      state.hold.cancel();
out\renderer\assets\index-4641637a.js:621:      return;
out\renderer\assets\index-4641637a.js:622:    } else if ((state.selectable.enabled || force) && state.selected !== key) {
out\renderer\assets\index-4641637a.js:623:      if (userMove(state, state.selected, key)) {
out\renderer\assets\index-4641637a.js:624:        state.stats.dragged = false;
out\renderer\assets\index-4641637a.js:625:        return;
out\renderer\assets\index-4641637a.js:626:      }
out\renderer\assets\index-4641637a.js:627:    }
out\renderer\assets\index-4641637a.js:628:  }
out\renderer\assets\index-4641637a.js:629:  if ((state.selectable.enabled || state.draggable.enabled) && (isMovable(state, key) || isPremovable(state, key))) {
out\renderer\assets\index-4641637a.js:630:    setSelected(state, key);
out\renderer\assets\index-4641637a.js:631:    state.hold.start();
out\renderer\assets\index-4641637a.js:632:  }
out\renderer\assets\index-4641637a.js:633:}
out\renderer\assets\index-4641637a.js:634:function setSelected(state, key) {
out\renderer\assets\index-4641637a.js:635:  state.selected = key;
out\renderer\assets\index-4641637a.js:636:  if (isPremovable(state, key)) {
out\renderer\assets\index-4641637a.js:637:    state.premovable.dests = premove(state.pieces, key, state.premovable.castle);
out\renderer\assets\index-4641637a.js:638:  } else
out\renderer\assets\index-4641637a.js:639:    state.premovable.dests = void 0;
out\renderer\assets\index-4641637a.js:640:}
out\renderer\assets\index-4641637a.js:641:function unselect(state) {
out\renderer\assets\index-4641637a.js:642:  state.selected = void 0;
out\renderer\assets\index-4641637a.js:643:  state.premovable.dests = void 0;
out\renderer\assets\index-4641637a.js:644:  state.hold.cancel();
out\renderer\assets\index-4641637a.js:645:}
out\renderer\assets\index-4641637a.js:646:function isMovable(state, orig) {
out\renderer\assets\index-4641637a.js:647:  const piece = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:648:  return !!piece && (state.movable.color === "both" || state.movable.color === piece.color && state.turnColor === piece.color);
out\renderer\assets\index-4641637a.js:649:}
out\renderer\assets\index-4641637a.js:650:const canMove = (state, orig, dest) => {
out\renderer\assets\index-4641637a.js:651:  var _a, _b;
out\renderer\assets\index-4641637a.js:652:  return orig !== dest && isMovable(state, orig) && (state.movable.free || !!((_b = (_a = state.movable.dests) === null || _a === void 0 ? void 0 : _a.get(orig)) === null || _b === void 0 ? void 0 : _b.includes(dest)));
out\renderer\assets\index-4641637a.js:653:};
out\renderer\assets\index-4641637a.js:654:function canDrop(state, orig, dest) {
out\renderer\assets\index-4641637a.js:655:  const piece = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:656:  return !!piece && (orig === dest || !state.pieces.has(dest)) && (state.movable.color === "both" || state.movable.color === piece.color && state.turnColor === piece.color);
out\renderer\assets\index-4641637a.js:657:}
out\renderer\assets\index-4641637a.js:658:function isPremovable(state, orig) {
out\renderer\assets\index-4641637a.js:659:  const piece = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:660:  return !!piece && state.premovable.enabled && state.movable.color === piece.color && state.turnColor !== piece.color;
out\renderer\assets\index-4641637a.js:661:}
out\renderer\assets\index-4641637a.js:662:const canPremove = (state, orig, dest) => orig !== dest && isPremovable(state, orig) && premove(state.pieces, orig, state.premovable.castle).includes(dest);
out\renderer\assets\index-4641637a.js:663:function canPredrop(state, orig, dest) {
out\renderer\assets\index-4641637a.js:664:  const piece = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:665:  const destPiece = state.pieces.get(dest);
out\renderer\assets\index-4641637a.js:666:  return !!piece && (!destPiece || destPiece.color !== state.movable.color) && state.predroppable.enabled && (piece.role !== "pawn" || dest[1] !== "1" && dest[1] !== "8") && state.movable.color === piece.color && state.turnColor !== piece.color;
out\renderer\assets\index-4641637a.js:667:}
out\renderer\assets\index-4641637a.js:668:function isDraggable(state, orig) {
out\renderer\assets\index-4641637a.js:669:  const piece = state.pieces.get(orig);
out\renderer\assets\index-4641637a.js:670:  return !!piece && state.draggable.enabled && (state.movable.color === "both" || state.movable.color === piece.color && (state.turnColor === piece.color || state.premovable.enabled));
out\renderer\assets\index-4641637a.js:671:}
out\renderer\assets\index-4641637a.js:672:function playPremove(state) {
out\renderer\assets\index-4641637a.js:673:  const move2 = state.premovable.current;
out\renderer\assets\index-4641637a.js:674:  if (!move2)
out\renderer\assets\index-4641637a.js:675:    return false;
out\renderer\assets\index-4641637a.js:676:  const orig = move2[0], dest = move2[1];
out\renderer\assets\index-4641637a.js:677:  let success = false;
out\renderer\assets\index-4641637a.js:678:  if (canMove(state, orig, dest)) {
out\renderer\assets\index-4641637a.js:679:    const result = baseUserMove(state, orig, dest);
out\renderer\assets\index-4641637a.js:680:    if (result) {
out\renderer\assets\index-4641637a.js:681:      const metadata = { premove: true };
out\renderer\assets\index-4641637a.js:682:      if (result !== true)
out\renderer\assets\index-4641637a.js:683:        metadata.captured = result;
out\renderer\assets\index-4641637a.js:684:      callUserFunction(state.movable.events.after, orig, dest, metadata);
out\renderer\assets\index-4641637a.js:685:      success = true;
out\renderer\assets\index-4641637a.js:686:    }
out\renderer\assets\index-4641637a.js:687:  }
out\renderer\assets\index-4641637a.js:688:  unsetPremove(state);
out\renderer\assets\index-4641637a.js:689:  return success;
out\renderer\assets\index-4641637a.js:690:}
out\renderer\assets\index-4641637a.js:691:function playPredrop(state, validate) {
out\renderer\assets\index-4641637a.js:692:  const drop2 = state.predroppable.current;
out\renderer\assets\index-4641637a.js:693:  let success = false;
out\renderer\assets\index-4641637a.js:694:  if (!drop2)
out\renderer\assets\index-4641637a.js:695:    return false;
out\renderer\assets\index-4641637a.js:696:  if (validate(drop2)) {
out\renderer\assets\index-4641637a.js:697:    const piece = {
out\renderer\assets\index-4641637a.js:698:      role: drop2.role,
out\renderer\assets\index-4641637a.js:699:      color: state.movable.color
out\renderer\assets\index-4641637a.js:700:    };
out\renderer\assets\index-4641637a.js:701:    if (baseNewPiece(state, piece, drop2.key)) {
out\renderer\assets\index-4641637a.js:702:      callUserFunction(state.movable.events.afterNewPiece, drop2.role, drop2.key, {
out\renderer\assets\index-4641637a.js:703:        premove: false,
out\renderer\assets\index-4641637a.js:704:        predrop: true
out\renderer\assets\index-4641637a.js:705:      });
out\renderer\assets\index-4641637a.js:706:      success = true;
out\renderer\assets\index-4641637a.js:707:    }
out\renderer\assets\index-4641637a.js:708:  }
out\renderer\assets\index-4641637a.js:709:  unsetPredrop(state);
out\renderer\assets\index-4641637a.js:710:  return success;
out\renderer\assets\index-4641637a.js:711:}
out\renderer\assets\index-4641637a.js:712:function cancelMove(state) {
out\renderer\assets\index-4641637a.js:713:  unsetPremove(state);
out\renderer\assets\index-4641637a.js:714:  unsetPredrop(state);
out\renderer\assets\index-4641637a.js:715:  unselect(state);
out\renderer\assets\index-4641637a.js:716:}
out\renderer\assets\index-4641637a.js:717:function stop(state) {
out\renderer\assets\index-4641637a.js:718:  state.movable.color = state.movable.dests = state.animation.current = void 0;
out\renderer\assets\index-4641637a.js:719:  cancelMove(state);
out\renderer\assets\index-4641637a.js:720:}
out\renderer\assets\index-4641637a.js:721:function getKeyAtDomPos(pos, asWhite, bounds) {
out\renderer\assets\index-4641637a.js:722:  let file = Math.floor(8 * (pos[0] - bounds.left) / bounds.width);
out\renderer\assets\index-4641637a.js:723:  if (!asWhite)
out\renderer\assets\index-4641637a.js:724:    file = 7 - file;
out\renderer\assets\index-4641637a.js:725:  let rank = 7 - Math.floor(8 * (pos[1] - bounds.top) / bounds.height);
out\renderer\assets\index-4641637a.js:726:  if (!asWhite)
out\renderer\assets\index-4641637a.js:727:    rank = 7 - rank;
out\renderer\assets\index-4641637a.js:728:  return file >= 0 && file < 8 && rank >= 0 && rank < 8 ? pos2key([file, rank]) : void 0;
out\renderer\assets\index-4641637a.js:729:}
out\renderer\assets\index-4641637a.js:730:function getSnappedKeyAtDomPos(orig, pos, asWhite, bounds) {
out\renderer\assets\index-4641637a.js:731:  const origPos = key2pos(orig);
out\renderer\assets\index-4641637a.js:732:  const validSnapPos = allPos.filter((pos2) => queen(origPos[0], origPos[1], pos2[0], pos2[1]) || knight(origPos[0], origPos[1], pos2[0], pos2[1]));
out\renderer\assets\index-4641637a.js:733:  const validSnapCenters = validSnapPos.map((pos2) => computeSquareCenter(pos2key(pos2), asWhite, bounds));
out\renderer\assets\index-4641637a.js:734:  const validSnapDistances = validSnapCenters.map((pos2) => distanceSq(pos, pos2));
out\renderer\assets\index-4641637a.js:735:  const [, closestSnapIndex] = validSnapDistances.reduce((a, b, index) => a[0] < b ? a : [b, index], [validSnapDistances[0], 0]);
out\renderer\assets\index-4641637a.js:736:  return pos2key(validSnapPos[closestSnapIndex]);
out\renderer\assets\index-4641637a.js:737:}
out\renderer\assets\index-4641637a.js:738:const whitePov = (s) => s.orientation === "white";
out\renderer\assets\index-4641637a.js:739:const initial = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR";
out\renderer\assets\index-4641637a.js:740:const roles = {
out\renderer\assets\index-4641637a.js:741:  p: "pawn",
out\renderer\assets\index-4641637a.js:742:  r: "rook",
out\renderer\assets\index-4641637a.js:743:  n: "knight",
out\renderer\assets\index-4641637a.js:744:  b: "bishop",
out\renderer\assets\index-4641637a.js:745:  q: "queen",
out\renderer\assets\index-4641637a.js:746:  k: "king"
out\renderer\assets\index-4641637a.js:747:};
out\renderer\assets\index-4641637a.js:748:const letters = {
out\renderer\assets\index-4641637a.js:749:  pawn: "p",
out\renderer\assets\index-4641637a.js:750:  rook: "r",
out\renderer\assets\index-4641637a.js:751:  knight: "n",
out\renderer\assets\index-4641637a.js:752:  bishop: "b",
out\renderer\assets\index-4641637a.js:753:  queen: "q",
out\renderer\assets\index-4641637a.js:754:  king: "k"
out\renderer\assets\index-4641637a.js:755:};
out\renderer\assets\index-4641637a.js:756:function read(fen) {
out\renderer\assets\index-4641637a.js:757:  if (fen === "start")
out\renderer\assets\index-4641637a.js:758:    fen = initial;
out\renderer\assets\index-4641637a.js:759:  const pieces = /* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:760:  let row = 7, col = 0;
out\renderer\assets\index-4641637a.js:761:  for (const c of fen) {
out\renderer\assets\index-4641637a.js:762:    switch (c) {
out\renderer\assets\index-4641637a.js:763:      case " ":
out\renderer\assets\index-4641637a.js:764:      case "[":
out\renderer\assets\index-4641637a.js:765:        return pieces;
out\renderer\assets\index-4641637a.js:766:      case "/":
out\renderer\assets\index-4641637a.js:767:        --row;
out\renderer\assets\index-4641637a.js:768:        if (row < 0)
out\renderer\assets\index-4641637a.js:769:          return pieces;
out\renderer\assets\index-4641637a.js:770:        col = 0;
out\renderer\assets\index-4641637a.js:771:        break;
out\renderer\assets\index-4641637a.js:772:      case "~": {
out\renderer\assets\index-4641637a.js:773:        const piece = pieces.get(pos2key([col - 1, row]));
out\renderer\assets\index-4641637a.js:774:        if (piece)
out\renderer\assets\index-4641637a.js:775:          piece.promoted = true;
out\renderer\assets\index-4641637a.js:776:        break;
out\renderer\assets\index-4641637a.js:777:      }
out\renderer\assets\index-4641637a.js:778:      default: {
out\renderer\assets\index-4641637a.js:779:        const nb = c.charCodeAt(0);
out\renderer\assets\index-4641637a.js:780:        if (nb < 57)
out\renderer\assets\index-4641637a.js:781:          col += nb - 48;
out\renderer\assets\index-4641637a.js:782:        else {
out\renderer\assets\index-4641637a.js:783:          const role = c.toLowerCase();
out\renderer\assets\index-4641637a.js:784:          pieces.set(pos2key([col, row]), {
out\renderer\assets\index-4641637a.js:785:            role: roles[role],
out\renderer\assets\index-4641637a.js:786:            color: c === role ? "black" : "white"
out\renderer\assets\index-4641637a.js:787:          });
out\renderer\assets\index-4641637a.js:788:          ++col;
out\renderer\assets\index-4641637a.js:789:        }
out\renderer\assets\index-4641637a.js:790:      }
out\renderer\assets\index-4641637a.js:791:    }
out\renderer\assets\index-4641637a.js:792:  }
out\renderer\assets\index-4641637a.js:793:  return pieces;
out\renderer\assets\index-4641637a.js:794:}
out\renderer\assets\index-4641637a.js:795:function write(pieces) {
out\renderer\assets\index-4641637a.js:796:  return invRanks.map((y) => files.map((x) => {
out\renderer\assets\index-4641637a.js:797:    const piece = pieces.get(x + y);
out\renderer\assets\index-4641637a.js:798:    if (piece) {
out\renderer\assets\index-4641637a.js:799:      let p = letters[piece.role];
out\renderer\assets\index-4641637a.js:800:      if (piece.color === "white")
out\renderer\assets\index-4641637a.js:801:        p = p.toUpperCase();
out\renderer\assets\index-4641637a.js:802:      if (piece.promoted)
out\renderer\assets\index-4641637a.js:803:        p += "~";
out\renderer\assets\index-4641637a.js:804:      return p;
out\renderer\assets\index-4641637a.js:805:    } else
out\renderer\assets\index-4641637a.js:806:      return "1";
out\renderer\assets\index-4641637a.js:807:  }).join("")).join("/").replace(/1{2,}/g, (s) => s.length.toString());
out\renderer\assets\index-4641637a.js:808:}
out\renderer\assets\index-4641637a.js:809:function applyAnimation(state, config) {
out\renderer\assets\index-4641637a.js:810:  if (config.animation) {
out\renderer\assets\index-4641637a.js:811:    deepMerge(state.animation, config.animation);
out\renderer\assets\index-4641637a.js:812:    if ((state.animation.duration || 0) < 70)
out\renderer\assets\index-4641637a.js:813:      state.animation.enabled = false;
out\renderer\assets\index-4641637a.js:814:  }
out\renderer\assets\index-4641637a.js:815:}
out\renderer\assets\index-4641637a.js:816:function configure(state, config) {
out\renderer\assets\index-4641637a.js:817:  var _a, _b, _c;
out\renderer\assets\index-4641637a.js:818:  if ((_a = config.movable) === null || _a === void 0 ? void 0 : _a.dests)
out\renderer\assets\index-4641637a.js:819:    state.movable.dests = void 0;
out\renderer\assets\index-4641637a.js:820:  if ((_b = config.drawable) === null || _b === void 0 ? void 0 : _b.autoShapes)
out\renderer\assets\index-4641637a.js:821:    state.drawable.autoShapes = [];
out\renderer\assets\index-4641637a.js:822:  deepMerge(state, config);
out\renderer\assets\index-4641637a.js:823:  if (config.fen) {
out\renderer\assets\index-4641637a.js:824:    state.pieces = read(config.fen);
out\renderer\assets\index-4641637a.js:825:    state.drawable.shapes = ((_c = config.drawable) === null || _c === void 0 ? void 0 : _c.shapes) || [];
out\renderer\assets\index-4641637a.js:826:  }
out\renderer\assets\index-4641637a.js:827:  if ("check" in config)
out\renderer\assets\index-4641637a.js:828:    setCheck(state, config.check || false);
out\renderer\assets\index-4641637a.js:829:  if ("lastMove" in config && !config.lastMove)
out\renderer\assets\index-4641637a.js:830:    state.lastMove = void 0;
out\renderer\assets\index-4641637a.js:831:  else if (config.lastMove)
out\renderer\assets\index-4641637a.js:832:    state.lastMove = config.lastMove;
out\renderer\assets\index-4641637a.js:833:  if (state.selected)
out\renderer\assets\index-4641637a.js:834:    setSelected(state, state.selected);
out\renderer\assets\index-4641637a.js:835:  applyAnimation(state, config);
out\renderer\assets\index-4641637a.js:836:  if (!state.movable.rookCastle && state.movable.dests) {
out\renderer\assets\index-4641637a.js:837:    const rank = state.movable.color === "white" ? "1" : "8", kingStartPos = "e" + rank, dests = state.movable.dests.get(kingStartPos), king2 = state.pieces.get(kingStartPos);
out\renderer\assets\index-4641637a.js:838:    if (!dests || !king2 || king2.role !== "king")
out\renderer\assets\index-4641637a.js:839:      return;
out\renderer\assets\index-4641637a.js:840:    state.movable.dests.set(kingStartPos, dests.filter((d) => !(d === "a" + rank && dests.includes("c" + rank)) && !(d === "h" + rank && dests.includes("g" + rank))));
out\renderer\assets\index-4641637a.js:841:  }
out\renderer\assets\index-4641637a.js:842:}
out\renderer\assets\index-4641637a.js:843:function deepMerge(base, extend) {
out\renderer\assets\index-4641637a.js:844:  for (const key in extend) {
out\renderer\assets\index-4641637a.js:845:    if (Object.prototype.hasOwnProperty.call(extend, key)) {
out\renderer\assets\index-4641637a.js:846:      if (Object.prototype.hasOwnProperty.call(base, key) && isPlainObject(base[key]) && isPlainObject(extend[key]))
out\renderer\assets\index-4641637a.js:847:        deepMerge(base[key], extend[key]);
out\renderer\assets\index-4641637a.js:848:      else
out\renderer\assets\index-4641637a.js:849:        base[key] = extend[key];
out\renderer\assets\index-4641637a.js:850:    }
out\renderer\assets\index-4641637a.js:851:  }
out\renderer\assets\index-4641637a.js:852:}
out\renderer\assets\index-4641637a.js:853:function isPlainObject(o) {
out\renderer\assets\index-4641637a.js:854:  if (typeof o !== "object" || o === null)
out\renderer\assets\index-4641637a.js:855:    return false;
out\renderer\assets\index-4641637a.js:856:  const proto = Object.getPrototypeOf(o);
out\renderer\assets\index-4641637a.js:857:  return proto === Object.prototype || proto === null;
out\renderer\assets\index-4641637a.js:858:}
out\renderer\assets\index-4641637a.js:859:const anim = (mutation, state) => state.animation.enabled ? animate(mutation, state) : render$2(mutation, state);
out\renderer\assets\index-4641637a.js:860:function render$2(mutation, state) {
out\renderer\assets\index-4641637a.js:861:  const result = mutation(state);
out\renderer\assets\index-4641637a.js:862:  state.dom.redraw();
out\renderer\assets\index-4641637a.js:863:  return result;
out\renderer\assets\index-4641637a.js:864:}
out\renderer\assets\index-4641637a.js:865:const makePiece = (key, piece) => ({
out\renderer\assets\index-4641637a.js:866:  key,
out\renderer\assets\index-4641637a.js:867:  pos: key2pos(key),
out\renderer\assets\index-4641637a.js:868:  piece
out\renderer\assets\index-4641637a.js:869:});
out\renderer\assets\index-4641637a.js:870:const closer = (piece, pieces) => pieces.sort((p1, p2) => distanceSq(piece.pos, p1.pos) - distanceSq(piece.pos, p2.pos))[0];
out\renderer\assets\index-4641637a.js:871:function computePlan(prevPieces, current) {
out\renderer\assets\index-4641637a.js:872:  const anims = /* @__PURE__ */ new Map(), animedOrigs = [], fadings = /* @__PURE__ */ new Map(), missings = [], news = [], prePieces = /* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:873:  let curP, preP, vector;
out\renderer\assets\index-4641637a.js:874:  for (const [k, p] of prevPieces) {
out\renderer\assets\index-4641637a.js:875:    prePieces.set(k, makePiece(k, p));
out\renderer\assets\index-4641637a.js:876:  }
out\renderer\assets\index-4641637a.js:877:  for (const key of allKeys) {
out\renderer\assets\index-4641637a.js:878:    curP = current.pieces.get(key);
out\renderer\assets\index-4641637a.js:879:    preP = prePieces.get(key);
out\renderer\assets\index-4641637a.js:880:    if (curP) {
out\renderer\assets\index-4641637a.js:881:      if (preP) {
out\renderer\assets\index-4641637a.js:882:        if (!samePiece(curP, preP.piece)) {
out\renderer\assets\index-4641637a.js:883:          missings.push(preP);
out\renderer\assets\index-4641637a.js:884:          news.push(makePiece(key, curP));
out\renderer\assets\index-4641637a.js:885:        }
out\renderer\assets\index-4641637a.js:886:      } else
out\renderer\assets\index-4641637a.js:887:        news.push(makePiece(key, curP));
out\renderer\assets\index-4641637a.js:888:    } else if (preP)
out\renderer\assets\index-4641637a.js:889:      missings.push(preP);
out\renderer\assets\index-4641637a.js:890:  }
out\renderer\assets\index-4641637a.js:891:  for (const newP of news) {
out\renderer\assets\index-4641637a.js:892:    preP = closer(newP, missings.filter((p) => samePiece(newP.piece, p.piece)));
out\renderer\assets\index-4641637a.js:893:    if (preP) {
out\renderer\assets\index-4641637a.js:894:      vector = [preP.pos[0] - newP.pos[0], preP.pos[1] - newP.pos[1]];
out\renderer\assets\index-4641637a.js:895:      anims.set(newP.key, vector.concat(vector));
out\renderer\assets\index-4641637a.js:896:      animedOrigs.push(preP.key);
out\renderer\assets\index-4641637a.js:897:    }
out\renderer\assets\index-4641637a.js:898:  }
out\renderer\assets\index-4641637a.js:899:  for (const p of missings) {
out\renderer\assets\index-4641637a.js:900:    if (!animedOrigs.includes(p.key))
out\renderer\assets\index-4641637a.js:901:      fadings.set(p.key, p.piece);
out\renderer\assets\index-4641637a.js:902:  }
out\renderer\assets\index-4641637a.js:903:  return {
out\renderer\assets\index-4641637a.js:904:    anims,
out\renderer\assets\index-4641637a.js:905:    fadings
out\renderer\assets\index-4641637a.js:906:  };
out\renderer\assets\index-4641637a.js:907:}
out\renderer\assets\index-4641637a.js:908:function step(state, now) {
out\renderer\assets\index-4641637a.js:909:  const cur = state.animation.current;
out\renderer\assets\index-4641637a.js:910:  if (cur === void 0) {
out\renderer\assets\index-4641637a.js:911:    if (!state.dom.destroyed)
out\renderer\assets\index-4641637a.js:912:      state.dom.redrawNow();
out\renderer\assets\index-4641637a.js:913:    return;
out\renderer\assets\index-4641637a.js:914:  }
out\renderer\assets\index-4641637a.js:915:  const rest = 1 - (now - cur.start) * cur.frequency;
out\renderer\assets\index-4641637a.js:916:  if (rest <= 0) {
out\renderer\assets\index-4641637a.js:917:    state.animation.current = void 0;
out\renderer\assets\index-4641637a.js:918:    state.dom.redrawNow();
out\renderer\assets\index-4641637a.js:919:  } else {
out\renderer\assets\index-4641637a.js:920:    const ease = easing(rest);
out\renderer\assets\index-4641637a.js:921:    for (const cfg of cur.plan.anims.values()) {
out\renderer\assets\index-4641637a.js:922:      cfg[2] = cfg[0] * ease;
out\renderer\assets\index-4641637a.js:923:      cfg[3] = cfg[1] * ease;
out\renderer\assets\index-4641637a.js:924:    }
out\renderer\assets\index-4641637a.js:925:    state.dom.redrawNow(true);
out\renderer\assets\index-4641637a.js:926:    requestAnimationFrame((now2 = performance.now()) => step(state, now2));
out\renderer\assets\index-4641637a.js:927:  }
out\renderer\assets\index-4641637a.js:928:}
out\renderer\assets\index-4641637a.js:929:function animate(mutation, state) {
out\renderer\assets\index-4641637a.js:930:  const prevPieces = new Map(state.pieces);
out\renderer\assets\index-4641637a.js:931:  const result = mutation(state);
out\renderer\assets\index-4641637a.js:932:  const plan = computePlan(prevPieces, state);
out\renderer\assets\index-4641637a.js:933:  if (plan.anims.size || plan.fadings.size) {
out\renderer\assets\index-4641637a.js:934:    const alreadyRunning = state.animation.current && state.animation.current.start;
out\renderer\assets\index-4641637a.js:935:    state.animation.current = {
out\renderer\assets\index-4641637a.js:936:      start: performance.now(),
out\renderer\assets\index-4641637a.js:937:      frequency: 1 / state.animation.duration,
out\renderer\assets\index-4641637a.js:938:      plan
out\renderer\assets\index-4641637a.js:939:    };
out\renderer\assets\index-4641637a.js:940:    if (!alreadyRunning)
out\renderer\assets\index-4641637a.js:941:      step(state, performance.now());
out\renderer\assets\index-4641637a.js:942:  } else {
out\renderer\assets\index-4641637a.js:943:    state.dom.redraw();
out\renderer\assets\index-4641637a.js:944:  }
out\renderer\assets\index-4641637a.js:945:  return result;
out\renderer\assets\index-4641637a.js:946:}
out\renderer\assets\index-4641637a.js:947:const easing = (t2) => t2 < 0.5 ? 4 * t2 * t2 * t2 : (t2 - 1) * (2 * t2 - 2) * (2 * t2 - 2) + 1;
out\renderer\assets\index-4641637a.js:948:const brushes = ["green", "red", "blue", "yellow"];
out\renderer\assets\index-4641637a.js:949:function start$2(state, e2) {
out\renderer\assets\index-4641637a.js:950:  if (e2.touches && e2.touches.length > 1)
out\renderer\assets\index-4641637a.js:951:    return;
out\renderer\assets\index-4641637a.js:952:  e2.stopPropagation();
out\renderer\assets\index-4641637a.js:953:  e2.preventDefault();
out\renderer\assets\index-4641637a.js:954:  e2.ctrlKey ? unselect(state) : cancelMove(state);
out\renderer\assets\index-4641637a.js:955:  const pos = eventPosition(e2), orig = getKeyAtDomPos(pos, whitePov(state), state.dom.bounds());
out\renderer\assets\index-4641637a.js:956:  if (!orig)
out\renderer\assets\index-4641637a.js:957:    return;
out\renderer\assets\index-4641637a.js:958:  state.drawable.current = {
out\renderer\assets\index-4641637a.js:959:    orig,
out\renderer\assets\index-4641637a.js:960:    pos,
out\renderer\assets\index-4641637a.js:961:    brush: eventBrush(e2),
out\renderer\assets\index-4641637a.js:962:    snapToValidMove: state.drawable.defaultSnapToValidMove
out\renderer\assets\index-4641637a.js:963:  };
out\renderer\assets\index-4641637a.js:964:  processDraw(state);
out\renderer\assets\index-4641637a.js:965:}
out\renderer\assets\index-4641637a.js:966:function processDraw(state) {
out\renderer\assets\index-4641637a.js:967:  requestAnimationFrame(() => {
out\renderer\assets\index-4641637a.js:968:    const cur = state.drawable.current;
out\renderer\assets\index-4641637a.js:969:    if (cur) {
out\renderer\assets\index-4641637a.js:970:      const keyAtDomPos = getKeyAtDomPos(cur.pos, whitePov(state), state.dom.bounds());
out\renderer\assets\index-4641637a.js:971:      if (!keyAtDomPos) {
out\renderer\assets\index-4641637a.js:972:        cur.snapToValidMove = false;
out\renderer\assets\index-4641637a.js:973:      }
out\renderer\assets\index-4641637a.js:974:      const mouseSq = cur.snapToValidMove ? getSnappedKeyAtDomPos(cur.orig, cur.pos, whitePov(state), state.dom.bounds()) : keyAtDomPos;
out\renderer\assets\index-4641637a.js:975:      if (mouseSq !== cur.mouseSq) {
out\renderer\assets\index-4641637a.js:976:        cur.mouseSq = mouseSq;
out\renderer\assets\index-4641637a.js:977:        cur.dest = mouseSq !== cur.orig ? mouseSq : void 0;
out\renderer\assets\index-4641637a.js:978:        state.dom.redrawNow();
out\renderer\assets\index-4641637a.js:979:      }
out\renderer\assets\index-4641637a.js:980:      processDraw(state);
out\renderer\assets\index-4641637a.js:981:    }
out\renderer\assets\index-4641637a.js:982:  });
out\renderer\assets\index-4641637a.js:983:}
out\renderer\assets\index-4641637a.js:984:function move$1(state, e2) {
out\renderer\assets\index-4641637a.js:985:  if (state.drawable.current)
out\renderer\assets\index-4641637a.js:986:    state.drawable.current.pos = eventPosition(e2);
out\renderer\assets\index-4641637a.js:987:}
out\renderer\assets\index-4641637a.js:988:function end$1(state) {
out\renderer\assets\index-4641637a.js:989:  const cur = state.drawable.current;
out\renderer\assets\index-4641637a.js:990:  if (cur) {
out\renderer\assets\index-4641637a.js:991:    if (cur.mouseSq)
out\renderer\assets\index-4641637a.js:992:      addShape(state.drawable, cur);
out\renderer\assets\index-4641637a.js:993:    cancel$1(state);
out\renderer\assets\index-4641637a.js:994:  }
out\renderer\assets\index-4641637a.js:995:}
out\renderer\assets\index-4641637a.js:996:function cancel$1(state) {
out\renderer\assets\index-4641637a.js:997:  if (state.drawable.current) {
out\renderer\assets\index-4641637a.js:998:    state.drawable.current = void 0;
out\renderer\assets\index-4641637a.js:999:    state.dom.redraw();
out\renderer\assets\index-4641637a.js:1000:  }
out\renderer\assets\index-4641637a.js:1001:}
out\renderer\assets\index-4641637a.js:1002:function clear(state) {
out\renderer\assets\index-4641637a.js:1003:  if (state.drawable.shapes.length) {
out\renderer\assets\index-4641637a.js:1004:    state.drawable.shapes = [];
out\renderer\assets\index-4641637a.js:1005:    state.dom.redraw();
out\renderer\assets\index-4641637a.js:1006:    onChange(state.drawable);
out\renderer\assets\index-4641637a.js:1007:  }
out\renderer\assets\index-4641637a.js:1008:}
out\renderer\assets\index-4641637a.js:1009:function eventBrush(e2) {
out\renderer\assets\index-4641637a.js:1010:  var _a;
out\renderer\assets\index-4641637a.js:1011:  const modA = (e2.shiftKey || e2.ctrlKey) && isRightButton(e2);
out\renderer\assets\index-4641637a.js:1012:  const modB = e2.altKey || e2.metaKey || ((_a = e2.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e2, "AltGraph"));
out\renderer\assets\index-4641637a.js:1013:  return brushes[(modA ? 1 : 0) + (modB ? 2 : 0)];
out\renderer\assets\index-4641637a.js:1014:}
out\renderer\assets\index-4641637a.js:1015:function addShape(drawable, cur) {
out\renderer\assets\index-4641637a.js:1016:  const sameShape = (s) => s.orig === cur.orig && s.dest === cur.dest;
out\renderer\assets\index-4641637a.js:1017:  const similar = drawable.shapes.find(sameShape);
out\renderer\assets\index-4641637a.js:1018:  if (similar)
out\renderer\assets\index-4641637a.js:1019:    drawable.shapes = drawable.shapes.filter((s) => !sameShape(s));
out\renderer\assets\index-4641637a.js:1020:  if (!similar || similar.brush !== cur.brush)
out\renderer\assets\index-4641637a.js:1021:    drawable.shapes.push({
out\renderer\assets\index-4641637a.js:1022:      orig: cur.orig,
out\renderer\assets\index-4641637a.js:1023:      dest: cur.dest,
out\renderer\assets\index-4641637a.js:1024:      brush: cur.brush
out\renderer\assets\index-4641637a.js:1025:    });
out\renderer\assets\index-4641637a.js:1026:  onChange(drawable);
out\renderer\assets\index-4641637a.js:1027:}
out\renderer\assets\index-4641637a.js:1028:function onChange(drawable) {
out\renderer\assets\index-4641637a.js:1029:  if (drawable.onChange)
out\renderer\assets\index-4641637a.js:1030:    drawable.onChange(drawable.shapes);
out\renderer\assets\index-4641637a.js:1031:}
out\renderer\assets\index-4641637a.js:1032:function start$1(s, e2) {
out\renderer\assets\index-4641637a.js:1033:  if (!e2.isTrusted || e2.button !== void 0 && e2.button !== 0)
out\renderer\assets\index-4641637a.js:1034:    return;
out\renderer\assets\index-4641637a.js:1035:  if (e2.touches && e2.touches.length > 1)
out\renderer\assets\index-4641637a.js:1036:    return;
out\renderer\assets\index-4641637a.js:1037:  const bounds = s.dom.bounds(), position = eventPosition(e2), orig = getKeyAtDomPos(position, whitePov(s), bounds);
out\renderer\assets\index-4641637a.js:1038:  if (!orig)
out\renderer\assets\index-4641637a.js:1039:    return;
out\renderer\assets\index-4641637a.js:1040:  const piece = s.pieces.get(orig);
out\renderer\assets\index-4641637a.js:1041:  const previouslySelected = s.selected;
out\renderer\assets\index-4641637a.js:1042:  if (!previouslySelected && s.drawable.enabled && (s.drawable.eraseOnClick || !piece || piece.color !== s.turnColor))
out\renderer\assets\index-4641637a.js:1043:    clear(s);
out\renderer\assets\index-4641637a.js:1044:  if (e2.cancelable !== false && (!e2.touches || s.blockTouchScroll || piece || previouslySelected || pieceCloseTo(s, position)))
out\renderer\assets\index-4641637a.js:1045:    e2.preventDefault();
out\renderer\assets\index-4641637a.js:1046:  const hadPremove = !!s.premovable.current;
out\renderer\assets\index-4641637a.js:1047:  const hadPredrop = !!s.predroppable.current;
out\renderer\assets\index-4641637a.js:1048:  s.stats.ctrlKey = e2.ctrlKey;
out\renderer\assets\index-4641637a.js:1049:  if (s.selected && canMove(s, s.selected, orig)) {
out\renderer\assets\index-4641637a.js:1050:    anim((state) => selectSquare(state, orig), s);
out\renderer\assets\index-4641637a.js:1051:  } else {
out\renderer\assets\index-4641637a.js:1052:    selectSquare(s, orig);
out\renderer\assets\index-4641637a.js:1053:  }
out\renderer\assets\index-4641637a.js:1054:  const stillSelected = s.selected === orig;
out\renderer\assets\index-4641637a.js:1055:  const element2 = pieceElementByKey(s, orig);
out\renderer\assets\index-4641637a.js:1056:  if (piece && element2 && stillSelected && isDraggable(s, orig)) {
out\renderer\assets\index-4641637a.js:1057:    s.draggable.current = {
out\renderer\assets\index-4641637a.js:1058:      orig,
out\renderer\assets\index-4641637a.js:1059:      piece,
out\renderer\assets\index-4641637a.js:1060:      origPos: position,
out\renderer\assets\index-4641637a.js:1061:      pos: position,
out\renderer\assets\index-4641637a.js:1062:      started: s.draggable.autoDistance && s.stats.dragged,
out\renderer\assets\index-4641637a.js:1063:      element: element2,
out\renderer\assets\index-4641637a.js:1064:      previouslySelected,
out\renderer\assets\index-4641637a.js:1065:      originTarget: e2.target,
out\renderer\assets\index-4641637a.js:1066:      keyHasChanged: false
out\renderer\assets\index-4641637a.js:1067:    };
out\renderer\assets\index-4641637a.js:1068:    element2.cgDragging = true;
out\renderer\assets\index-4641637a.js:1069:    element2.classList.add("dragging");
out\renderer\assets\index-4641637a.js:1070:    const ghost = s.dom.elements.ghost;
out\renderer\assets\index-4641637a.js:1071:    if (ghost) {
out\renderer\assets\index-4641637a.js:1072:      ghost.className = `ghost ${piece.color} ${piece.role}`;
out\renderer\assets\index-4641637a.js:1073:      translate(ghost, posToTranslate(bounds)(key2pos(orig), whitePov(s)));
out\renderer\assets\index-4641637a.js:1074:      setVisible(ghost, true);
out\renderer\assets\index-4641637a.js:1075:    }
out\renderer\assets\index-4641637a.js:1076:    processDrag(s);
out\renderer\assets\index-4641637a.js:1077:  } else {
out\renderer\assets\index-4641637a.js:1078:    if (hadPremove)
out\renderer\assets\index-4641637a.js:1079:      unsetPremove(s);
out\renderer\assets\index-4641637a.js:1080:    if (hadPredrop)
out\renderer\assets\index-4641637a.js:1081:      unsetPredrop(s);
out\renderer\assets\index-4641637a.js:1082:  }
out\renderer\assets\index-4641637a.js:1083:  s.dom.redraw();
out\renderer\assets\index-4641637a.js:1084:}
out\renderer\assets\index-4641637a.js:1085:function pieceCloseTo(s, pos) {
out\renderer\assets\index-4641637a.js:1086:  const asWhite = whitePov(s), bounds = s.dom.bounds(), radiusSq = Math.pow(bounds.width / 8, 2);
out\renderer\assets\index-4641637a.js:1087:  for (const key of s.pieces.keys()) {
out\renderer\assets\index-4641637a.js:1088:    const center = computeSquareCenter(key, asWhite, bounds);
out\renderer\assets\index-4641637a.js:1089:    if (distanceSq(center, pos) <= radiusSq)
out\renderer\assets\index-4641637a.js:1090:      return true;
out\renderer\assets\index-4641637a.js:1091:  }
out\renderer\assets\index-4641637a.js:1092:  return false;
out\renderer\assets\index-4641637a.js:1093:}
out\renderer\assets\index-4641637a.js:1094:function dragNewPiece(s, piece, e2, force) {
out\renderer\assets\index-4641637a.js:1095:  const key = "a0";
out\renderer\assets\index-4641637a.js:1096:  s.pieces.set(key, piece);
out\renderer\assets\index-4641637a.js:1097:  s.dom.redraw();
out\renderer\assets\index-4641637a.js:1098:  const position = eventPosition(e2);
out\renderer\assets\index-4641637a.js:1099:  s.draggable.current = {
out\renderer\assets\index-4641637a.js:1100:    orig: key,
out\renderer\assets\index-4641637a.js:1101:    piece,
out\renderer\assets\index-4641637a.js:1102:    origPos: position,
out\renderer\assets\index-4641637a.js:1103:    pos: position,
out\renderer\assets\index-4641637a.js:1104:    started: true,
out\renderer\assets\index-4641637a.js:1105:    element: () => pieceElementByKey(s, key),
out\renderer\assets\index-4641637a.js:1106:    originTarget: e2.target,
out\renderer\assets\index-4641637a.js:1107:    newPiece: true,
out\renderer\assets\index-4641637a.js:1108:    force: !!force,
out\renderer\assets\index-4641637a.js:1109:    keyHasChanged: false
out\renderer\assets\index-4641637a.js:1110:  };
out\renderer\assets\index-4641637a.js:1111:  processDrag(s);
out\renderer\assets\index-4641637a.js:1112:}
out\renderer\assets\index-4641637a.js:1113:function processDrag(s) {
out\renderer\assets\index-4641637a.js:1114:  requestAnimationFrame(() => {
out\renderer\assets\index-4641637a.js:1115:    var _a;
out\renderer\assets\index-4641637a.js:1116:    const cur = s.draggable.current;
out\renderer\assets\index-4641637a.js:1117:    if (!cur)
out\renderer\assets\index-4641637a.js:1118:      return;
out\renderer\assets\index-4641637a.js:1119:    if ((_a = s.animation.current) === null || _a === void 0 ? void 0 : _a.plan.anims.has(cur.orig))
out\renderer\assets\index-4641637a.js:1120:      s.animation.current = void 0;
out\renderer\assets\index-4641637a.js:1121:    const origPiece = s.pieces.get(cur.orig);
out\renderer\assets\index-4641637a.js:1122:    if (!origPiece || !samePiece(origPiece, cur.piece))
out\renderer\assets\index-4641637a.js:1123:      cancel(s);
out\renderer\assets\index-4641637a.js:1124:    else {
out\renderer\assets\index-4641637a.js:1125:      if (!cur.started && distanceSq(cur.pos, cur.origPos) >= Math.pow(s.draggable.distance, 2))
out\renderer\assets\index-4641637a.js:1126:        cur.started = true;
out\renderer\assets\index-4641637a.js:1127:      if (cur.started) {
out\renderer\assets\index-4641637a.js:1128:        if (typeof cur.element === "function") {
out\renderer\assets\index-4641637a.js:1129:          const found = cur.element();
out\renderer\assets\index-4641637a.js:1130:          if (!found)
out\renderer\assets\index-4641637a.js:1131:            return;
out\renderer\assets\index-4641637a.js:1132:          found.cgDragging = true;
out\renderer\assets\index-4641637a.js:1133:          found.classList.add("dragging");
out\renderer\assets\index-4641637a.js:1134:          cur.element = found;
out\renderer\assets\index-4641637a.js:1135:        }
out\renderer\assets\index-4641637a.js:1136:        const bounds = s.dom.bounds();
out\renderer\assets\index-4641637a.js:1137:        translate(cur.element, [
out\renderer\assets\index-4641637a.js:1138:          cur.pos[0] - bounds.left - bounds.width / 16,
out\renderer\assets\index-4641637a.js:1139:          cur.pos[1] - bounds.top - bounds.height / 16
out\renderer\assets\index-4641637a.js:1140:        ]);
out\renderer\assets\index-4641637a.js:1141:        cur.keyHasChanged || (cur.keyHasChanged = cur.orig !== getKeyAtDomPos(cur.pos, whitePov(s), bounds));
out\renderer\assets\index-4641637a.js:1142:      }
out\renderer\assets\index-4641637a.js:1143:    }
out\renderer\assets\index-4641637a.js:1144:    processDrag(s);
out\renderer\assets\index-4641637a.js:1145:  });
out\renderer\assets\index-4641637a.js:1146:}
out\renderer\assets\index-4641637a.js:1147:function move(s, e2) {
out\renderer\assets\index-4641637a.js:1148:  if (s.draggable.current && (!e2.touches || e2.touches.length < 2)) {
out\renderer\assets\index-4641637a.js:1149:    s.draggable.current.pos = eventPosition(e2);
out\renderer\assets\index-4641637a.js:1150:  }
out\renderer\assets\index-4641637a.js:1151:}
out\renderer\assets\index-4641637a.js:1152:function end(s, e2) {
out\renderer\assets\index-4641637a.js:1153:  const cur = s.draggable.current;
out\renderer\assets\index-4641637a.js:1154:  if (!cur)
out\renderer\assets\index-4641637a.js:1155:    return;
out\renderer\assets\index-4641637a.js:1156:  if (e2.type === "touchend" && e2.cancelable !== false)
out\renderer\assets\index-4641637a.js:1157:    e2.preventDefault();
out\renderer\assets\index-4641637a.js:1158:  if (e2.type === "touchend" && cur.originTarget !== e2.target && !cur.newPiece) {
out\renderer\assets\index-4641637a.js:1159:    s.draggable.current = void 0;
out\renderer\assets\index-4641637a.js:1160:    return;
out\renderer\assets\index-4641637a.js:1161:  }
out\renderer\assets\index-4641637a.js:1162:  unsetPremove(s);
out\renderer\assets\index-4641637a.js:1163:  unsetPredrop(s);
out\renderer\assets\index-4641637a.js:1164:  const eventPos = eventPosition(e2) || cur.pos;
out\renderer\assets\index-4641637a.js:1165:  const dest = getKeyAtDomPos(eventPos, whitePov(s), s.dom.bounds());
out\renderer\assets\index-4641637a.js:1166:  if (dest && cur.started && cur.orig !== dest) {
out\renderer\assets\index-4641637a.js:1167:    if (cur.newPiece)
out\renderer\assets\index-4641637a.js:1168:      dropNewPiece(s, cur.orig, dest, cur.force);
out\renderer\assets\index-4641637a.js:1169:    else {
out\renderer\assets\index-4641637a.js:1170:      s.stats.ctrlKey = e2.ctrlKey;
out\renderer\assets\index-4641637a.js:1171:      if (userMove(s, cur.orig, dest))
out\renderer\assets\index-4641637a.js:1172:        s.stats.dragged = true;
out\renderer\assets\index-4641637a.js:1173:    }
out\renderer\assets\index-4641637a.js:1174:  } else if (cur.newPiece) {
out\renderer\assets\index-4641637a.js:1175:    s.pieces.delete(cur.orig);
out\renderer\assets\index-4641637a.js:1176:  } else if (s.draggable.deleteOnDropOff && !dest) {
out\renderer\assets\index-4641637a.js:1177:    s.pieces.delete(cur.orig);
out\renderer\assets\index-4641637a.js:1178:    callUserFunction(s.events.change);
out\renderer\assets\index-4641637a.js:1179:  }
out\renderer\assets\index-4641637a.js:1180:  if ((cur.orig === cur.previouslySelected || cur.keyHasChanged) && (cur.orig === dest || !dest))
out\renderer\assets\index-4641637a.js:1181:    unselect(s);
out\renderer\assets\index-4641637a.js:1182:  else if (!s.selectable.enabled)
out\renderer\assets\index-4641637a.js:1183:    unselect(s);
out\renderer\assets\index-4641637a.js:1184:  removeDragElements(s);
out\renderer\assets\index-4641637a.js:1185:  s.draggable.current = void 0;
out\renderer\assets\index-4641637a.js:1186:  s.dom.redraw();
out\renderer\assets\index-4641637a.js:1187:}
out\renderer\assets\index-4641637a.js:1188:function cancel(s) {
out\renderer\assets\index-4641637a.js:1189:  const cur = s.draggable.current;
out\renderer\assets\index-4641637a.js:1190:  if (cur) {
out\renderer\assets\index-4641637a.js:1191:    if (cur.newPiece)
out\renderer\assets\index-4641637a.js:1192:      s.pieces.delete(cur.orig);
out\renderer\assets\index-4641637a.js:1193:    s.draggable.current = void 0;
out\renderer\assets\index-4641637a.js:1194:    unselect(s);
out\renderer\assets\index-4641637a.js:1195:    removeDragElements(s);
out\renderer\assets\index-4641637a.js:1196:    s.dom.redraw();
out\renderer\assets\index-4641637a.js:1197:  }
out\renderer\assets\index-4641637a.js:1198:}
out\renderer\assets\index-4641637a.js:1199:function removeDragElements(s) {
out\renderer\assets\index-4641637a.js:1200:  const e2 = s.dom.elements;
out\renderer\assets\index-4641637a.js:1201:  if (e2.ghost)
out\renderer\assets\index-4641637a.js:1202:    setVisible(e2.ghost, false);
out\renderer\assets\index-4641637a.js:1203:}
out\renderer\assets\index-4641637a.js:1204:function pieceElementByKey(s, key) {
out\renderer\assets\index-4641637a.js:1205:  let el = s.dom.elements.board.firstChild;
out\renderer\assets\index-4641637a.js:1206:  while (el) {
out\renderer\assets\index-4641637a.js:1207:    if (el.cgKey === key && el.tagName === "PIECE")
out\renderer\assets\index-4641637a.js:1208:      return el;
out\renderer\assets\index-4641637a.js:1209:    el = el.nextSibling;
out\renderer\assets\index-4641637a.js:1210:  }
out\renderer\assets\index-4641637a.js:1211:  return;
out\renderer\assets\index-4641637a.js:1212:}
out\renderer\assets\index-4641637a.js:1213:function explosion(state, keys) {
out\renderer\assets\index-4641637a.js:1214:  state.exploding = { stage: 1, keys };
out\renderer\assets\index-4641637a.js:1215:  state.dom.redraw();
out\renderer\assets\index-4641637a.js:1216:  setTimeout(() => {
out\renderer\assets\index-4641637a.js:1217:    setStage(state, 2);
out\renderer\assets\index-4641637a.js:1218:    setTimeout(() => setStage(state, void 0), 120);
out\renderer\assets\index-4641637a.js:1219:  }, 120);
out\renderer\assets\index-4641637a.js:1220:}
out\renderer\assets\index-4641637a.js:1221:function setStage(state, stage) {
out\renderer\assets\index-4641637a.js:1222:  if (state.exploding) {
out\renderer\assets\index-4641637a.js:1223:    if (stage)
out\renderer\assets\index-4641637a.js:1224:      state.exploding.stage = stage;
out\renderer\assets\index-4641637a.js:1225:    else
out\renderer\assets\index-4641637a.js:1226:      state.exploding = void 0;
out\renderer\assets\index-4641637a.js:1227:    state.dom.redraw();
out\renderer\assets\index-4641637a.js:1228:  }
out\renderer\assets\index-4641637a.js:1229:}
out\renderer\assets\index-4641637a.js:1230:function start(state, redrawAll) {
out\renderer\assets\index-4641637a.js:1231:  function toggleOrientation$1() {
out\renderer\assets\index-4641637a.js:1232:    toggleOrientation(state);
out\renderer\assets\index-4641637a.js:1233:    redrawAll();
out\renderer\assets\index-4641637a.js:1234:  }
out\renderer\assets\index-4641637a.js:1235:  return {
out\renderer\assets\index-4641637a.js:1236:    set(config) {
out\renderer\assets\index-4641637a.js:1237:      if (config.orientation && config.orientation !== state.orientation)
out\renderer\assets\index-4641637a.js:1238:        toggleOrientation$1();
out\renderer\assets\index-4641637a.js:1239:      applyAnimation(state, config);
out\renderer\assets\index-4641637a.js:1240:      (config.fen ? anim : render$2)((state2) => configure(state2, config), state);
out\renderer\assets\index-4641637a.js:1241:    },
out\renderer\assets\index-4641637a.js:1242:    state,
out\renderer\assets\index-4641637a.js:1243:    getFen: () => write(state.pieces),
out\renderer\assets\index-4641637a.js:1244:    toggleOrientation: toggleOrientation$1,
out\renderer\assets\index-4641637a.js:1245:    setPieces(pieces) {
out\renderer\assets\index-4641637a.js:1246:      anim((state2) => setPieces(state2, pieces), state);
out\renderer\assets\index-4641637a.js:1247:    },
out\renderer\assets\index-4641637a.js:1248:    selectSquare(key, force) {
out\renderer\assets\index-4641637a.js:1249:      if (key)
out\renderer\assets\index-4641637a.js:1250:        anim((state2) => selectSquare(state2, key, force), state);
out\renderer\assets\index-4641637a.js:1251:      else if (state.selected) {
out\renderer\assets\index-4641637a.js:1252:        unselect(state);
out\renderer\assets\index-4641637a.js:1253:        state.dom.redraw();
out\renderer\assets\index-4641637a.js:1254:      }
out\renderer\assets\index-4641637a.js:1255:    },
out\renderer\assets\index-4641637a.js:1256:    move(orig, dest) {
out\renderer\assets\index-4641637a.js:1257:      anim((state2) => baseMove(state2, orig, dest), state);
out\renderer\assets\index-4641637a.js:1258:    },
out\renderer\assets\index-4641637a.js:1259:    newPiece(piece, key) {
out\renderer\assets\index-4641637a.js:1260:      anim((state2) => baseNewPiece(state2, piece, key), state);
out\renderer\assets\index-4641637a.js:1261:    },
out\renderer\assets\index-4641637a.js:1262:    playPremove() {
out\renderer\assets\index-4641637a.js:1263:      if (state.premovable.current) {
out\renderer\assets\index-4641637a.js:1264:        if (anim(playPremove, state))
out\renderer\assets\index-4641637a.js:1265:          return true;
out\renderer\assets\index-4641637a.js:1266:        state.dom.redraw();
out\renderer\assets\index-4641637a.js:1267:      }
out\renderer\assets\index-4641637a.js:1268:      return false;
out\renderer\assets\index-4641637a.js:1269:    },
out\renderer\assets\index-4641637a.js:1270:    playPredrop(validate) {
out\renderer\assets\index-4641637a.js:1271:      if (state.predroppable.current) {
out\renderer\assets\index-4641637a.js:1272:        const result = playPredrop(state, validate);
out\renderer\assets\index-4641637a.js:1273:        state.dom.redraw();
out\renderer\assets\index-4641637a.js:1274:        return result;
out\renderer\assets\index-4641637a.js:1275:      }
out\renderer\assets\index-4641637a.js:1276:      return false;
out\renderer\assets\index-4641637a.js:1277:    },
out\renderer\assets\index-4641637a.js:1278:    cancelPremove() {
out\renderer\assets\index-4641637a.js:1279:      render$2(unsetPremove, state);
out\renderer\assets\index-4641637a.js:1280:    },
out\renderer\assets\index-4641637a.js:1281:    cancelPredrop() {
out\renderer\assets\index-4641637a.js:1282:      render$2(unsetPredrop, state);
out\renderer\assets\index-4641637a.js:1283:    },
out\renderer\assets\index-4641637a.js:1284:    cancelMove() {
out\renderer\assets\index-4641637a.js:1285:      render$2((state2) => {
out\renderer\assets\index-4641637a.js:1286:        cancelMove(state2);
out\renderer\assets\index-4641637a.js:1287:        cancel(state2);
out\renderer\assets\index-4641637a.js:1288:      }, state);
out\renderer\assets\index-4641637a.js:1289:    },
out\renderer\assets\index-4641637a.js:1290:    stop() {
out\renderer\assets\index-4641637a.js:1291:      render$2((state2) => {
out\renderer\assets\index-4641637a.js:1292:        stop(state2);
out\renderer\assets\index-4641637a.js:1293:        cancel(state2);
out\renderer\assets\index-4641637a.js:1294:      }, state);
out\renderer\assets\index-4641637a.js:1295:    },
out\renderer\assets\index-4641637a.js:1296:    explode(keys) {
out\renderer\assets\index-4641637a.js:1297:      explosion(state, keys);
out\renderer\assets\index-4641637a.js:1298:    },
out\renderer\assets\index-4641637a.js:1299:    setAutoShapes(shapes) {
out\renderer\assets\index-4641637a.js:1300:      render$2((state2) => state2.drawable.autoShapes = shapes, state);
out\renderer\assets\index-4641637a.js:1301:    },
out\renderer\assets\index-4641637a.js:1302:    setShapes(shapes) {
out\renderer\assets\index-4641637a.js:1303:      render$2((state2) => state2.drawable.shapes = shapes, state);
out\renderer\assets\index-4641637a.js:1304:    },
out\renderer\assets\index-4641637a.js:1305:    getKeyAtDomPos(pos) {
out\renderer\assets\index-4641637a.js:1306:      return getKeyAtDomPos(pos, whitePov(state), state.dom.bounds());
out\renderer\assets\index-4641637a.js:1307:    },
out\renderer\assets\index-4641637a.js:1308:    redrawAll,
out\renderer\assets\index-4641637a.js:1309:    dragNewPiece(piece, event, force) {
out\renderer\assets\index-4641637a.js:1310:      dragNewPiece(state, piece, event, force);
out\renderer\assets\index-4641637a.js:1311:    },
out\renderer\assets\index-4641637a.js:1312:    destroy() {
out\renderer\assets\index-4641637a.js:1313:      stop(state);
out\renderer\assets\index-4641637a.js:1314:      state.dom.unbind && state.dom.unbind();
out\renderer\assets\index-4641637a.js:1315:      state.dom.destroyed = true;
out\renderer\assets\index-4641637a.js:1316:    }
out\renderer\assets\index-4641637a.js:1317:  };
out\renderer\assets\index-4641637a.js:1318:}
out\renderer\assets\index-4641637a.js:1319:function defaults() {
out\renderer\assets\index-4641637a.js:1320:  return {
out\renderer\assets\index-4641637a.js:1321:    pieces: read(initial),
out\renderer\assets\index-4641637a.js:1322:    orientation: "white",
out\renderer\assets\index-4641637a.js:1323:    turnColor: "white",
out\renderer\assets\index-4641637a.js:1324:    coordinates: true,
out\renderer\assets\index-4641637a.js:1325:    ranksPosition: "right",
out\renderer\assets\index-4641637a.js:1326:    autoCastle: true,
out\renderer\assets\index-4641637a.js:1327:    viewOnly: false,
out\renderer\assets\index-4641637a.js:1328:    disableContextMenu: false,
out\renderer\assets\index-4641637a.js:1329:    addPieceZIndex: false,
out\renderer\assets\index-4641637a.js:1330:    blockTouchScroll: false,
out\renderer\assets\index-4641637a.js:1331:    pieceKey: false,
out\renderer\assets\index-4641637a.js:1332:    highlight: {
out\renderer\assets\index-4641637a.js:1333:      lastMove: true,
out\renderer\assets\index-4641637a.js:1334:      check: true
out\renderer\assets\index-4641637a.js:1335:    },
out\renderer\assets\index-4641637a.js:1336:    animation: {
out\renderer\assets\index-4641637a.js:1337:      enabled: true,
out\renderer\assets\index-4641637a.js:1338:      duration: 200
out\renderer\assets\index-4641637a.js:1339:    },
out\renderer\assets\index-4641637a.js:1340:    movable: {
out\renderer\assets\index-4641637a.js:1341:      free: true,
out\renderer\assets\index-4641637a.js:1342:      color: "both",
out\renderer\assets\index-4641637a.js:1343:      showDests: true,
out\renderer\assets\index-4641637a.js:1344:      events: {},
out\renderer\assets\index-4641637a.js:1345:      rookCastle: true
out\renderer\assets\index-4641637a.js:1346:    },
out\renderer\assets\index-4641637a.js:1347:    premovable: {
out\renderer\assets\index-4641637a.js:1348:      enabled: true,
out\renderer\assets\index-4641637a.js:1349:      showDests: true,
out\renderer\assets\index-4641637a.js:1350:      castle: true,
out\renderer\assets\index-4641637a.js:1351:      events: {}
out\renderer\assets\index-4641637a.js:1352:    },
out\renderer\assets\index-4641637a.js:1353:    predroppable: {
out\renderer\assets\index-4641637a.js:1354:      enabled: false,
out\renderer\assets\index-4641637a.js:1355:      events: {}
out\renderer\assets\index-4641637a.js:1356:    },
out\renderer\assets\index-4641637a.js:1357:    draggable: {
out\renderer\assets\index-4641637a.js:1358:      enabled: true,
out\renderer\assets\index-4641637a.js:1359:      distance: 3,
out\renderer\assets\index-4641637a.js:1360:      autoDistance: true,
out\renderer\assets\index-4641637a.js:1361:      showGhost: true,
out\renderer\assets\index-4641637a.js:1362:      deleteOnDropOff: false
out\renderer\assets\index-4641637a.js:1363:    },
out\renderer\assets\index-4641637a.js:1364:    dropmode: {
out\renderer\assets\index-4641637a.js:1365:      active: false
out\renderer\assets\index-4641637a.js:1366:    },
out\renderer\assets\index-4641637a.js:1367:    selectable: {
out\renderer\assets\index-4641637a.js:1368:      enabled: true
out\renderer\assets\index-4641637a.js:1369:    },
out\renderer\assets\index-4641637a.js:1370:    stats: {
out\renderer\assets\index-4641637a.js:1373:      dragged: !("ontouchstart" in window)
out\renderer\assets\index-4641637a.js:1374:    },
out\renderer\assets\index-4641637a.js:1375:    events: {},
out\renderer\assets\index-4641637a.js:1376:    drawable: {
out\renderer\assets\index-4641637a.js:1377:      enabled: true,
out\renderer\assets\index-4641637a.js:1378:      visible: true,
out\renderer\assets\index-4641637a.js:1379:      defaultSnapToValidMove: true,
out\renderer\assets\index-4641637a.js:1380:      eraseOnClick: true,
out\renderer\assets\index-4641637a.js:1381:      shapes: [],
out\renderer\assets\index-4641637a.js:1382:      autoShapes: [],
out\renderer\assets\index-4641637a.js:1383:      brushes: {
out\renderer\assets\index-4641637a.js:1384:        green: { key: "g", color: "#15781B", opacity: 1, lineWidth: 10 },
out\renderer\assets\index-4641637a.js:1385:        red: { key: "r", color: "#882020", opacity: 1, lineWidth: 10 },
out\renderer\assets\index-4641637a.js:1386:        blue: { key: "b", color: "#003088", opacity: 1, lineWidth: 10 },
out\renderer\assets\index-4641637a.js:1387:        yellow: { key: "y", color: "#e68f00", opacity: 1, lineWidth: 10 },
out\renderer\assets\index-4641637a.js:1388:        paleBlue: { key: "pb", color: "#003088", opacity: 0.4, lineWidth: 15 },
out\renderer\assets\index-4641637a.js:1389:        paleGreen: { key: "pg", color: "#15781B", opacity: 0.4, lineWidth: 15 },
out\renderer\assets\index-4641637a.js:1390:        paleRed: { key: "pr", color: "#882020", opacity: 0.4, lineWidth: 15 },
out\renderer\assets\index-4641637a.js:1391:        paleGrey: {
out\renderer\assets\index-4641637a.js:1392:          key: "pgr",
out\renderer\assets\index-4641637a.js:1393:          color: "#4a4a4a",
out\renderer\assets\index-4641637a.js:1394:          opacity: 0.35,
out\renderer\assets\index-4641637a.js:1395:          lineWidth: 15
out\renderer\assets\index-4641637a.js:1396:        }
out\renderer\assets\index-4641637a.js:1397:      },
out\renderer\assets\index-4641637a.js:1398:      prevSvgHash: ""
out\renderer\assets\index-4641637a.js:1399:    },
out\renderer\assets\index-4641637a.js:1400:    hold: timer()
out\renderer\assets\index-4641637a.js:1401:  };
out\renderer\assets\index-4641637a.js:1402:}
out\renderer\assets\index-4641637a.js:1403:function syncShapes(shapes, root, renderShape2) {
out\renderer\assets\index-4641637a.js:1404:  const hashesInDom = /* @__PURE__ */ new Map(), toRemove = [];
out\renderer\assets\index-4641637a.js:1405:  for (const sc of shapes)
out\renderer\assets\index-4641637a.js:1406:    hashesInDom.set(sc.hash, false);
out\renderer\assets\index-4641637a.js:1407:  let el = root.firstChild, elHash;
out\renderer\assets\index-4641637a.js:1408:  while (el) {
out\renderer\assets\index-4641637a.js:1409:    elHash = el.getAttribute("cgHash");
out\renderer\assets\index-4641637a.js:1410:    if (hashesInDom.has(elHash))
out\renderer\assets\index-4641637a.js:1411:      hashesInDom.set(elHash, true);
out\renderer\assets\index-4641637a.js:1412:    else
out\renderer\assets\index-4641637a.js:1413:      toRemove.push(el);
out\renderer\assets\index-4641637a.js:1414:    el = el.nextSibling;
out\renderer\assets\index-4641637a.js:1415:  }
out\renderer\assets\index-4641637a.js:1416:  for (const el2 of toRemove)
out\renderer\assets\index-4641637a.js:1417:    root.removeChild(el2);
out\renderer\assets\index-4641637a.js:1418:  for (const sc of shapes) {
out\renderer\assets\index-4641637a.js:1419:    if (!hashesInDom.get(sc.hash))
out\renderer\assets\index-4641637a.js:1420:      root.appendChild(renderShape2(sc));
out\renderer\assets\index-4641637a.js:1421:  }
out\renderer\assets\index-4641637a.js:1422:}
out\renderer\assets\index-4641637a.js:1423:function createElement(tagName) {
out\renderer\assets\index-4641637a.js:1424:  return document.createElementNS("http://www.w3.org/2000/svg", tagName);
out\renderer\assets\index-4641637a.js:1425:}
out\renderer\assets\index-4641637a.js:1426:function renderSvg(state, svg, customSvg) {
out\renderer\assets\index-4641637a.js:1427:  const d = state.drawable, curD = d.current, cur = curD && curD.mouseSq ? curD : void 0, arrowDests = /* @__PURE__ */ new Map(), bounds = state.dom.bounds(), nonPieceAutoShapes = d.autoShapes.filter((autoShape) => !autoShape.piece);
out\renderer\assets\index-4641637a.js:1428:  for (const s of d.shapes.concat(nonPieceAutoShapes).concat(cur ? [cur] : [])) {
out\renderer\assets\index-4641637a.js:1429:    if (s.dest)
out\renderer\assets\index-4641637a.js:1430:      arrowDests.set(s.dest, (arrowDests.get(s.dest) || 0) + 1);
out\renderer\assets\index-4641637a.js:1431:  }
out\renderer\assets\index-4641637a.js:1432:  const shapes = d.shapes.concat(nonPieceAutoShapes).map((s) => {
out\renderer\assets\index-4641637a.js:1433:    return {
out\renderer\assets\index-4641637a.js:1434:      shape: s,
out\renderer\assets\index-4641637a.js:1435:      current: false,
out\renderer\assets\index-4641637a.js:1436:      hash: shapeHash(s, arrowDests, false, bounds)
out\renderer\assets\index-4641637a.js:1437:    };
out\renderer\assets\index-4641637a.js:1438:  });
out\renderer\assets\index-4641637a.js:1439:  if (cur)
out\renderer\assets\index-4641637a.js:1440:    shapes.push({
out\renderer\assets\index-4641637a.js:1441:      shape: cur,
out\renderer\assets\index-4641637a.js:1442:      current: true,
out\renderer\assets\index-4641637a.js:1443:      hash: shapeHash(cur, arrowDests, true, bounds)
out\renderer\assets\index-4641637a.js:1444:    });
out\renderer\assets\index-4641637a.js:1445:  const fullHash = shapes.map((sc) => sc.hash).join(";");
out\renderer\assets\index-4641637a.js:1446:  if (fullHash === state.drawable.prevSvgHash)
out\renderer\assets\index-4641637a.js:1447:    return;
out\renderer\assets\index-4641637a.js:1448:  state.drawable.prevSvgHash = fullHash;
out\renderer\assets\index-4641637a.js:1449:  const defsEl = svg.querySelector("defs");
out\renderer\assets\index-4641637a.js:1450:  const shapesEl = svg.querySelector("g");
out\renderer\assets\index-4641637a.js:1451:  const customSvgsEl = customSvg.querySelector("g");
out\renderer\assets\index-4641637a.js:1452:  syncDefs(d, shapes, defsEl);
out\renderer\assets\index-4641637a.js:1453:  syncShapes(shapes.filter((s) => !s.shape.customSvg), shapesEl, (shape) => renderShape$1(state, shape, d.brushes, arrowDests, bounds));
out\renderer\assets\index-4641637a.js:1454:  syncShapes(shapes.filter((s) => s.shape.customSvg), customSvgsEl, (shape) => renderShape$1(state, shape, d.brushes, arrowDests, bounds));
out\renderer\assets\index-4641637a.js:1455:}
out\renderer\assets\index-4641637a.js:1456:function syncDefs(d, shapes, defsEl) {
out\renderer\assets\index-4641637a.js:1457:  const brushes2 = /* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:1458:  let brush;
out\renderer\assets\index-4641637a.js:1459:  for (const s of shapes) {
out\renderer\assets\index-4641637a.js:1460:    if (s.shape.dest) {
out\renderer\assets\index-4641637a.js:1461:      brush = d.brushes[s.shape.brush];
out\renderer\assets\index-4641637a.js:1462:      if (s.shape.modifiers)
out\renderer\assets\index-4641637a.js:1463:        brush = makeCustomBrush(brush, s.shape.modifiers);
out\renderer\assets\index-4641637a.js:1464:      brushes2.set(brush.key, brush);
out\renderer\assets\index-4641637a.js:1465:    }
out\renderer\assets\index-4641637a.js:1466:  }
out\renderer\assets\index-4641637a.js:1467:  const keysInDom = /* @__PURE__ */ new Set();
out\renderer\assets\index-4641637a.js:1468:  let el = defsEl.firstChild;
out\renderer\assets\index-4641637a.js:1469:  while (el) {
out\renderer\assets\index-4641637a.js:1470:    keysInDom.add(el.getAttribute("cgKey"));
out\renderer\assets\index-4641637a.js:1471:    el = el.nextSibling;
out\renderer\assets\index-4641637a.js:1472:  }
out\renderer\assets\index-4641637a.js:1473:  for (const [key, brush2] of brushes2.entries()) {
out\renderer\assets\index-4641637a.js:1474:    if (!keysInDom.has(key))
out\renderer\assets\index-4641637a.js:1475:      defsEl.appendChild(renderMarker(brush2));
out\renderer\assets\index-4641637a.js:1476:  }
out\renderer\assets\index-4641637a.js:1477:}
out\renderer\assets\index-4641637a.js:1478:function shapeHash({ orig, dest, brush, piece, modifiers, customSvg }, arrowDests, current, bounds) {
out\renderer\assets\index-4641637a.js:1479:  return [
out\renderer\assets\index-4641637a.js:1480:    bounds.width,
out\renderer\assets\index-4641637a.js:1481:    bounds.height,
out\renderer\assets\index-4641637a.js:1482:    current,
out\renderer\assets\index-4641637a.js:1483:    orig,
out\renderer\assets\index-4641637a.js:1484:    dest,
out\renderer\assets\index-4641637a.js:1485:    brush,
out\renderer\assets\index-4641637a.js:1486:    dest && (arrowDests.get(dest) || 0) > 1,
out\renderer\assets\index-4641637a.js:1487:    piece && pieceHash(piece),
out\renderer\assets\index-4641637a.js:1488:    modifiers && modifiersHash(modifiers),
out\renderer\assets\index-4641637a.js:1489:    customSvg && customSvgHash(customSvg)
out\renderer\assets\index-4641637a.js:1490:  ].filter((x) => x).join(",");
out\renderer\assets\index-4641637a.js:1491:}
out\renderer\assets\index-4641637a.js:1492:function pieceHash(piece) {
out\renderer\assets\index-4641637a.js:1493:  return [piece.color, piece.role, piece.scale].filter((x) => x).join(",");
out\renderer\assets\index-4641637a.js:1494:}
out\renderer\assets\index-4641637a.js:1495:function modifiersHash(m) {
out\renderer\assets\index-4641637a.js:1496:  return "" + (m.lineWidth || "");
out\renderer\assets\index-4641637a.js:1497:}
out\renderer\assets\index-4641637a.js:1498:function customSvgHash(s) {
out\renderer\assets\index-4641637a.js:1499:  let h = 0;
out\renderer\assets\index-4641637a.js:1500:  for (let i = 0; i < s.length; i++) {
out\renderer\assets\index-4641637a.js:1501:    h = (h << 5) - h + s.charCodeAt(i) >>> 0;
out\renderer\assets\index-4641637a.js:1502:  }
out\renderer\assets\index-4641637a.js:1503:  return "custom-" + h.toString();
out\renderer\assets\index-4641637a.js:1504:}
out\renderer\assets\index-4641637a.js:1505:function renderShape$1(state, { shape, current, hash: hash2 }, brushes2, arrowDests, bounds) {
out\renderer\assets\index-4641637a.js:1506:  let el;
out\renderer\assets\index-4641637a.js:1507:  const orig = orient(key2pos(shape.orig), state.orientation);
out\renderer\assets\index-4641637a.js:1508:  if (shape.customSvg) {
out\renderer\assets\index-4641637a.js:1509:    el = renderCustomSvg(shape.customSvg, orig, bounds);
out\renderer\assets\index-4641637a.js:1510:  } else {
out\renderer\assets\index-4641637a.js:1511:    if (shape.dest) {
out\renderer\assets\index-4641637a.js:1512:      let brush = brushes2[shape.brush];
out\renderer\assets\index-4641637a.js:1513:      if (shape.modifiers)
out\renderer\assets\index-4641637a.js:1514:        brush = makeCustomBrush(brush, shape.modifiers);
out\renderer\assets\index-4641637a.js:1515:      el = renderArrow(brush, orig, orient(key2pos(shape.dest), state.orientation), current, (arrowDests.get(shape.dest) || 0) > 1, bounds);
out\renderer\assets\index-4641637a.js:1516:    } else
out\renderer\assets\index-4641637a.js:1517:      el = renderCircle(brushes2[shape.brush], orig, current, bounds);
out\renderer\assets\index-4641637a.js:1518:  }
out\renderer\assets\index-4641637a.js:1519:  el.setAttribute("cgHash", hash2);
out\renderer\assets\index-4641637a.js:1520:  return el;
out\renderer\assets\index-4641637a.js:1521:}
out\renderer\assets\index-4641637a.js:1522:function renderCustomSvg(customSvg, pos, bounds) {
out\renderer\assets\index-4641637a.js:1523:  const [x, y] = pos2user(pos, bounds);
out\renderer\assets\index-4641637a.js:1524:  const g = setAttributes(createElement("g"), { transform: `translate(${x},${y})` });
out\renderer\assets\index-4641637a.js:1525:  const svg = setAttributes(createElement("svg"), { width: 1, height: 1, viewBox: "0 0 100 100" });
out\renderer\assets\index-4641637a.js:1526:  g.appendChild(svg);
out\renderer\assets\index-4641637a.js:1527:  svg.innerHTML = customSvg;
out\renderer\assets\index-4641637a.js:1528:  return g;
out\renderer\assets\index-4641637a.js:1529:}
out\renderer\assets\index-4641637a.js:1530:function renderCircle(brush, pos, current, bounds) {
out\renderer\assets\index-4641637a.js:1531:  const o = pos2user(pos, bounds), widths = circleWidth(), radius = (bounds.width + bounds.height) / (4 * Math.max(bounds.width, bounds.height));
out\renderer\assets\index-4641637a.js:1532:  return setAttributes(createElement("circle"), {
out\renderer\assets\index-4641637a.js:1533:    stroke: brush.color,
out\renderer\assets\index-4641637a.js:1534:    "stroke-width": widths[current ? 0 : 1],
out\renderer\assets\index-4641637a.js:1535:    fill: "none",
out\renderer\assets\index-4641637a.js:1536:    opacity: opacity(brush, current),
out\renderer\assets\index-4641637a.js:1537:    cx: o[0],
out\renderer\assets\index-4641637a.js:1538:    cy: o[1],
out\renderer\assets\index-4641637a.js:1539:    r: radius - widths[1] / 2
out\renderer\assets\index-4641637a.js:1540:  });
out\renderer\assets\index-4641637a.js:1541:}
out\renderer\assets\index-4641637a.js:1542:function renderArrow(brush, orig, dest, current, shorten, bounds) {
out\renderer\assets\index-4641637a.js:1543:  const m = arrowMargin(shorten && !current), a = pos2user(orig, bounds), b = pos2user(dest, bounds), dx = b[0] - a[0], dy = b[1] - a[1], angle = Math.atan2(dy, dx), xo = Math.cos(angle) * m, yo = Math.sin(angle) * m;
out\renderer\assets\index-4641637a.js:1544:  return setAttributes(createElement("line"), {
out\renderer\assets\index-4641637a.js:1545:    stroke: brush.color,
out\renderer\assets\index-4641637a.js:1546:    "stroke-width": lineWidth(brush, current),
out\renderer\assets\index-4641637a.js:1547:    "stroke-linecap": "round",
out\renderer\assets\index-4641637a.js:1548:    "marker-end": "url(#arrowhead-" + brush.key + ")",
out\renderer\assets\index-4641637a.js:1549:    opacity: opacity(brush, current),
out\renderer\assets\index-4641637a.js:1550:    x1: a[0],
out\renderer\assets\index-4641637a.js:1551:    y1: a[1],
out\renderer\assets\index-4641637a.js:1552:    x2: b[0] - xo,
out\renderer\assets\index-4641637a.js:1553:    y2: b[1] - yo
out\renderer\assets\index-4641637a.js:1554:  });
out\renderer\assets\index-4641637a.js:1555:}
out\renderer\assets\index-4641637a.js:1556:function renderMarker(brush) {
out\renderer\assets\index-4641637a.js:1557:  const marker = setAttributes(createElement("marker"), {
out\renderer\assets\index-4641637a.js:1558:    id: "arrowhead-" + brush.key,
out\renderer\assets\index-4641637a.js:1559:    orient: "auto",
out\renderer\assets\index-4641637a.js:1560:    markerWidth: 4,
out\renderer\assets\index-4641637a.js:1561:    markerHeight: 8,
out\renderer\assets\index-4641637a.js:1562:    refX: 2.05,
out\renderer\assets\index-4641637a.js:1563:    refY: 2.01
out\renderer\assets\index-4641637a.js:1564:  });
out\renderer\assets\index-4641637a.js:1565:  marker.appendChild(setAttributes(createElement("path"), {
out\renderer\assets\index-4641637a.js:1566:    d: "M0,0 V4 L3,2 Z",
out\renderer\assets\index-4641637a.js:1567:    fill: brush.color
out\renderer\assets\index-4641637a.js:1568:  }));
out\renderer\assets\index-4641637a.js:1569:  marker.setAttribute("cgKey", brush.key);
out\renderer\assets\index-4641637a.js:1570:  return marker;
out\renderer\assets\index-4641637a.js:1571:}
out\renderer\assets\index-4641637a.js:1572:function setAttributes(el, attrs) {
out\renderer\assets\index-4641637a.js:1573:  for (const key in attrs) {
out\renderer\assets\index-4641637a.js:1574:    if (Object.prototype.hasOwnProperty.call(attrs, key))
out\renderer\assets\index-4641637a.js:1575:      el.setAttribute(key, attrs[key]);
out\renderer\assets\index-4641637a.js:1576:  }
out\renderer\assets\index-4641637a.js:1577:  return el;
out\renderer\assets\index-4641637a.js:1578:}
out\renderer\assets\index-4641637a.js:1579:function orient(pos, color) {
out\renderer\assets\index-4641637a.js:1580:  return color === "white" ? pos : [7 - pos[0], 7 - pos[1]];
out\renderer\assets\index-4641637a.js:1581:}
out\renderer\assets\index-4641637a.js:1582:function makeCustomBrush(base, modifiers) {
out\renderer\assets\index-4641637a.js:1583:  return {
out\renderer\assets\index-4641637a.js:1584:    color: base.color,
out\renderer\assets\index-4641637a.js:1585:    opacity: Math.round(base.opacity * 10) / 10,
out\renderer\assets\index-4641637a.js:1586:    lineWidth: Math.round(modifiers.lineWidth || base.lineWidth),
out\renderer\assets\index-4641637a.js:1587:    key: [base.key, modifiers.lineWidth].filter((x) => x).join("")
out\renderer\assets\index-4641637a.js:1588:  };
out\renderer\assets\index-4641637a.js:1589:}
out\renderer\assets\index-4641637a.js:1590:function circleWidth() {
out\renderer\assets\index-4641637a.js:1591:  return [3 / 64, 4 / 64];
out\renderer\assets\index-4641637a.js:1592:}
out\renderer\assets\index-4641637a.js:1593:function lineWidth(brush, current) {
out\renderer\assets\index-4641637a.js:1594:  return (brush.lineWidth || 10) * (current ? 0.85 : 1) / 64;
out\renderer\assets\index-4641637a.js:1595:}
out\renderer\assets\index-4641637a.js:1596:function opacity(brush, current) {
out\renderer\assets\index-4641637a.js:1597:  return (brush.opacity || 1) * (current ? 0.9 : 1);
out\renderer\assets\index-4641637a.js:1598:}
out\renderer\assets\index-4641637a.js:1599:function arrowMargin(shorten) {
out\renderer\assets\index-4641637a.js:1600:  return (shorten ? 20 : 10) / 64;
out\renderer\assets\index-4641637a.js:1601:}
out\renderer\assets\index-4641637a.js:1602:function pos2user(pos, bounds) {
out\renderer\assets\index-4641637a.js:1603:  const xScale = Math.min(1, bounds.width / bounds.height);
out\renderer\assets\index-4641637a.js:1604:  const yScale = Math.min(1, bounds.height / bounds.width);
out\renderer\assets\index-4641637a.js:1605:  return [(pos[0] - 3.5) * xScale, (3.5 - pos[1]) * yScale];
out\renderer\assets\index-4641637a.js:1606:}
out\renderer\assets\index-4641637a.js:1607:function renderWrap(element2, s) {
out\renderer\assets\index-4641637a.js:1608:  element2.innerHTML = "";
out\renderer\assets\index-4641637a.js:1609:  element2.classList.add("cg-wrap");
out\renderer\assets\index-4641637a.js:1610:  for (const c of colors)
out\renderer\assets\index-4641637a.js:1611:    element2.classList.toggle("orientation-" + c, s.orientation === c);
out\renderer\assets\index-4641637a.js:1612:  element2.classList.toggle("manipulable", !s.viewOnly);
out\renderer\assets\index-4641637a.js:1613:  const container = createEl("cg-container");
out\renderer\assets\index-4641637a.js:1614:  element2.appendChild(container);
out\renderer\assets\index-4641637a.js:1615:  const board = createEl("cg-board");
out\renderer\assets\index-4641637a.js:1616:  container.appendChild(board);
out\renderer\assets\index-4641637a.js:1617:  let svg;
out\renderer\assets\index-4641637a.js:1618:  let customSvg;
out\renderer\assets\index-4641637a.js:1619:  let autoPieces;
out\renderer\assets\index-4641637a.js:1620:  if (s.drawable.visible) {
out\renderer\assets\index-4641637a.js:1621:    svg = setAttributes(createElement("svg"), {
out\renderer\assets\index-4641637a.js:1622:      class: "cg-shapes",
out\renderer\assets\index-4641637a.js:1623:      viewBox: "-4 -4 8 8",
out\renderer\assets\index-4641637a.js:1624:      preserveAspectRatio: "xMidYMid slice"
out\renderer\assets\index-4641637a.js:1625:    });
out\renderer\assets\index-4641637a.js:1626:    svg.appendChild(createElement("defs"));
out\renderer\assets\index-4641637a.js:1627:    svg.appendChild(createElement("g"));
out\renderer\assets\index-4641637a.js:1628:    customSvg = setAttributes(createElement("svg"), {
out\renderer\assets\index-4641637a.js:1629:      class: "cg-custom-svgs",
out\renderer\assets\index-4641637a.js:1630:      viewBox: "-3.5 -3.5 8 8",
out\renderer\assets\index-4641637a.js:1631:      preserveAspectRatio: "xMidYMid slice"
out\renderer\assets\index-4641637a.js:1632:    });
out\renderer\assets\index-4641637a.js:1633:    customSvg.appendChild(createElement("g"));
out\renderer\assets\index-4641637a.js:1634:    autoPieces = createEl("cg-auto-pieces");
out\renderer\assets\index-4641637a.js:1635:    container.appendChild(svg);
out\renderer\assets\index-4641637a.js:1636:    container.appendChild(customSvg);
out\renderer\assets\index-4641637a.js:1637:    container.appendChild(autoPieces);
out\renderer\assets\index-4641637a.js:1638:  }
out\renderer\assets\index-4641637a.js:1639:  if (s.coordinates) {
out\renderer\assets\index-4641637a.js:1640:    const orientClass = s.orientation === "black" ? " black" : "";
out\renderer\assets\index-4641637a.js:1641:    const ranksPositionClass = s.ranksPosition === "left" ? " left" : "";
out\renderer\assets\index-4641637a.js:1642:    container.appendChild(renderCoords(ranks, "ranks" + orientClass + ranksPositionClass));
out\renderer\assets\index-4641637a.js:1643:    container.appendChild(renderCoords(files, "files" + orientClass));
out\renderer\assets\index-4641637a.js:1644:  }
out\renderer\assets\index-4641637a.js:1645:  let ghost;
out\renderer\assets\index-4641637a.js:1646:  if (s.draggable.enabled && s.draggable.showGhost) {
out\renderer\assets\index-4641637a.js:1647:    ghost = createEl("piece", "ghost");
out\renderer\assets\index-4641637a.js:1648:    setVisible(ghost, false);
out\renderer\assets\index-4641637a.js:1649:    container.appendChild(ghost);
out\renderer\assets\index-4641637a.js:1650:  }
out\renderer\assets\index-4641637a.js:1651:  return {
out\renderer\assets\index-4641637a.js:1652:    board,
out\renderer\assets\index-4641637a.js:1653:    container,
out\renderer\assets\index-4641637a.js:1654:    wrap: element2,
out\renderer\assets\index-4641637a.js:1655:    ghost,
out\renderer\assets\index-4641637a.js:1656:    svg,
out\renderer\assets\index-4641637a.js:1657:    customSvg,
out\renderer\assets\index-4641637a.js:1658:    autoPieces
out\renderer\assets\index-4641637a.js:1659:  };
out\renderer\assets\index-4641637a.js:1660:}
out\renderer\assets\index-4641637a.js:1661:function renderCoords(elems, className) {
out\renderer\assets\index-4641637a.js:1662:  const el = createEl("coords", className);
out\renderer\assets\index-4641637a.js:1663:  let f;
out\renderer\assets\index-4641637a.js:1664:  for (const elem of elems) {
out\renderer\assets\index-4641637a.js:1665:    f = createEl("coord");
out\renderer\assets\index-4641637a.js:1666:    f.textContent = elem;
out\renderer\assets\index-4641637a.js:1667:    el.appendChild(f);
out\renderer\assets\index-4641637a.js:1668:  }
out\renderer\assets\index-4641637a.js:1669:  return el;
out\renderer\assets\index-4641637a.js:1670:}
out\renderer\assets\index-4641637a.js:1671:function drop(s, e2) {
out\renderer\assets\index-4641637a.js:1672:  if (!s.dropmode.active)
out\renderer\assets\index-4641637a.js:1673:    return;
out\renderer\assets\index-4641637a.js:1674:  unsetPremove(s);
out\renderer\assets\index-4641637a.js:1675:  unsetPredrop(s);
out\renderer\assets\index-4641637a.js:1676:  const piece = s.dropmode.piece;
out\renderer\assets\index-4641637a.js:1677:  if (piece) {
out\renderer\assets\index-4641637a.js:1678:    s.pieces.set("a0", piece);
out\renderer\assets\index-4641637a.js:1679:    const position = eventPosition(e2);
out\renderer\assets\index-4641637a.js:1680:    const dest = position && getKeyAtDomPos(position, whitePov(s), s.dom.bounds());
out\renderer\assets\index-4641637a.js:1681:    if (dest)
out\renderer\assets\index-4641637a.js:1682:      dropNewPiece(s, "a0", dest);
out\renderer\assets\index-4641637a.js:1683:  }
out\renderer\assets\index-4641637a.js:1684:  s.dom.redraw();
out\renderer\assets\index-4641637a.js:1685:}
out\renderer\assets\index-4641637a.js:1686:function bindBoard(s, onResize) {
out\renderer\assets\index-4641637a.js:1687:  const boardEl = s.dom.elements.board;
out\renderer\assets\index-4641637a.js:1688:  if ("ResizeObserver" in window)
out\renderer\assets\index-4641637a.js:1689:    new ResizeObserver(onResize).observe(s.dom.elements.wrap);
out\renderer\assets\index-4641637a.js:1690:  if (s.disableContextMenu || s.drawable.enabled) {
out\renderer\assets\index-4641637a.js:1691:    boardEl.addEventListener("contextmenu", (e2) => e2.preventDefault());
out\renderer\assets\index-4641637a.js:1692:  }
out\renderer\assets\index-4641637a.js:1693:  if (s.viewOnly)
out\renderer\assets\index-4641637a.js:1694:    return;
out\renderer\assets\index-4641637a.js:1695:  const onStart = startDragOrDraw(s);
out\renderer\assets\index-4641637a.js:1696:  boardEl.addEventListener("touchstart", onStart, {
out\renderer\assets\index-4641637a.js:1697:    passive: false
out\renderer\assets\index-4641637a.js:1698:  });
out\renderer\assets\index-4641637a.js:1699:  boardEl.addEventListener("mousedown", onStart, {
out\renderer\assets\index-4641637a.js:1700:    passive: false
out\renderer\assets\index-4641637a.js:1701:  });
out\renderer\assets\index-4641637a.js:1702:}
out\renderer\assets\index-4641637a.js:1703:function bindDocument(s, onResize) {
out\renderer\assets\index-4641637a.js:1704:  const unbinds = [];
out\renderer\assets\index-4641637a.js:1705:  if (!("ResizeObserver" in window))
out\renderer\assets\index-4641637a.js:1706:    unbinds.push(unbindable(document.body, "chessground.resize", onResize));
out\renderer\assets\index-4641637a.js:1707:  if (!s.viewOnly) {
out\renderer\assets\index-4641637a.js:1708:    const onmove = dragOrDraw(s, move, move$1);
out\renderer\assets\index-4641637a.js:1709:    const onend = dragOrDraw(s, end, end$1);
out\renderer\assets\index-4641637a.js:1710:    for (const ev of ["touchmove", "mousemove"])
out\renderer\assets\index-4641637a.js:1711:      unbinds.push(unbindable(document, ev, onmove));
out\renderer\assets\index-4641637a.js:1712:    for (const ev of ["touchend", "mouseup"])
out\renderer\assets\index-4641637a.js:1713:      unbinds.push(unbindable(document, ev, onend));
out\renderer\assets\index-4641637a.js:1714:    const onScroll = () => s.dom.bounds.clear();
out\renderer\assets\index-4641637a.js:1715:    unbinds.push(unbindable(document, "scroll", onScroll, { capture: true, passive: true }));
out\renderer\assets\index-4641637a.js:1716:    unbinds.push(unbindable(window, "resize", onScroll, { passive: true }));
out\renderer\assets\index-4641637a.js:1717:  }
out\renderer\assets\index-4641637a.js:1718:  return () => unbinds.forEach((f) => f());
out\renderer\assets\index-4641637a.js:1719:}
out\renderer\assets\index-4641637a.js:1720:function unbindable(el, eventName, callback, options) {
out\renderer\assets\index-4641637a.js:1721:  el.addEventListener(eventName, callback, options);
out\renderer\assets\index-4641637a.js:1722:  return () => el.removeEventListener(eventName, callback, options);
out\renderer\assets\index-4641637a.js:1723:}
out\renderer\assets\index-4641637a.js:1724:const startDragOrDraw = (s) => (e2) => {
out\renderer\assets\index-4641637a.js:1725:  if (s.draggable.current)
out\renderer\assets\index-4641637a.js:1726:    cancel(s);
out\renderer\assets\index-4641637a.js:1727:  else if (s.drawable.current)
out\renderer\assets\index-4641637a.js:1728:    cancel$1(s);
out\renderer\assets\index-4641637a.js:1729:  else if (e2.shiftKey || isRightButton(e2)) {
out\renderer\assets\index-4641637a.js:1730:    if (s.drawable.enabled)
out\renderer\assets\index-4641637a.js:1731:      start$2(s, e2);
out\renderer\assets\index-4641637a.js:1732:  } else if (!s.viewOnly) {
out\renderer\assets\index-4641637a.js:1733:    if (s.dropmode.active)
out\renderer\assets\index-4641637a.js:1734:      drop(s, e2);
out\renderer\assets\index-4641637a.js:1735:    else
out\renderer\assets\index-4641637a.js:1736:      start$1(s, e2);
out\renderer\assets\index-4641637a.js:1737:  }
out\renderer\assets\index-4641637a.js:1738:};
out\renderer\assets\index-4641637a.js:1739:const dragOrDraw = (s, withDrag, withDraw) => (e2) => {
out\renderer\assets\index-4641637a.js:1740:  if (s.drawable.current) {
out\renderer\assets\index-4641637a.js:1741:    if (s.drawable.enabled)
out\renderer\assets\index-4641637a.js:1742:      withDraw(s, e2);
out\renderer\assets\index-4641637a.js:1743:  } else if (!s.viewOnly)
out\renderer\assets\index-4641637a.js:1744:    withDrag(s, e2);
out\renderer\assets\index-4641637a.js:1745:};
out\renderer\assets\index-4641637a.js:1746:function render$1(s) {
out\renderer\assets\index-4641637a.js:1747:  const asWhite = whitePov(s), posToTranslate$1 = posToTranslate(s.dom.bounds()), boardEl = s.dom.elements.board, pieces = s.pieces, curAnim = s.animation.current, anims = curAnim ? curAnim.plan.anims : /* @__PURE__ */ new Map(), fadings = curAnim ? curAnim.plan.fadings : /* @__PURE__ */ new Map(), curDrag = s.draggable.current, squares = computeSquareClasses(s), samePieces = /* @__PURE__ */ new Set(), sameSquares = /* @__PURE__ */ new Set(), movedPieces = /* @__PURE__ */ new Map(), movedSquares = /* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:1748:  let k, el, pieceAtKey, elPieceName, anim2, fading, pMvdset, pMvd, sMvdset, sMvd;
out\renderer\assets\index-4641637a.js:1749:  el = boardEl.firstChild;
out\renderer\assets\index-4641637a.js:1750:  while (el) {
out\renderer\assets\index-4641637a.js:1751:    k = el.cgKey;
out\renderer\assets\index-4641637a.js:1752:    if (isPieceNode(el)) {
out\renderer\assets\index-4641637a.js:1753:      pieceAtKey = pieces.get(k);
out\renderer\assets\index-4641637a.js:1754:      anim2 = anims.get(k);
out\renderer\assets\index-4641637a.js:1755:      fading = fadings.get(k);
out\renderer\assets\index-4641637a.js:1756:      elPieceName = el.cgPiece;
out\renderer\assets\index-4641637a.js:1757:      if (el.cgDragging && (!curDrag || curDrag.orig !== k)) {
out\renderer\assets\index-4641637a.js:1758:        el.classList.remove("dragging");
out\renderer\assets\index-4641637a.js:1759:        translate(el, posToTranslate$1(key2pos(k), asWhite));
out\renderer\assets\index-4641637a.js:1760:        el.cgDragging = false;
out\renderer\assets\index-4641637a.js:1761:      }
out\renderer\assets\index-4641637a.js:1762:      if (!fading && el.cgFading) {
out\renderer\assets\index-4641637a.js:1763:        el.cgFading = false;
out\renderer\assets\index-4641637a.js:1764:        el.classList.remove("fading");
out\renderer\assets\index-4641637a.js:1765:      }
out\renderer\assets\index-4641637a.js:1766:      if (pieceAtKey) {
out\renderer\assets\index-4641637a.js:1767:        if (anim2 && el.cgAnimating && elPieceName === pieceNameOf(pieceAtKey)) {
out\renderer\assets\index-4641637a.js:1768:          const pos = key2pos(k);
out\renderer\assets\index-4641637a.js:1769:          pos[0] += anim2[2];
out\renderer\assets\index-4641637a.js:1770:          pos[1] += anim2[3];
out\renderer\assets\index-4641637a.js:1771:          el.classList.add("anim");
out\renderer\assets\index-4641637a.js:1772:          translate(el, posToTranslate$1(pos, asWhite));
out\renderer\assets\index-4641637a.js:1773:        } else if (el.cgAnimating) {
out\renderer\assets\index-4641637a.js:1774:          el.cgAnimating = false;
out\renderer\assets\index-4641637a.js:1775:          el.classList.remove("anim");
out\renderer\assets\index-4641637a.js:1776:          translate(el, posToTranslate$1(key2pos(k), asWhite));
out\renderer\assets\index-4641637a.js:1777:          if (s.addPieceZIndex)
out\renderer\assets\index-4641637a.js:1778:            el.style.zIndex = posZIndex(key2pos(k), asWhite);
out\renderer\assets\index-4641637a.js:1779:        }
out\renderer\assets\index-4641637a.js:1780:        if (elPieceName === pieceNameOf(pieceAtKey) && (!fading || !el.cgFading)) {
out\renderer\assets\index-4641637a.js:1781:          samePieces.add(k);
out\renderer\assets\index-4641637a.js:1782:        } else {
out\renderer\assets\index-4641637a.js:1783:          if (fading && elPieceName === pieceNameOf(fading)) {
out\renderer\assets\index-4641637a.js:1784:            el.classList.add("fading");
out\renderer\assets\index-4641637a.js:1785:            el.cgFading = true;
out\renderer\assets\index-4641637a.js:1786:          } else {
out\renderer\assets\index-4641637a.js:1787:            appendValue(movedPieces, elPieceName, el);
out\renderer\assets\index-4641637a.js:1788:          }
out\renderer\assets\index-4641637a.js:1789:        }
out\renderer\assets\index-4641637a.js:1790:      } else {
out\renderer\assets\index-4641637a.js:1791:        appendValue(movedPieces, elPieceName, el);
out\renderer\assets\index-4641637a.js:1792:      }
out\renderer\assets\index-4641637a.js:1793:    } else if (isSquareNode(el)) {
out\renderer\assets\index-4641637a.js:1794:      const cn = el.className;
out\renderer\assets\index-4641637a.js:1795:      if (squares.get(k) === cn)
out\renderer\assets\index-4641637a.js:1796:        sameSquares.add(k);
out\renderer\assets\index-4641637a.js:1797:      else
out\renderer\assets\index-4641637a.js:1798:        appendValue(movedSquares, cn, el);
out\renderer\assets\index-4641637a.js:1799:    }
out\renderer\assets\index-4641637a.js:1800:    el = el.nextSibling;
out\renderer\assets\index-4641637a.js:1801:  }
out\renderer\assets\index-4641637a.js:1802:  for (const [sk, className] of squares) {
out\renderer\assets\index-4641637a.js:1803:    if (!sameSquares.has(sk)) {
out\renderer\assets\index-4641637a.js:1804:      sMvdset = movedSquares.get(className);
out\renderer\assets\index-4641637a.js:1805:      sMvd = sMvdset && sMvdset.pop();
out\renderer\assets\index-4641637a.js:1806:      const translation = posToTranslate$1(key2pos(sk), asWhite);
out\renderer\assets\index-4641637a.js:1807:      if (sMvd) {
out\renderer\assets\index-4641637a.js:1808:        sMvd.cgKey = sk;
out\renderer\assets\index-4641637a.js:1809:        translate(sMvd, translation);
out\renderer\assets\index-4641637a.js:1810:      } else {
out\renderer\assets\index-4641637a.js:1811:        const squareNode = createEl("square", className);
out\renderer\assets\index-4641637a.js:1812:        squareNode.cgKey = sk;
out\renderer\assets\index-4641637a.js:1813:        translate(squareNode, translation);
out\renderer\assets\index-4641637a.js:1814:        boardEl.insertBefore(squareNode, boardEl.firstChild);
out\renderer\assets\index-4641637a.js:1815:      }
out\renderer\assets\index-4641637a.js:1816:    }
out\renderer\assets\index-4641637a.js:1817:  }
out\renderer\assets\index-4641637a.js:1818:  for (const [k2, p] of pieces) {
out\renderer\assets\index-4641637a.js:1819:    anim2 = anims.get(k2);
out\renderer\assets\index-4641637a.js:1820:    if (!samePieces.has(k2)) {
out\renderer\assets\index-4641637a.js:1821:      pMvdset = movedPieces.get(pieceNameOf(p));
out\renderer\assets\index-4641637a.js:1822:      pMvd = pMvdset && pMvdset.pop();
out\renderer\assets\index-4641637a.js:1823:      if (pMvd) {
out\renderer\assets\index-4641637a.js:1824:        pMvd.cgKey = k2;
out\renderer\assets\index-4641637a.js:1825:        if (pMvd.cgFading) {
out\renderer\assets\index-4641637a.js:1826:          pMvd.classList.remove("fading");
out\renderer\assets\index-4641637a.js:1827:          pMvd.cgFading = false;
out\renderer\assets\index-4641637a.js:1828:        }
out\renderer\assets\index-4641637a.js:1829:        const pos = key2pos(k2);
out\renderer\assets\index-4641637a.js:1830:        if (s.addPieceZIndex)
out\renderer\assets\index-4641637a.js:1831:          pMvd.style.zIndex = posZIndex(pos, asWhite);
out\renderer\assets\index-4641637a.js:1832:        if (anim2) {
out\renderer\assets\index-4641637a.js:1833:          pMvd.cgAnimating = true;
out\renderer\assets\index-4641637a.js:1834:          pMvd.classList.add("anim");
out\renderer\assets\index-4641637a.js:1835:          pos[0] += anim2[2];
out\renderer\assets\index-4641637a.js:1836:          pos[1] += anim2[3];
out\renderer\assets\index-4641637a.js:1837:        }
out\renderer\assets\index-4641637a.js:1838:        translate(pMvd, posToTranslate$1(pos, asWhite));
out\renderer\assets\index-4641637a.js:1839:      } else {
out\renderer\assets\index-4641637a.js:1840:        const pieceName = pieceNameOf(p), pieceNode = createEl("piece", pieceName), pos = key2pos(k2);
out\renderer\assets\index-4641637a.js:1841:        pieceNode.cgPiece = pieceName;
out\renderer\assets\index-4641637a.js:1842:        pieceNode.cgKey = k2;
out\renderer\assets\index-4641637a.js:1843:        if (anim2) {
out\renderer\assets\index-4641637a.js:1844:          pieceNode.cgAnimating = true;
out\renderer\assets\index-4641637a.js:1845:          pos[0] += anim2[2];
out\renderer\assets\index-4641637a.js:1846:          pos[1] += anim2[3];
out\renderer\assets\index-4641637a.js:1847:        }
out\renderer\assets\index-4641637a.js:1848:        translate(pieceNode, posToTranslate$1(pos, asWhite));
out\renderer\assets\index-4641637a.js:1849:        if (s.addPieceZIndex)
out\renderer\assets\index-4641637a.js:1850:          pieceNode.style.zIndex = posZIndex(pos, asWhite);
out\renderer\assets\index-4641637a.js:1851:        boardEl.appendChild(pieceNode);
out\renderer\assets\index-4641637a.js:1852:      }
out\renderer\assets\index-4641637a.js:1853:    }
out\renderer\assets\index-4641637a.js:1854:  }
out\renderer\assets\index-4641637a.js:1855:  for (const nodes of movedPieces.values())
out\renderer\assets\index-4641637a.js:1856:    removeNodes(s, nodes);
out\renderer\assets\index-4641637a.js:1857:  for (const nodes of movedSquares.values())
out\renderer\assets\index-4641637a.js:1858:    removeNodes(s, nodes);
out\renderer\assets\index-4641637a.js:1859:}
out\renderer\assets\index-4641637a.js:1860:function renderResized$1(s) {
out\renderer\assets\index-4641637a.js:1861:  const asWhite = whitePov(s), posToTranslate$1 = posToTranslate(s.dom.bounds());
out\renderer\assets\index-4641637a.js:1862:  let el = s.dom.elements.board.firstChild;
out\renderer\assets\index-4641637a.js:1863:  while (el) {
out\renderer\assets\index-4641637a.js:1864:    if (isPieceNode(el) && !el.cgAnimating || isSquareNode(el)) {
out\renderer\assets\index-4641637a.js:1865:      translate(el, posToTranslate$1(key2pos(el.cgKey), asWhite));
out\renderer\assets\index-4641637a.js:1866:    }
out\renderer\assets\index-4641637a.js:1867:    el = el.nextSibling;
out\renderer\assets\index-4641637a.js:1868:  }
out\renderer\assets\index-4641637a.js:1869:}
out\renderer\assets\index-4641637a.js:1870:function updateBounds(s) {
out\renderer\assets\index-4641637a.js:1871:  var _a, _b;
out\renderer\assets\index-4641637a.js:1872:  const bounds = s.dom.elements.wrap.getBoundingClientRect();
out\renderer\assets\index-4641637a.js:1873:  const container = s.dom.elements.container;
out\renderer\assets\index-4641637a.js:1874:  const ratio = bounds.height / bounds.width;
out\renderer\assets\index-4641637a.js:1875:  const width = Math.floor(bounds.width * window.devicePixelRatio / 8) * 8 / window.devicePixelRatio;
out\renderer\assets\index-4641637a.js:1876:  const height = width * ratio;
out\renderer\assets\index-4641637a.js:1877:  container.style.width = width + "px";
out\renderer\assets\index-4641637a.js:1878:  container.style.height = height + "px";
out\renderer\assets\index-4641637a.js:1879:  s.dom.bounds.clear();
out\renderer\assets\index-4641637a.js:1880:  (_a = s.addDimensionsCssVarsTo) === null || _a === void 0 ? void 0 : _a.style.setProperty("--cg-width", width + "px");
out\renderer\assets\index-4641637a.js:1881:  (_b = s.addDimensionsCssVarsTo) === null || _b === void 0 ? void 0 : _b.style.setProperty("--cg-height", height + "px");
out\renderer\assets\index-4641637a.js:1882:}
out\renderer\assets\index-4641637a.js:1883:const isPieceNode = (el) => el.tagName === "PIECE";
out\renderer\assets\index-4641637a.js:1884:const isSquareNode = (el) => el.tagName === "SQUARE";
out\renderer\assets\index-4641637a.js:1885:function removeNodes(s, nodes) {
out\renderer\assets\index-4641637a.js:1886:  for (const node of nodes)
out\renderer\assets\index-4641637a.js:1887:    s.dom.elements.board.removeChild(node);
out\renderer\assets\index-4641637a.js:1888:}
out\renderer\assets\index-4641637a.js:1889:function posZIndex(pos, asWhite) {
out\renderer\assets\index-4641637a.js:1890:  const minZ = 3;
out\renderer\assets\index-4641637a.js:1891:  const rank = pos[1];
out\renderer\assets\index-4641637a.js:1892:  const z = asWhite ? minZ + 7 - rank : minZ + rank;
out\renderer\assets\index-4641637a.js:1893:  return `${z}`;
out\renderer\assets\index-4641637a.js:1894:}
out\renderer\assets\index-4641637a.js:1895:const pieceNameOf = (piece) => `${piece.color} ${piece.role}`;
out\renderer\assets\index-4641637a.js:1896:function computeSquareClasses(s) {
out\renderer\assets\index-4641637a.js:1897:  var _a;
out\renderer\assets\index-4641637a.js:1898:  const squares = /* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:1899:  if (s.lastMove && s.highlight.lastMove)
out\renderer\assets\index-4641637a.js:1900:    for (const k of s.lastMove) {
out\renderer\assets\index-4641637a.js:1901:      addSquare(squares, k, "last-move");
out\renderer\assets\index-4641637a.js:1902:    }
out\renderer\assets\index-4641637a.js:1903:  if (s.check && s.highlight.check)
out\renderer\assets\index-4641637a.js:1904:    addSquare(squares, s.check, "check");
out\renderer\assets\index-4641637a.js:1905:  if (s.selected) {
out\renderer\assets\index-4641637a.js:1906:    addSquare(squares, s.selected, "selected");
out\renderer\assets\index-4641637a.js:1907:    if (s.movable.showDests) {
out\renderer\assets\index-4641637a.js:1908:      const dests = (_a = s.movable.dests) === null || _a === void 0 ? void 0 : _a.get(s.selected);
out\renderer\assets\index-4641637a.js:1909:      if (dests)
out\renderer\assets\index-4641637a.js:1910:        for (const k of dests) {
out\renderer\assets\index-4641637a.js:1911:          addSquare(squares, k, "move-dest" + (s.pieces.has(k) ? " oc" : ""));
out\renderer\assets\index-4641637a.js:1912:        }
out\renderer\assets\index-4641637a.js:1913:      const pDests = s.premovable.dests;
out\renderer\assets\index-4641637a.js:1914:      if (pDests)
out\renderer\assets\index-4641637a.js:1915:        for (const k of pDests) {
out\renderer\assets\index-4641637a.js:1916:          addSquare(squares, k, "premove-dest" + (s.pieces.has(k) ? " oc" : ""));
out\renderer\assets\index-4641637a.js:1917:        }
out\renderer\assets\index-4641637a.js:1918:    }
out\renderer\assets\index-4641637a.js:1919:  }
out\renderer\assets\index-4641637a.js:1920:  const premove2 = s.premovable.current;
out\renderer\assets\index-4641637a.js:1921:  if (premove2)
out\renderer\assets\index-4641637a.js:1922:    for (const k of premove2)
out\renderer\assets\index-4641637a.js:1923:      addSquare(squares, k, "current-premove");
out\renderer\assets\index-4641637a.js:1924:  else if (s.predroppable.current)
out\renderer\assets\index-4641637a.js:1925:    addSquare(squares, s.predroppable.current.key, "current-premove");
out\renderer\assets\index-4641637a.js:1926:  const o = s.exploding;
out\renderer\assets\index-4641637a.js:1927:  if (o)
out\renderer\assets\index-4641637a.js:1928:    for (const k of o.keys)
out\renderer\assets\index-4641637a.js:1929:      addSquare(squares, k, "exploding" + o.stage);
out\renderer\assets\index-4641637a.js:1930:  return squares;
out\renderer\assets\index-4641637a.js:1931:}
out\renderer\assets\index-4641637a.js:1932:function addSquare(squares, key, klass) {
out\renderer\assets\index-4641637a.js:1933:  const classes = squares.get(key);
out\renderer\assets\index-4641637a.js:1934:  if (classes)
out\renderer\assets\index-4641637a.js:1935:    squares.set(key, `${classes} ${klass}`);
out\renderer\assets\index-4641637a.js:1936:  else
out\renderer\assets\index-4641637a.js:1937:    squares.set(key, klass);
out\renderer\assets\index-4641637a.js:1938:}
out\renderer\assets\index-4641637a.js:1939:function appendValue(map, key, value) {
out\renderer\assets\index-4641637a.js:1940:  const arr = map.get(key);
out\renderer\assets\index-4641637a.js:1941:  if (arr)
out\renderer\assets\index-4641637a.js:1942:    arr.push(value);
out\renderer\assets\index-4641637a.js:1943:  else
out\renderer\assets\index-4641637a.js:1944:    map.set(key, [value]);
out\renderer\assets\index-4641637a.js:1945:}
out\renderer\assets\index-4641637a.js:1946:function render(state, autoPieceEl) {
out\renderer\assets\index-4641637a.js:1947:  const autoPieces = state.drawable.autoShapes.filter((autoShape) => autoShape.piece);
out\renderer\assets\index-4641637a.js:1948:  const autoPieceShapes = autoPieces.map((s) => {
out\renderer\assets\index-4641637a.js:1949:    return {
out\renderer\assets\index-4641637a.js:1950:      shape: s,
out\renderer\assets\index-4641637a.js:1951:      hash: hash(s),
out\renderer\assets\index-4641637a.js:1952:      current: false
out\renderer\assets\index-4641637a.js:1953:    };
out\renderer\assets\index-4641637a.js:1954:  });
out\renderer\assets\index-4641637a.js:1955:  syncShapes(autoPieceShapes, autoPieceEl, (shape) => renderShape(state, shape, state.dom.bounds()));
out\renderer\assets\index-4641637a.js:1956:}
out\renderer\assets\index-4641637a.js:1957:function renderResized(state) {
out\renderer\assets\index-4641637a.js:1958:  var _a;
out\renderer\assets\index-4641637a.js:1959:  const asWhite = whitePov(state), posToTranslate$1 = posToTranslate(state.dom.bounds());
out\renderer\assets\index-4641637a.js:1960:  let el = (_a = state.dom.elements.autoPieces) === null || _a === void 0 ? void 0 : _a.firstChild;
out\renderer\assets\index-4641637a.js:1961:  while (el) {
out\renderer\assets\index-4641637a.js:1962:    translateAndScale(el, posToTranslate$1(key2pos(el.cgKey), asWhite), el.cgScale);
out\renderer\assets\index-4641637a.js:1963:    el = el.nextSibling;
out\renderer\assets\index-4641637a.js:1964:  }
out\renderer\assets\index-4641637a.js:1965:}
out\renderer\assets\index-4641637a.js:1966:function renderShape(state, { shape, hash: hash2 }, bounds) {
out\renderer\assets\index-4641637a.js:1967:  var _a, _b, _c;
out\renderer\assets\index-4641637a.js:1968:  const orig = shape.orig;
out\renderer\assets\index-4641637a.js:1969:  const role = (_a = shape.piece) === null || _a === void 0 ? void 0 : _a.role;
out\renderer\assets\index-4641637a.js:1970:  const color = (_b = shape.piece) === null || _b === void 0 ? void 0 : _b.color;
out\renderer\assets\index-4641637a.js:1971:  const scale = (_c = shape.piece) === null || _c === void 0 ? void 0 : _c.scale;
out\renderer\assets\index-4641637a.js:1972:  const pieceEl = createEl("piece", `${role} ${color}`);
out\renderer\assets\index-4641637a.js:1973:  pieceEl.setAttribute("cgHash", hash2);
out\renderer\assets\index-4641637a.js:1974:  pieceEl.cgKey = orig;
out\renderer\assets\index-4641637a.js:1975:  pieceEl.cgScale = scale;
out\renderer\assets\index-4641637a.js:1976:  translateAndScale(pieceEl, posToTranslate(bounds)(key2pos(orig), whitePov(state)), scale);
out\renderer\assets\index-4641637a.js:1977:  return pieceEl;
out\renderer\assets\index-4641637a.js:1978:}
out\renderer\assets\index-4641637a.js:1979:const hash = (autoPiece) => {
out\renderer\assets\index-4641637a.js:1980:  var _a, _b, _c;
out\renderer\assets\index-4641637a.js:1981:  return [autoPiece.orig, (_a = autoPiece.piece) === null || _a === void 0 ? void 0 : _a.role, (_b = autoPiece.piece) === null || _b === void 0 ? void 0 : _b.color, (_c = autoPiece.piece) === null || _c === void 0 ? void 0 : _c.scale].join(",");
out\renderer\assets\index-4641637a.js:1982:};
out\renderer\assets\index-4641637a.js:1983:function Chessground(element2, config) {
out\renderer\assets\index-4641637a.js:1984:  const maybeState = defaults();
out\renderer\assets\index-4641637a.js:1985:  configure(maybeState, config || {});
out\renderer\assets\index-4641637a.js:1986:  function redrawAll() {
out\renderer\assets\index-4641637a.js:1987:    const prevUnbind = "dom" in maybeState ? maybeState.dom.unbind : void 0;
out\renderer\assets\index-4641637a.js:1988:    const elements = renderWrap(element2, maybeState), bounds = memo(() => elements.board.getBoundingClientRect()), redrawNow = (skipSvg) => {
out\renderer\assets\index-4641637a.js:1989:      render$1(state);
out\renderer\assets\index-4641637a.js:1990:      if (elements.autoPieces)
out\renderer\assets\index-4641637a.js:1991:        render(state, elements.autoPieces);
out\renderer\assets\index-4641637a.js:1992:      if (!skipSvg && elements.svg)
out\renderer\assets\index-4641637a.js:1993:        renderSvg(state, elements.svg, elements.customSvg);
out\renderer\assets\index-4641637a.js:1994:    }, onResize = () => {
out\renderer\assets\index-4641637a.js:1995:      updateBounds(state);
out\renderer\assets\index-4641637a.js:1996:      renderResized$1(state);
out\renderer\assets\index-4641637a.js:1997:      if (elements.autoPieces)
out\renderer\assets\index-4641637a.js:1998:        renderResized(state);
out\renderer\assets\index-4641637a.js:1999:    };
out\renderer\assets\index-4641637a.js:2000:    const state = maybeState;
out\renderer\assets\index-4641637a.js:2001:    state.dom = {
out\renderer\assets\index-4641637a.js:2002:      elements,
out\renderer\assets\index-4641637a.js:2003:      bounds,
out\renderer\assets\index-4641637a.js:2004:      redraw: debounceRedraw(redrawNow),
out\renderer\assets\index-4641637a.js:2005:      redrawNow,
out\renderer\assets\index-4641637a.js:2006:      unbind: prevUnbind
out\renderer\assets\index-4641637a.js:2007:    };
out\renderer\assets\index-4641637a.js:2008:    state.drawable.prevSvgHash = "";
out\renderer\assets\index-4641637a.js:2009:    updateBounds(state);
out\renderer\assets\index-4641637a.js:2010:    redrawNow(false);
out\renderer\assets\index-4641637a.js:2011:    bindBoard(state, onResize);
out\renderer\assets\index-4641637a.js:2012:    if (!prevUnbind)
out\renderer\assets\index-4641637a.js:2013:      state.dom.unbind = bindDocument(state, onResize);
out\renderer\assets\index-4641637a.js:2014:    state.events.insert && state.events.insert(elements);
out\renderer\assets\index-4641637a.js:2015:    return state;
out\renderer\assets\index-4641637a.js:2016:  }
out\renderer\assets\index-4641637a.js:2017:  return start(redrawAll(), redrawAll);
out\renderer\assets\index-4641637a.js:2018:}
out\renderer\assets\index-4641637a.js:2019:function debounceRedraw(redrawNow) {
out\renderer\assets\index-4641637a.js:2020:  let redrawing = false;
out\renderer\assets\index-4641637a.js:2021:  return () => {
out\renderer\assets\index-4641637a.js:2022:    if (redrawing)
out\renderer\assets\index-4641637a.js:2023:      return;
out\renderer\assets\index-4641637a.js:2024:    redrawing = true;
out\renderer\assets\index-4641637a.js:2025:    requestAnimationFrame(() => {
out\renderer\assets\index-4641637a.js:2026:      redrawNow();
out\renderer\assets\index-4641637a.js:2027:      redrawing = false;
out\renderer\assets\index-4641637a.js:2028:    });
out\renderer\assets\index-4641637a.js:2029:  };
out\renderer\assets\index-4641637a.js:2030:}
out\renderer\assets\index-4641637a.js:2031:const chessground_base = "";
out\renderer\assets\index-4641637a.js:2032:const chessground_brown = "";
out\renderer\assets\index-4641637a.js:2033:const chessground_cburnett = "";
out\renderer\assets\index-4641637a.js:2034:const Chessground_svelte_svelte_type_style_lang = "";
out\renderer\assets\index-4641637a.js:2035:function create_fragment$2(ctx) {
out\renderer\assets\index-4641637a.js:2036:  let div;
out\renderer\assets\index-4641637a.js:2037:  let div_class_value;
out\renderer\assets\index-4641637a.js:2038:  return {
out\renderer\assets\index-4641637a.js:2039:    c() {
out\renderer\assets\index-4641637a.js:2040:      div = element("div");
out\renderer\assets\index-4641637a.js:2041:      attr(div, "class", div_class_value = "cg-wrap " + /*className*/
out\renderer\assets\index-4641637a.js:2042:      ctx[0] + " svelte-nbdzop");
out\renderer\assets\index-4641637a.js:2043:    },
out\renderer\assets\index-4641637a.js:2044:    m(target, anchor) {
out\renderer\assets\index-4641637a.js:2045:      insert(target, div, anchor);
out\renderer\assets\index-4641637a.js:2046:      ctx[36](div);
out\renderer\assets\index-4641637a.js:2047:    },
out\renderer\assets\index-4641637a.js:2048:    p(ctx2, dirty) {
out\renderer\assets\index-4641637a.js:2049:      if (dirty[0] & /*className*/
out\renderer\assets\index-4641637a.js:2050:      1 && div_class_value !== (div_class_value = "cg-wrap " + /*className*/
out\renderer\assets\index-4641637a.js:2051:      ctx2[0] + " svelte-nbdzop")) {
out\renderer\assets\index-4641637a.js:2052:        attr(div, "class", div_class_value);
out\renderer\assets\index-4641637a.js:2053:      }
out\renderer\assets\index-4641637a.js:2054:    },
out\renderer\assets\index-4641637a.js:2055:    i: noop,
out\renderer\assets\index-4641637a.js:2056:    o: noop,
out\renderer\assets\index-4641637a.js:2057:    d(detaching) {
out\renderer\assets\index-4641637a.js:2058:      if (detaching)
out\renderer\assets\index-4641637a.js:2059:        detach(div);
out\renderer\assets\index-4641637a.js:2060:      ctx[36](null);
out\renderer\assets\index-4641637a.js:2061:    }
out\renderer\assets\index-4641637a.js:2062:  };
out\renderer\assets\index-4641637a.js:2063:}
out\renderer\assets\index-4641637a.js:2064:function instance$2($$self, $$props, $$invalidate) {
out\renderer\assets\index-4641637a.js:2065:  let { className = "cg-default-style" } = $$props;
out\renderer\assets\index-4641637a.js:2066:  let { fen = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2067:  let { orientation = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2068:  let { turnColor = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2069:  let { check = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2070:  let { lastMove = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2071:  let { selected = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2072:  let { coordinates = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2073:  let { autoCastle = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2074:  let { viewOnly = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2075:  let { disableContextMenu = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2076:  let { addPieceZIndex = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2077:  let { addDimensionsCssVarsTo = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2078:  let { blockTouchScroll = void 0 } = $$props;
out\renderer\assets\index-4641637a.js:2079:  let { config = {} } = $$props;
out\renderer\assets\index-4641637a.js:2080:  let container;
out\renderer\assets\index-4641637a.js:2081:  let chessground;
out\renderer\assets\index-4641637a.js:2082:  onMount(async () => {
out\renderer\assets\index-4641637a.js:2083:    if (orientation !== void 0)
out\renderer\assets\index-4641637a.js:2084:      $$invalidate(2, config.orientation = orientation, config);
out\renderer\assets\index-4641637a.js:2085:    if (fen !== void 0)
out\renderer\assets\index-4641637a.js:2086:      $$invalidate(2, config.fen = fen, config);
out\renderer\assets\index-4641637a.js:2087:    if (turnColor !== void 0)
out\renderer\assets\index-4641637a.js:2088:      $$invalidate(2, config.turnColor = turnColor, config);
out\renderer\assets\index-4641637a.js:2089:    if (check !== void 0)
out\renderer\assets\index-4641637a.js:2090:      $$invalidate(2, config.check = check, config);
out\renderer\assets\index-4641637a.js:2091:    if (lastMove !== void 0)
out\renderer\assets\index-4641637a.js:2092:      $$invalidate(2, config.lastMove = lastMove, config);
out\renderer\assets\index-4641637a.js:2093:    if (selected !== void 0)
out\renderer\assets\index-4641637a.js:2094:      $$invalidate(2, config.selected = selected, config);
out\renderer\assets\index-4641637a.js:2095:    if (coordinates !== void 0)
out\renderer\assets\index-4641637a.js:2096:      $$invalidate(2, config.coordinates = coordinates, config);
out\renderer\assets\index-4641637a.js:2097:    if (autoCastle !== void 0)
out\renderer\assets\index-4641637a.js:2098:      $$invalidate(2, config.autoCastle = autoCastle, config);
out\renderer\assets\index-4641637a.js:2099:    if (viewOnly !== void 0)
out\renderer\assets\index-4641637a.js:2100:      $$invalidate(2, config.viewOnly = viewOnly, config);
out\renderer\assets\index-4641637a.js:2101:    if (disableContextMenu !== void 0)
out\renderer\assets\index-4641637a.js:2102:      $$invalidate(2, config.disableContextMenu = disableContextMenu, config);
out\renderer\assets\index-4641637a.js:2103:    if (addPieceZIndex !== void 0)
out\renderer\assets\index-4641637a.js:2104:      $$invalidate(2, config.addPieceZIndex = addPieceZIndex, config);
out\renderer\assets\index-4641637a.js:2105:    if (addDimensionsCssVarsTo !== void 0)
out\renderer\assets\index-4641637a.js:2106:      $$invalidate(2, config.addDimensionsCssVarsTo = addDimensionsCssVarsTo, config);
out\renderer\assets\index-4641637a.js:2107:    if (blockTouchScroll !== void 0)
out\renderer\assets\index-4641637a.js:2108:      $$invalidate(2, config.blockTouchScroll = blockTouchScroll, config);
out\renderer\assets\index-4641637a.js:2109:    chessground = Chessground(container, config);
out\renderer\assets\index-4641637a.js:2110:  });
out\renderer\assets\index-4641637a.js:2111:  function setConfig(config2) {
out\renderer\assets\index-4641637a.js:2112:    if (chessground) {
out\renderer\assets\index-4641637a.js:2113:      chessground.set(config2);
out\renderer\assets\index-4641637a.js:2114:    }
out\renderer\assets\index-4641637a.js:2115:  }
out\renderer\assets\index-4641637a.js:2116:  function set(config2) {
out\renderer\assets\index-4641637a.js:2117:    chessground.set(config2);
out\renderer\assets\index-4641637a.js:2118:  }
out\renderer\assets\index-4641637a.js:2119:  function getState() {
out\renderer\assets\index-4641637a.js:2120:    return chessground.state;
out\renderer\assets\index-4641637a.js:2121:  }
out\renderer\assets\index-4641637a.js:2122:  function getFen() {
out\renderer\assets\index-4641637a.js:2123:    return chessground.getFen();
out\renderer\assets\index-4641637a.js:2124:  }
out\renderer\assets\index-4641637a.js:2125:  function toggleOrientation2() {
out\renderer\assets\index-4641637a.js:2126:    return chessground.toggleOrientation();
out\renderer\assets\index-4641637a.js:2127:  }
out\renderer\assets\index-4641637a.js:2128:  function move2(orig, dest) {
out\renderer\assets\index-4641637a.js:2129:    return chessground.move(orig, dest);
out\renderer\assets\index-4641637a.js:2130:  }
out\renderer\assets\index-4641637a.js:2131:  function setPieces2(pieces) {
out\renderer\assets\index-4641637a.js:2132:    return chessground.setPieces(pieces);
out\renderer\assets\index-4641637a.js:2133:  }
out\renderer\assets\index-4641637a.js:2134:  function selectSquare2(key, force) {
out\renderer\assets\index-4641637a.js:2135:    return chessground.selectSquare(key, force);
out\renderer\assets\index-4641637a.js:2136:  }
out\renderer\assets\index-4641637a.js:2137:  function newPiece(piece, key) {
out\renderer\assets\index-4641637a.js:2138:    return chessground.newPiece(piece, key);
out\renderer\assets\index-4641637a.js:2139:  }
out\renderer\assets\index-4641637a.js:2140:  function playPremove2() {
out\renderer\assets\index-4641637a.js:2141:    return chessground.playPremove();
out\renderer\assets\index-4641637a.js:2142:  }
out\renderer\assets\index-4641637a.js:2143:  function cancelPremove() {
out\renderer\assets\index-4641637a.js:2144:    chessground.cancelPremove();
out\renderer\assets\index-4641637a.js:2145:  }
out\renderer\assets\index-4641637a.js:2146:  function playPredrop2(validate) {
out\renderer\assets\index-4641637a.js:2147:    return chessground.playPredrop(validate);
out\renderer\assets\index-4641637a.js:2148:  }
out\renderer\assets\index-4641637a.js:2149:  function cancelPredrop() {
out\renderer\assets\index-4641637a.js:2150:    chessground.cancelPredrop();
out\renderer\assets\index-4641637a.js:2151:  }
out\renderer\assets\index-4641637a.js:2152:  function cancelMove2() {
out\renderer\assets\index-4641637a.js:2153:    chessground.cancelMove();
out\renderer\assets\index-4641637a.js:2154:  }
out\renderer\assets\index-4641637a.js:2155:  function stop2() {
out\renderer\assets\index-4641637a.js:2156:    chessground.stop();
out\renderer\assets\index-4641637a.js:2157:  }
out\renderer\assets\index-4641637a.js:2158:  function explode(keys) {
out\renderer\assets\index-4641637a.js:2159:    chessground.explode(keys);
out\renderer\assets\index-4641637a.js:2160:  }
out\renderer\assets\index-4641637a.js:2161:  function setShapes(shapes) {
out\renderer\assets\index-4641637a.js:2162:    chessground.setShapes(shapes);
out\renderer\assets\index-4641637a.js:2163:  }
out\renderer\assets\index-4641637a.js:2164:  function setAutoShapes(shapes) {
out\renderer\assets\index-4641637a.js:2165:    chessground.setAutoShapes(shapes);
out\renderer\assets\index-4641637a.js:2166:  }
out\renderer\assets\index-4641637a.js:2167:  function redrawAll() {
out\renderer\assets\index-4641637a.js:2168:    return chessground.redrawAll();
out\renderer\assets\index-4641637a.js:2169:  }
out\renderer\assets\index-4641637a.js:2170:  function dragNewPiece2(piece, event, force) {
out\renderer\assets\index-4641637a.js:2171:    chessground.dragNewPiece(piece, event, force);
out\renderer\assets\index-4641637a.js:2172:  }
out\renderer\assets\index-4641637a.js:2173:  function destroy() {
out\renderer\assets\index-4641637a.js:2174:    return chessground.destroy();
out\renderer\assets\index-4641637a.js:2175:  }
out\renderer\assets\index-4641637a.js:2176:  function div_binding($$value) {
out\renderer\assets\index-4641637a.js:2177:    binding_callbacks[$$value ? "unshift" : "push"](() => {
out\renderer\assets\index-4641637a.js:2178:      container = $$value;
out\renderer\assets\index-4641637a.js:2179:      $$invalidate(1, container);
out\renderer\assets\index-4641637a.js:2180:    });
out\renderer\assets\index-4641637a.js:2181:  }
out\renderer\assets\index-4641637a.js:2182:  $$self.$$set = ($$props2) => {
out\renderer\assets\index-4641637a.js:2183:    if ("className" in $$props2)
out\renderer\assets\index-4641637a.js:2184:      $$invalidate(0, className = $$props2.className);
out\renderer\assets\index-4641637a.js:2185:    if ("fen" in $$props2)
out\renderer\assets\index-4641637a.js:2186:      $$invalidate(3, fen = $$props2.fen);
out\renderer\assets\index-4641637a.js:2187:    if ("orientation" in $$props2)
out\renderer\assets\index-4641637a.js:2188:      $$invalidate(4, orientation = $$props2.orientation);
out\renderer\assets\index-4641637a.js:2189:    if ("turnColor" in $$props2)
out\renderer\assets\index-4641637a.js:2190:      $$invalidate(5, turnColor = $$props2.turnColor);
out\renderer\assets\index-4641637a.js:2191:    if ("check" in $$props2)
out\renderer\assets\index-4641637a.js:2192:      $$invalidate(6, check = $$props2.check);
out\renderer\assets\index-4641637a.js:2193:    if ("lastMove" in $$props2)
out\renderer\assets\index-4641637a.js:2194:      $$invalidate(7, lastMove = $$props2.lastMove);
out\renderer\assets\index-4641637a.js:2195:    if ("selected" in $$props2)
out\renderer\assets\index-4641637a.js:2196:      $$invalidate(8, selected = $$props2.selected);
out\renderer\assets\index-4641637a.js:2197:    if ("coordinates" in $$props2)
out\renderer\assets\index-4641637a.js:2198:      $$invalidate(9, coordinates = $$props2.coordinates);
out\renderer\assets\index-4641637a.js:2199:    if ("autoCastle" in $$props2)
out\renderer\assets\index-4641637a.js:2200:      $$invalidate(10, autoCastle = $$props2.autoCastle);
out\renderer\assets\index-4641637a.js:2201:    if ("viewOnly" in $$props2)
out\renderer\assets\index-4641637a.js:2202:      $$invalidate(11, viewOnly = $$props2.viewOnly);
out\renderer\assets\index-4641637a.js:2203:    if ("disableContextMenu" in $$props2)
out\renderer\assets\index-4641637a.js:2204:      $$invalidate(12, disableContextMenu = $$props2.disableContextMenu);
out\renderer\assets\index-4641637a.js:2205:    if ("addPieceZIndex" in $$props2)
out\renderer\assets\index-4641637a.js:2206:      $$invalidate(13, addPieceZIndex = $$props2.addPieceZIndex);
out\renderer\assets\index-4641637a.js:2207:    if ("addDimensionsCssVarsTo" in $$props2)
out\renderer\assets\index-4641637a.js:2208:      $$invalidate(14, addDimensionsCssVarsTo = $$props2.addDimensionsCssVarsTo);
out\renderer\assets\index-4641637a.js:2209:    if ("blockTouchScroll" in $$props2)
out\renderer\assets\index-4641637a.js:2210:      $$invalidate(15, blockTouchScroll = $$props2.blockTouchScroll);
out\renderer\assets\index-4641637a.js:2211:    if ("config" in $$props2)
out\renderer\assets\index-4641637a.js:2212:      $$invalidate(2, config = $$props2.config);
out\renderer\assets\index-4641637a.js:2213:  };
out\renderer\assets\index-4641637a.js:2214:  $$self.$$.update = () => {
out\renderer\assets\index-4641637a.js:2215:    if ($$self.$$.dirty[0] & /*fen*/
out\renderer\assets\index-4641637a.js:2216:    8) {
out\renderer\assets\index-4641637a.js:2217:      setConfig({ fen });
out\renderer\assets\index-4641637a.js:2218:    }
out\renderer\assets\index-4641637a.js:2219:    if ($$self.$$.dirty[0] & /*orientation*/
out\renderer\assets\index-4641637a.js:2220:    16) {
out\renderer\assets\index-4641637a.js:2221:      setConfig({ orientation });
out\renderer\assets\index-4641637a.js:2222:    }
out\renderer\assets\index-4641637a.js:2223:    if ($$self.$$.dirty[0] & /*turnColor*/
out\renderer\assets\index-4641637a.js:2224:    32) {
out\renderer\assets\index-4641637a.js:2225:      setConfig({ turnColor });
out\renderer\assets\index-4641637a.js:2226:    }
out\renderer\assets\index-4641637a.js:2227:    if ($$self.$$.dirty[0] & /*check*/
out\renderer\assets\index-4641637a.js:2228:    64) {
out\renderer\assets\index-4641637a.js:2229:      setConfig({ check });
out\renderer\assets\index-4641637a.js:2230:    }
out\renderer\assets\index-4641637a.js:2231:    if ($$self.$$.dirty[0] & /*lastMove*/
out\renderer\assets\index-4641637a.js:2232:    128) {
out\renderer\assets\index-4641637a.js:2233:      setConfig({ lastMove });
out\renderer\assets\index-4641637a.js:2234:    }
out\renderer\assets\index-4641637a.js:2235:    if ($$self.$$.dirty[0] & /*selected*/
out\renderer\assets\index-4641637a.js:2236:    256) {
out\renderer\assets\index-4641637a.js:2237:      setConfig({ selected });
out\renderer\assets\index-4641637a.js:2238:    }
out\renderer\assets\index-4641637a.js:2239:    if ($$self.$$.dirty[0] & /*coordinates*/
out\renderer\assets\index-4641637a.js:2240:    512) {
out\renderer\assets\index-4641637a.js:2241:      setConfig({ coordinates });
out\renderer\assets\index-4641637a.js:2242:    }
out\renderer\assets\index-4641637a.js:2243:    if ($$self.$$.dirty[0] & /*autoCastle*/
out\renderer\assets\index-4641637a.js:2244:    1024) {
out\renderer\assets\index-4641637a.js:2245:      setConfig({ autoCastle });
out\renderer\assets\index-4641637a.js:2246:    }
out\renderer\assets\index-4641637a.js:2247:    if ($$self.$$.dirty[0] & /*viewOnly*/
out\renderer\assets\index-4641637a.js:2248:    2048) {
out\renderer\assets\index-4641637a.js:2249:      setConfig({ viewOnly });
out\renderer\assets\index-4641637a.js:2250:    }
out\renderer\assets\index-4641637a.js:2251:    if ($$self.$$.dirty[0] & /*disableContextMenu*/
out\renderer\assets\index-4641637a.js:2252:    4096) {
out\renderer\assets\index-4641637a.js:2253:      setConfig({ disableContextMenu });
out\renderer\assets\index-4641637a.js:2254:    }
out\renderer\assets\index-4641637a.js:2255:    if ($$self.$$.dirty[0] & /*addPieceZIndex*/
out\renderer\assets\index-4641637a.js:2256:    8192) {
out\renderer\assets\index-4641637a.js:2257:      setConfig({ addPieceZIndex });
out\renderer\assets\index-4641637a.js:2258:    }
out\renderer\assets\index-4641637a.js:2259:    if ($$self.$$.dirty[0] & /*addDimensionsCssVarsTo*/
out\renderer\assets\index-4641637a.js:2260:    16384) {
out\renderer\assets\index-4641637a.js:2261:      setConfig({ addDimensionsCssVarsTo });
out\renderer\assets\index-4641637a.js:2262:    }
out\renderer\assets\index-4641637a.js:2263:    if ($$self.$$.dirty[0] & /*blockTouchScroll*/
out\renderer\assets\index-4641637a.js:2264:    32768) {
out\renderer\assets\index-4641637a.js:2265:      setConfig({ blockTouchScroll });
out\renderer\assets\index-4641637a.js:2266:    }
out\renderer\assets\index-4641637a.js:2267:    if ($$self.$$.dirty[0] & /*config*/
out\renderer\assets\index-4641637a.js:2268:    4) {
out\renderer\assets\index-4641637a.js:2269:      setConfig(config);
out\renderer\assets\index-4641637a.js:2270:    }
out\renderer\assets\index-4641637a.js:2271:  };
out\renderer\assets\index-4641637a.js:2272:  return [
out\renderer\assets\index-4641637a.js:2273:    className,
out\renderer\assets\index-4641637a.js:2274:    container,
out\renderer\assets\index-4641637a.js:2275:    config,
out\renderer\assets\index-4641637a.js:2276:    fen,
out\renderer\assets\index-4641637a.js:2277:    orientation,
out\renderer\assets\index-4641637a.js:2278:    turnColor,
out\renderer\assets\index-4641637a.js:2279:    check,
out\renderer\assets\index-4641637a.js:2280:    lastMove,
out\renderer\assets\index-4641637a.js:2281:    selected,
out\renderer\assets\index-4641637a.js:2282:    coordinates,
out\renderer\assets\index-4641637a.js:2283:    autoCastle,
out\renderer\assets\index-4641637a.js:2284:    viewOnly,
out\renderer\assets\index-4641637a.js:2285:    disableContextMenu,
out\renderer\assets\index-4641637a.js:2286:    addPieceZIndex,
out\renderer\assets\index-4641637a.js:2287:    addDimensionsCssVarsTo,
out\renderer\assets\index-4641637a.js:2288:    blockTouchScroll,
out\renderer\assets\index-4641637a.js:2289:    set,
out\renderer\assets\index-4641637a.js:2290:    getState,
out\renderer\assets\index-4641637a.js:2291:    getFen,
out\renderer\assets\index-4641637a.js:2292:    toggleOrientation2,
out\renderer\assets\index-4641637a.js:2293:    move2,
out\renderer\assets\index-4641637a.js:2294:    setPieces2,
out\renderer\assets\index-4641637a.js:2295:    selectSquare2,
out\renderer\assets\index-4641637a.js:2296:    newPiece,
out\renderer\assets\index-4641637a.js:2297:    playPremove2,
out\renderer\assets\index-4641637a.js:2298:    cancelPremove,
out\renderer\assets\index-4641637a.js:2299:    playPredrop2,
out\renderer\assets\index-4641637a.js:2300:    cancelPredrop,
out\renderer\assets\index-4641637a.js:2301:    cancelMove2,
out\renderer\assets\index-4641637a.js:2302:    stop2,
out\renderer\assets\index-4641637a.js:2303:    explode,
out\renderer\assets\index-4641637a.js:2304:    setShapes,
out\renderer\assets\index-4641637a.js:2305:    setAutoShapes,
out\renderer\assets\index-4641637a.js:2306:    redrawAll,
out\renderer\assets\index-4641637a.js:2307:    dragNewPiece2,
out\renderer\assets\index-4641637a.js:2308:    destroy,
out\renderer\assets\index-4641637a.js:2309:    div_binding
out\renderer\assets\index-4641637a.js:2310:  ];
out\renderer\assets\index-4641637a.js:2311:}
out\renderer\assets\index-4641637a.js:2312:class Chessground_1 extends SvelteComponent {
out\renderer\assets\index-4641637a.js:2313:  constructor(options) {
out\renderer\assets\index-4641637a.js:2314:    super();
out\renderer\assets\index-4641637a.js:2315:    init(
out\renderer\assets\index-4641637a.js:2316:      this,
out\renderer\assets\index-4641637a.js:2317:      options,
out\renderer\assets\index-4641637a.js:2318:      instance$2,
out\renderer\assets\index-4641637a.js:2319:      create_fragment$2,
out\renderer\assets\index-4641637a.js:2320:      safe_not_equal,
out\renderer\assets\index-4641637a.js:2321:      {
out\renderer\assets\index-4641637a.js:2322:        className: 0,
out\renderer\assets\index-4641637a.js:2323:        fen: 3,
out\renderer\assets\index-4641637a.js:2324:        orientation: 4,
out\renderer\assets\index-4641637a.js:2325:        turnColor: 5,
out\renderer\assets\index-4641637a.js:2326:        check: 6,
out\renderer\assets\index-4641637a.js:2327:        lastMove: 7,
out\renderer\assets\index-4641637a.js:2328:        selected: 8,
out\renderer\assets\index-4641637a.js:2329:        coordinates: 9,
out\renderer\assets\index-4641637a.js:2330:        autoCastle: 10,
out\renderer\assets\index-4641637a.js:2331:        viewOnly: 11,
out\renderer\assets\index-4641637a.js:2332:        disableContextMenu: 12,
out\renderer\assets\index-4641637a.js:2333:        addPieceZIndex: 13,
out\renderer\assets\index-4641637a.js:2334:        addDimensionsCssVarsTo: 14,
out\renderer\assets\index-4641637a.js:2335:        blockTouchScroll: 15,
out\renderer\assets\index-4641637a.js:2336:        config: 2,
out\renderer\assets\index-4641637a.js:2337:        set: 16,
out\renderer\assets\index-4641637a.js:2338:        getState: 17,
out\renderer\assets\index-4641637a.js:2339:        getFen: 18,
out\renderer\assets\index-4641637a.js:2340:        toggleOrientation: 19,
out\renderer\assets\index-4641637a.js:2341:        move: 20,
out\renderer\assets\index-4641637a.js:2342:        setPieces: 21,
out\renderer\assets\index-4641637a.js:2343:        selectSquare: 22,
out\renderer\assets\index-4641637a.js:2344:        newPiece: 23,
out\renderer\assets\index-4641637a.js:2345:        playPremove: 24,
out\renderer\assets\index-4641637a.js:2346:        cancelPremove: 25,
out\renderer\assets\index-4641637a.js:2347:        playPredrop: 26,
out\renderer\assets\index-4641637a.js:2348:        cancelPredrop: 27,
out\renderer\assets\index-4641637a.js:2349:        cancelMove: 28,
out\renderer\assets\index-4641637a.js:2350:        stop: 29,
out\renderer\assets\index-4641637a.js:2351:        explode: 30,
out\renderer\assets\index-4641637a.js:2352:        setShapes: 31,
out\renderer\assets\index-4641637a.js:2353:        setAutoShapes: 32,
out\renderer\assets\index-4641637a.js:2354:        redrawAll: 33,
out\renderer\assets\index-4641637a.js:2355:        dragNewPiece: 34,
out\renderer\assets\index-4641637a.js:2356:        destroy: 35
out\renderer\assets\index-4641637a.js:2357:      },
out\renderer\assets\index-4641637a.js:2358:      null,
out\renderer\assets\index-4641637a.js:2359:      [-1, -1]
out\renderer\assets\index-4641637a.js:2360:    );
out\renderer\assets\index-4641637a.js:2361:  }
out\renderer\assets\index-4641637a.js:2362:  get set() {
out\renderer\assets\index-4641637a.js:2363:    return this.$$.ctx[16];
out\renderer\assets\index-4641637a.js:2364:  }
out\renderer\assets\index-4641637a.js:2365:  get getState() {
out\renderer\assets\index-4641637a.js:2366:    return this.$$.ctx[17];
out\renderer\assets\index-4641637a.js:2367:  }
out\renderer\assets\index-4641637a.js:2368:  get getFen() {
out\renderer\assets\index-4641637a.js:2369:    return this.$$.ctx[18];
out\renderer\assets\index-4641637a.js:2370:  }
out\renderer\assets\index-4641637a.js:2371:  get toggleOrientation() {
out\renderer\assets\index-4641637a.js:2372:    return this.$$.ctx[19];
out\renderer\assets\index-4641637a.js:2373:  }
out\renderer\assets\index-4641637a.js:2374:  get move() {
out\renderer\assets\index-4641637a.js:2375:    return this.$$.ctx[20];
out\renderer\assets\index-4641637a.js:2376:  }
out\renderer\assets\index-4641637a.js:2377:  get setPieces() {
out\renderer\assets\index-4641637a.js:2378:    return this.$$.ctx[21];
out\renderer\assets\index-4641637a.js:2379:  }
out\renderer\assets\index-4641637a.js:2380:  get selectSquare() {
out\renderer\assets\index-4641637a.js:2381:    return this.$$.ctx[22];
out\renderer\assets\index-4641637a.js:2382:  }
out\renderer\assets\index-4641637a.js:2383:  get newPiece() {
out\renderer\assets\index-4641637a.js:2384:    return this.$$.ctx[23];
out\renderer\assets\index-4641637a.js:2385:  }
out\renderer\assets\index-4641637a.js:2386:  get playPremove() {
out\renderer\assets\index-4641637a.js:2387:    return this.$$.ctx[24];
out\renderer\assets\index-4641637a.js:2388:  }
out\renderer\assets\index-4641637a.js:2389:  get cancelPremove() {
out\renderer\assets\index-4641637a.js:2390:    return this.$$.ctx[25];
out\renderer\assets\index-4641637a.js:2391:  }
out\renderer\assets\index-4641637a.js:2392:  get playPredrop() {
out\renderer\assets\index-4641637a.js:2393:    return this.$$.ctx[26];
out\renderer\assets\index-4641637a.js:2394:  }
out\renderer\assets\index-4641637a.js:2395:  get cancelPredrop() {
out\renderer\assets\index-4641637a.js:2396:    return this.$$.ctx[27];
out\renderer\assets\index-4641637a.js:2397:  }
out\renderer\assets\index-4641637a.js:2398:  get cancelMove() {
out\renderer\assets\index-4641637a.js:2399:    return this.$$.ctx[28];
out\renderer\assets\index-4641637a.js:2400:  }
out\renderer\assets\index-4641637a.js:2401:  get stop() {
out\renderer\assets\index-4641637a.js:2402:    return this.$$.ctx[29];
out\renderer\assets\index-4641637a.js:2403:  }
out\renderer\assets\index-4641637a.js:2404:  get explode() {
out\renderer\assets\index-4641637a.js:2405:    return this.$$.ctx[30];
out\renderer\assets\index-4641637a.js:2406:  }
out\renderer\assets\index-4641637a.js:2407:  get setShapes() {
out\renderer\assets\index-4641637a.js:2408:    return this.$$.ctx[31];
out\renderer\assets\index-4641637a.js:2409:  }
out\renderer\assets\index-4641637a.js:2410:  get setAutoShapes() {
out\renderer\assets\index-4641637a.js:2411:    return this.$$.ctx[32];
out\renderer\assets\index-4641637a.js:2412:  }
out\renderer\assets\index-4641637a.js:2413:  get redrawAll() {
out\renderer\assets\index-4641637a.js:2414:    return this.$$.ctx[33];
out\renderer\assets\index-4641637a.js:2415:  }
out\renderer\assets\index-4641637a.js:2416:  get dragNewPiece() {
out\renderer\assets\index-4641637a.js:2417:    return this.$$.ctx[34];
out\renderer\assets\index-4641637a.js:2418:  }
out\renderer\assets\index-4641637a.js:2419:  get destroy() {
out\renderer\assets\index-4641637a.js:2420:    return this.$$.ctx[35];
out\renderer\assets\index-4641637a.js:2421:  }
out\renderer\assets\index-4641637a.js:2422:}
out\renderer\assets\index-4641637a.js:2423:const COLORS = ["white", "black"];
out\renderer\assets\index-4641637a.js:2424:const ROLES = ["pawn", "knight", "bishop", "rook", "queen", "king"];
out\renderer\assets\index-4641637a.js:2425:const CASTLING_SIDES = ["a", "h"];
out\renderer\assets\index-4641637a.js:2426:const isDrop = (v) => "role" in v;
out\renderer\assets\index-4641637a.js:2427:const defined = (v) => v !== void 0;
out\renderer\assets\index-4641637a.js:2428:const opposite = (color) => color === "white" ? "black" : "white";
out\renderer\assets\index-4641637a.js:2429:const squareRank = (square) => square >> 3;
out\renderer\assets\index-4641637a.js:2430:const squareFile = (square) => square & 7;
out\renderer\assets\index-4641637a.js:2431:function charToRole(ch) {
out\renderer\assets\index-4641637a.js:2432:  switch (ch.toLowerCase()) {
out\renderer\assets\index-4641637a.js:2433:    case "p":
out\renderer\assets\index-4641637a.js:2434:      return "pawn";
out\renderer\assets\index-4641637a.js:2435:    case "n":
out\renderer\assets\index-4641637a.js:2436:      return "knight";
out\renderer\assets\index-4641637a.js:2437:    case "b":
out\renderer\assets\index-4641637a.js:2438:      return "bishop";
out\renderer\assets\index-4641637a.js:2439:    case "r":
out\renderer\assets\index-4641637a.js:2440:      return "rook";
out\renderer\assets\index-4641637a.js:2441:    case "q":
out\renderer\assets\index-4641637a.js:2442:      return "queen";
out\renderer\assets\index-4641637a.js:2443:    case "k":
out\renderer\assets\index-4641637a.js:2444:      return "king";
out\renderer\assets\index-4641637a.js:2445:    default:
out\renderer\assets\index-4641637a.js:2446:      return;
out\renderer\assets\index-4641637a.js:2447:  }
out\renderer\assets\index-4641637a.js:2448:}
out\renderer\assets\index-4641637a.js:2449:function parseSquare(str) {
out\renderer\assets\index-4641637a.js:2450:  if (str.length !== 2)
out\renderer\assets\index-4641637a.js:2451:    return;
out\renderer\assets\index-4641637a.js:2452:  const file = str.charCodeAt(0) - "a".charCodeAt(0);
out\renderer\assets\index-4641637a.js:2453:  const rank = str.charCodeAt(1) - "1".charCodeAt(0);
out\renderer\assets\index-4641637a.js:2454:  if (file < 0 || file >= 8 || rank < 0 || rank >= 8)
out\renderer\assets\index-4641637a.js:2455:    return;
out\renderer\assets\index-4641637a.js:2456:  return file + 8 * rank;
out\renderer\assets\index-4641637a.js:2457:}
out\renderer\assets\index-4641637a.js:2458:const kingCastlesTo = (color, side) => color === "white" ? side === "a" ? 2 : 6 : side === "a" ? 58 : 62;
out\renderer\assets\index-4641637a.js:2459:const rookCastlesTo = (color, side) => color === "white" ? side === "a" ? 3 : 5 : side === "a" ? 59 : 61;
out\renderer\assets\index-4641637a.js:2460:const popcnt32 = (n2) => {
out\renderer\assets\index-4641637a.js:2461:  n2 = n2 - (n2 >>> 1 & 1431655765);
out\renderer\assets\index-4641637a.js:2462:  n2 = (n2 & 858993459) + (n2 >>> 2 & 858993459);
out\renderer\assets\index-4641637a.js:2463:  return Math.imul(n2 + (n2 >>> 4) & 252645135, 16843009) >> 24;
out\renderer\assets\index-4641637a.js:2464:};
out\renderer\assets\index-4641637a.js:2465:const bswap32 = (n2) => {
out\renderer\assets\index-4641637a.js:2466:  n2 = n2 >>> 8 & 16711935 | (n2 & 16711935) << 8;
out\renderer\assets\index-4641637a.js:2467:  return n2 >>> 16 & 65535 | (n2 & 65535) << 16;
out\renderer\assets\index-4641637a.js:2468:};
out\renderer\assets\index-4641637a.js:2469:const rbit32 = (n2) => {
out\renderer\assets\index-4641637a.js:2470:  n2 = n2 >>> 1 & 1431655765 | (n2 & 1431655765) << 1;
out\renderer\assets\index-4641637a.js:2471:  n2 = n2 >>> 2 & 858993459 | (n2 & 858993459) << 2;
out\renderer\assets\index-4641637a.js:2472:  n2 = n2 >>> 4 & 252645135 | (n2 & 252645135) << 4;
out\renderer\assets\index-4641637a.js:2473:  return bswap32(n2);
out\renderer\assets\index-4641637a.js:2474:};
out\renderer\assets\index-4641637a.js:2475:class SquareSet {
out\renderer\assets\index-4641637a.js:2476:  constructor(lo, hi) {
out\renderer\assets\index-4641637a.js:2477:    this.lo = lo | 0;
out\renderer\assets\index-4641637a.js:2478:    this.hi = hi | 0;
out\renderer\assets\index-4641637a.js:2479:  }
out\renderer\assets\index-4641637a.js:2480:  static fromSquare(square) {
out\renderer\assets\index-4641637a.js:2481:    return square >= 32 ? new SquareSet(0, 1 << square - 32) : new SquareSet(1 << square, 0);
out\renderer\assets\index-4641637a.js:2482:  }
out\renderer\assets\index-4641637a.js:2483:  static fromRank(rank) {
out\renderer\assets\index-4641637a.js:2484:    return new SquareSet(255, 0).shl64(8 * rank);
out\renderer\assets\index-4641637a.js:2485:  }
out\renderer\assets\index-4641637a.js:2486:  static fromFile(file) {
out\renderer\assets\index-4641637a.js:2487:    return new SquareSet(16843009 << file, 16843009 << file);
out\renderer\assets\index-4641637a.js:2488:  }
out\renderer\assets\index-4641637a.js:2489:  static empty() {
out\renderer\assets\index-4641637a.js:2490:    return new SquareSet(0, 0);
out\renderer\assets\index-4641637a.js:2491:  }
out\renderer\assets\index-4641637a.js:2492:  static full() {
out\renderer\assets\index-4641637a.js:2493:    return new SquareSet(4294967295, 4294967295);
out\renderer\assets\index-4641637a.js:2494:  }
out\renderer\assets\index-4641637a.js:2495:  static corners() {
out\renderer\assets\index-4641637a.js:2496:    return new SquareSet(129, 2164260864);
out\renderer\assets\index-4641637a.js:2497:  }
out\renderer\assets\index-4641637a.js:2498:  static center() {
out\renderer\assets\index-4641637a.js:2499:    return new SquareSet(402653184, 24);
out\renderer\assets\index-4641637a.js:2500:  }
out\renderer\assets\index-4641637a.js:2501:  static backranks() {
out\renderer\assets\index-4641637a.js:2502:    return new SquareSet(255, 4278190080);
out\renderer\assets\index-4641637a.js:2503:  }
out\renderer\assets\index-4641637a.js:2504:  static backrank(color) {
out\renderer\assets\index-4641637a.js:2505:    return color === "white" ? new SquareSet(255, 0) : new SquareSet(0, 4278190080);
out\renderer\assets\index-4641637a.js:2506:  }
out\renderer\assets\index-4641637a.js:2507:  static lightSquares() {
out\renderer\assets\index-4641637a.js:2508:    return new SquareSet(1437226410, 1437226410);
out\renderer\assets\index-4641637a.js:2509:  }
out\renderer\assets\index-4641637a.js:2510:  static darkSquares() {
out\renderer\assets\index-4641637a.js:2511:    return new SquareSet(2857740885, 2857740885);
out\renderer\assets\index-4641637a.js:2512:  }
out\renderer\assets\index-4641637a.js:2513:  complement() {
out\renderer\assets\index-4641637a.js:2514:    return new SquareSet(~this.lo, ~this.hi);
out\renderer\assets\index-4641637a.js:2515:  }
out\renderer\assets\index-4641637a.js:2516:  xor(other) {
out\renderer\assets\index-4641637a.js:2517:    return new SquareSet(this.lo ^ other.lo, this.hi ^ other.hi);
out\renderer\assets\index-4641637a.js:2518:  }
out\renderer\assets\index-4641637a.js:2519:  union(other) {
out\renderer\assets\index-4641637a.js:2520:    return new SquareSet(this.lo | other.lo, this.hi | other.hi);
out\renderer\assets\index-4641637a.js:2521:  }
out\renderer\assets\index-4641637a.js:2522:  intersect(other) {
out\renderer\assets\index-4641637a.js:2523:    return new SquareSet(this.lo & other.lo, this.hi & other.hi);
out\renderer\assets\index-4641637a.js:2524:  }
out\renderer\assets\index-4641637a.js:2525:  diff(other) {
out\renderer\assets\index-4641637a.js:2526:    return new SquareSet(this.lo & ~other.lo, this.hi & ~other.hi);
out\renderer\assets\index-4641637a.js:2527:  }
out\renderer\assets\index-4641637a.js:2528:  intersects(other) {
out\renderer\assets\index-4641637a.js:2529:    return this.intersect(other).nonEmpty();
out\renderer\assets\index-4641637a.js:2530:  }
out\renderer\assets\index-4641637a.js:2531:  isDisjoint(other) {
out\renderer\assets\index-4641637a.js:2532:    return this.intersect(other).isEmpty();
out\renderer\assets\index-4641637a.js:2533:  }
out\renderer\assets\index-4641637a.js:2534:  supersetOf(other) {
out\renderer\assets\index-4641637a.js:2535:    return other.diff(this).isEmpty();
out\renderer\assets\index-4641637a.js:2536:  }
out\renderer\assets\index-4641637a.js:2537:  subsetOf(other) {
out\renderer\assets\index-4641637a.js:2538:    return this.diff(other).isEmpty();
out\renderer\assets\index-4641637a.js:2539:  }
out\renderer\assets\index-4641637a.js:2540:  shr64(shift) {
out\renderer\assets\index-4641637a.js:2541:    if (shift >= 64)
out\renderer\assets\index-4641637a.js:2542:      return SquareSet.empty();
out\renderer\assets\index-4641637a.js:2543:    if (shift >= 32)
out\renderer\assets\index-4641637a.js:2544:      return new SquareSet(this.hi >>> shift - 32, 0);
out\renderer\assets\index-4641637a.js:2545:    if (shift > 0)
out\renderer\assets\index-4641637a.js:2546:      return new SquareSet(this.lo >>> shift ^ this.hi << 32 - shift, this.hi >>> shift);
out\renderer\assets\index-4641637a.js:2547:    return this;
out\renderer\assets\index-4641637a.js:2548:  }
out\renderer\assets\index-4641637a.js:2549:  shl64(shift) {
out\renderer\assets\index-4641637a.js:2550:    if (shift >= 64)
out\renderer\assets\index-4641637a.js:2551:      return SquareSet.empty();
out\renderer\assets\index-4641637a.js:2552:    if (shift >= 32)
out\renderer\assets\index-4641637a.js:2553:      return new SquareSet(0, this.lo << shift - 32);
out\renderer\assets\index-4641637a.js:2554:    if (shift > 0)
out\renderer\assets\index-4641637a.js:2555:      return new SquareSet(this.lo << shift, this.hi << shift ^ this.lo >>> 32 - shift);
out\renderer\assets\index-4641637a.js:2556:    return this;
out\renderer\assets\index-4641637a.js:2557:  }
out\renderer\assets\index-4641637a.js:2558:  bswap64() {
out\renderer\assets\index-4641637a.js:2559:    return new SquareSet(bswap32(this.hi), bswap32(this.lo));
out\renderer\assets\index-4641637a.js:2560:  }
out\renderer\assets\index-4641637a.js:2561:  rbit64() {
out\renderer\assets\index-4641637a.js:2562:    return new SquareSet(rbit32(this.hi), rbit32(this.lo));
out\renderer\assets\index-4641637a.js:2563:  }
out\renderer\assets\index-4641637a.js:2564:  minus64(other) {
out\renderer\assets\index-4641637a.js:2565:    const lo = this.lo - other.lo;
out\renderer\assets\index-4641637a.js:2566:    const c = (lo & other.lo & 1) + (other.lo >>> 1) + (lo >>> 1) >>> 31;
out\renderer\assets\index-4641637a.js:2567:    return new SquareSet(lo, this.hi - (other.hi + c));
out\renderer\assets\index-4641637a.js:2568:  }
out\renderer\assets\index-4641637a.js:2569:  equals(other) {
out\renderer\assets\index-4641637a.js:2570:    return this.lo === other.lo && this.hi === other.hi;
out\renderer\assets\index-4641637a.js:2571:  }
out\renderer\assets\index-4641637a.js:2572:  size() {
out\renderer\assets\index-4641637a.js:2573:    return popcnt32(this.lo) + popcnt32(this.hi);
out\renderer\assets\index-4641637a.js:2574:  }
out\renderer\assets\index-4641637a.js:2575:  isEmpty() {
out\renderer\assets\index-4641637a.js:2576:    return this.lo === 0 && this.hi === 0;
out\renderer\assets\index-4641637a.js:2577:  }
out\renderer\assets\index-4641637a.js:2578:  nonEmpty() {
out\renderer\assets\index-4641637a.js:2579:    return this.lo !== 0 || this.hi !== 0;
out\renderer\assets\index-4641637a.js:2580:  }
out\renderer\assets\index-4641637a.js:2581:  has(square) {
out\renderer\assets\index-4641637a.js:2582:    return (square >= 32 ? this.hi & 1 << square - 32 : this.lo & 1 << square) !== 0;
out\renderer\assets\index-4641637a.js:2583:  }
out\renderer\assets\index-4641637a.js:2584:  set(square, on) {
out\renderer\assets\index-4641637a.js:2585:    return on ? this.with(square) : this.without(square);
out\renderer\assets\index-4641637a.js:2586:  }
out\renderer\assets\index-4641637a.js:2587:  with(square) {
out\renderer\assets\index-4641637a.js:2588:    return square >= 32 ? new SquareSet(this.lo, this.hi | 1 << square - 32) : new SquareSet(this.lo | 1 << square, this.hi);
out\renderer\assets\index-4641637a.js:2589:  }
out\renderer\assets\index-4641637a.js:2590:  without(square) {
out\renderer\assets\index-4641637a.js:2591:    return square >= 32 ? new SquareSet(this.lo, this.hi & ~(1 << square - 32)) : new SquareSet(this.lo & ~(1 << square), this.hi);
out\renderer\assets\index-4641637a.js:2592:  }
out\renderer\assets\index-4641637a.js:2593:  toggle(square) {
out\renderer\assets\index-4641637a.js:2594:    return square >= 32 ? new SquareSet(this.lo, this.hi ^ 1 << square - 32) : new SquareSet(this.lo ^ 1 << square, this.hi);
out\renderer\assets\index-4641637a.js:2595:  }
out\renderer\assets\index-4641637a.js:2596:  last() {
out\renderer\assets\index-4641637a.js:2597:    if (this.hi !== 0)
out\renderer\assets\index-4641637a.js:2598:      return 63 - Math.clz32(this.hi);
out\renderer\assets\index-4641637a.js:2599:    if (this.lo !== 0)
out\renderer\assets\index-4641637a.js:2600:      return 31 - Math.clz32(this.lo);
out\renderer\assets\index-4641637a.js:2601:    return;
out\renderer\assets\index-4641637a.js:2602:  }
out\renderer\assets\index-4641637a.js:2603:  first() {
out\renderer\assets\index-4641637a.js:2604:    if (this.lo !== 0)
out\renderer\assets\index-4641637a.js:2605:      return 31 - Math.clz32(this.lo & -this.lo);
out\renderer\assets\index-4641637a.js:2606:    if (this.hi !== 0)
out\renderer\assets\index-4641637a.js:2607:      return 63 - Math.clz32(this.hi & -this.hi);
out\renderer\assets\index-4641637a.js:2608:    return;
out\renderer\assets\index-4641637a.js:2609:  }
out\renderer\assets\index-4641637a.js:2610:  withoutFirst() {
out\renderer\assets\index-4641637a.js:2611:    if (this.lo !== 0)
out\renderer\assets\index-4641637a.js:2612:      return new SquareSet(this.lo & this.lo - 1, this.hi);
out\renderer\assets\index-4641637a.js:2613:    return new SquareSet(0, this.hi & this.hi - 1);
out\renderer\assets\index-4641637a.js:2614:  }
out\renderer\assets\index-4641637a.js:2615:  moreThanOne() {
out\renderer\assets\index-4641637a.js:2616:    return this.hi !== 0 && this.lo !== 0 || (this.lo & this.lo - 1) !== 0 || (this.hi & this.hi - 1) !== 0;
out\renderer\assets\index-4641637a.js:2617:  }
out\renderer\assets\index-4641637a.js:2618:  singleSquare() {
out\renderer\assets\index-4641637a.js:2619:    return this.moreThanOne() ? void 0 : this.last();
out\renderer\assets\index-4641637a.js:2620:  }
out\renderer\assets\index-4641637a.js:2621:  *[Symbol.iterator]() {
out\renderer\assets\index-4641637a.js:2622:    let lo = this.lo;
out\renderer\assets\index-4641637a.js:2623:    let hi = this.hi;
out\renderer\assets\index-4641637a.js:2624:    while (lo !== 0) {
out\renderer\assets\index-4641637a.js:2625:      const idx = 31 - Math.clz32(lo & -lo);
out\renderer\assets\index-4641637a.js:2626:      lo ^= 1 << idx;
out\renderer\assets\index-4641637a.js:2627:      yield idx;
out\renderer\assets\index-4641637a.js:2628:    }
out\renderer\assets\index-4641637a.js:2629:    while (hi !== 0) {
out\renderer\assets\index-4641637a.js:2630:      const idx = 31 - Math.clz32(hi & -hi);
out\renderer\assets\index-4641637a.js:2631:      hi ^= 1 << idx;
out\renderer\assets\index-4641637a.js:2632:      yield 32 + idx;
out\renderer\assets\index-4641637a.js:2633:    }
out\renderer\assets\index-4641637a.js:2634:  }
out\renderer\assets\index-4641637a.js:2635:  *reversed() {
out\renderer\assets\index-4641637a.js:2636:    let lo = this.lo;
out\renderer\assets\index-4641637a.js:2637:    let hi = this.hi;
out\renderer\assets\index-4641637a.js:2638:    while (hi !== 0) {
out\renderer\assets\index-4641637a.js:2639:      const idx = 31 - Math.clz32(hi);
out\renderer\assets\index-4641637a.js:2640:      hi ^= 1 << idx;
out\renderer\assets\index-4641637a.js:2641:      yield 32 + idx;
out\renderer\assets\index-4641637a.js:2642:    }
out\renderer\assets\index-4641637a.js:2643:    while (lo !== 0) {
out\renderer\assets\index-4641637a.js:2644:      const idx = 31 - Math.clz32(lo);
out\renderer\assets\index-4641637a.js:2645:      lo ^= 1 << idx;
out\renderer\assets\index-4641637a.js:2646:      yield idx;
out\renderer\assets\index-4641637a.js:2647:    }
out\renderer\assets\index-4641637a.js:2648:  }
out\renderer\assets\index-4641637a.js:2649:}
out\renderer\assets\index-4641637a.js:2650:const computeRange = (square, deltas) => {
out\renderer\assets\index-4641637a.js:2651:  let range = SquareSet.empty();
out\renderer\assets\index-4641637a.js:2652:  for (const delta of deltas) {
out\renderer\assets\index-4641637a.js:2653:    const sq = square + delta;
out\renderer\assets\index-4641637a.js:2654:    if (0 <= sq && sq < 64 && Math.abs(squareFile(square) - squareFile(sq)) <= 2) {
out\renderer\assets\index-4641637a.js:2655:      range = range.with(sq);
out\renderer\assets\index-4641637a.js:2656:    }
out\renderer\assets\index-4641637a.js:2657:  }
out\renderer\assets\index-4641637a.js:2658:  return range;
out\renderer\assets\index-4641637a.js:2659:};
out\renderer\assets\index-4641637a.js:2660:const tabulate = (f) => {
out\renderer\assets\index-4641637a.js:2661:  const table = [];
out\renderer\assets\index-4641637a.js:2662:  for (let square = 0; square < 64; square++)
out\renderer\assets\index-4641637a.js:2663:    table[square] = f(square);
out\renderer\assets\index-4641637a.js:2664:  return table;
out\renderer\assets\index-4641637a.js:2665:};
out\renderer\assets\index-4641637a.js:2666:const KING_ATTACKS = tabulate((sq) => computeRange(sq, [-9, -8, -7, -1, 1, 7, 8, 9]));
out\renderer\assets\index-4641637a.js:2667:const KNIGHT_ATTACKS = tabulate((sq) => computeRange(sq, [-17, -15, -10, -6, 6, 10, 15, 17]));
out\renderer\assets\index-4641637a.js:2668:const PAWN_ATTACKS = {
out\renderer\assets\index-4641637a.js:2669:  white: tabulate((sq) => computeRange(sq, [7, 9])),
out\renderer\assets\index-4641637a.js:2670:  black: tabulate((sq) => computeRange(sq, [-7, -9]))
out\renderer\assets\index-4641637a.js:2671:};
out\renderer\assets\index-4641637a.js:2672:const kingAttacks = (square) => KING_ATTACKS[square];
out\renderer\assets\index-4641637a.js:2673:const knightAttacks = (square) => KNIGHT_ATTACKS[square];
out\renderer\assets\index-4641637a.js:2674:const pawnAttacks = (color, square) => PAWN_ATTACKS[color][square];
out\renderer\assets\index-4641637a.js:2675:const FILE_RANGE = tabulate((sq) => SquareSet.fromFile(squareFile(sq)).without(sq));
out\renderer\assets\index-4641637a.js:2676:const RANK_RANGE = tabulate((sq) => SquareSet.fromRank(squareRank(sq)).without(sq));
out\renderer\assets\index-4641637a.js:2677:const DIAG_RANGE = tabulate((sq) => {
out\renderer\assets\index-4641637a.js:2678:  const diag = new SquareSet(134480385, 2151686160);
out\renderer\assets\index-4641637a.js:2679:  const shift = 8 * (squareRank(sq) - squareFile(sq));
out\renderer\assets\index-4641637a.js:2680:  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);
out\renderer\assets\index-4641637a.js:2681:});
out\renderer\assets\index-4641637a.js:2682:const ANTI_DIAG_RANGE = tabulate((sq) => {
out\renderer\assets\index-4641637a.js:2683:  const diag = new SquareSet(270549120, 16909320);
out\renderer\assets\index-4641637a.js:2684:  const shift = 8 * (squareRank(sq) + squareFile(sq) - 7);
out\renderer\assets\index-4641637a.js:2685:  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);
out\renderer\assets\index-4641637a.js:2686:});
out\renderer\assets\index-4641637a.js:2687:const hyperbola = (bit, range, occupied) => {
out\renderer\assets\index-4641637a.js:2688:  let forward = occupied.intersect(range);
out\renderer\assets\index-4641637a.js:2689:  let reverse = forward.bswap64();
out\renderer\assets\index-4641637a.js:2690:  forward = forward.minus64(bit);
out\renderer\assets\index-4641637a.js:2691:  reverse = reverse.minus64(bit.bswap64());
out\renderer\assets\index-4641637a.js:2692:  return forward.xor(reverse.bswap64()).intersect(range);
out\renderer\assets\index-4641637a.js:2693:};
out\renderer\assets\index-4641637a.js:2694:const fileAttacks = (square, occupied) => hyperbola(SquareSet.fromSquare(square), FILE_RANGE[square], occupied);
out\renderer\assets\index-4641637a.js:2695:const rankAttacks = (square, occupied) => {
out\renderer\assets\index-4641637a.js:2696:  const range = RANK_RANGE[square];
out\renderer\assets\index-4641637a.js:2697:  let forward = occupied.intersect(range);
out\renderer\assets\index-4641637a.js:2698:  let reverse = forward.rbit64();
out\renderer\assets\index-4641637a.js:2699:  forward = forward.minus64(SquareSet.fromSquare(square));
out\renderer\assets\index-4641637a.js:2700:  reverse = reverse.minus64(SquareSet.fromSquare(63 - square));
out\renderer\assets\index-4641637a.js:2701:  return forward.xor(reverse.rbit64()).intersect(range);
out\renderer\assets\index-4641637a.js:2702:};
out\renderer\assets\index-4641637a.js:2703:const bishopAttacks = (square, occupied) => {
out\renderer\assets\index-4641637a.js:2704:  const bit = SquareSet.fromSquare(square);
out\renderer\assets\index-4641637a.js:2705:  return hyperbola(bit, DIAG_RANGE[square], occupied).xor(hyperbola(bit, ANTI_DIAG_RANGE[square], occupied));
out\renderer\assets\index-4641637a.js:2706:};
out\renderer\assets\index-4641637a.js:2707:const rookAttacks = (square, occupied) => fileAttacks(square, occupied).xor(rankAttacks(square, occupied));
out\renderer\assets\index-4641637a.js:2708:const queenAttacks = (square, occupied) => bishopAttacks(square, occupied).xor(rookAttacks(square, occupied));
out\renderer\assets\index-4641637a.js:2709:const ray = (a, b) => {
out\renderer\assets\index-4641637a.js:2710:  const other = SquareSet.fromSquare(b);
out\renderer\assets\index-4641637a.js:2711:  if (RANK_RANGE[a].intersects(other))
out\renderer\assets\index-4641637a.js:2712:    return RANK_RANGE[a].with(a);
out\renderer\assets\index-4641637a.js:2713:  if (ANTI_DIAG_RANGE[a].intersects(other))
out\renderer\assets\index-4641637a.js:2714:    return ANTI_DIAG_RANGE[a].with(a);
out\renderer\assets\index-4641637a.js:2715:  if (DIAG_RANGE[a].intersects(other))
out\renderer\assets\index-4641637a.js:2716:    return DIAG_RANGE[a].with(a);
out\renderer\assets\index-4641637a.js:2717:  if (FILE_RANGE[a].intersects(other))
out\renderer\assets\index-4641637a.js:2718:    return FILE_RANGE[a].with(a);
out\renderer\assets\index-4641637a.js:2719:  return SquareSet.empty();
out\renderer\assets\index-4641637a.js:2720:};
out\renderer\assets\index-4641637a.js:2721:const between = (a, b) => ray(a, b).intersect(SquareSet.full().shl64(a).xor(SquareSet.full().shl64(b))).withoutFirst();
out\renderer\assets\index-4641637a.js:2722:class Board {
out\renderer\assets\index-4641637a.js:2723:  constructor() {
out\renderer\assets\index-4641637a.js:2724:  }
out\renderer\assets\index-4641637a.js:2725:  static default() {
out\renderer\assets\index-4641637a.js:2726:    const board = new Board();
out\renderer\assets\index-4641637a.js:2727:    board.reset();
out\renderer\assets\index-4641637a.js:2728:    return board;
out\renderer\assets\index-4641637a.js:2729:  }
out\renderer\assets\index-4641637a.js:2730:  /**
out\renderer\assets\index-4641637a.js:2731:   * Resets all pieces to the default starting position for standard chess.
out\renderer\assets\index-4641637a.js:2732:   */
out\renderer\assets\index-4641637a.js:2733:  reset() {
out\renderer\assets\index-4641637a.js:2734:    this.occupied = new SquareSet(65535, 4294901760);
out\renderer\assets\index-4641637a.js:2735:    this.promoted = SquareSet.empty();
out\renderer\assets\index-4641637a.js:2736:    this.white = new SquareSet(65535, 0);
out\renderer\assets\index-4641637a.js:2737:    this.black = new SquareSet(0, 4294901760);
out\renderer\assets\index-4641637a.js:2738:    this.pawn = new SquareSet(65280, 16711680);
out\renderer\assets\index-4641637a.js:2739:    this.knight = new SquareSet(66, 1107296256);
out\renderer\assets\index-4641637a.js:2740:    this.bishop = new SquareSet(36, 603979776);
out\renderer\assets\index-4641637a.js:2741:    this.rook = new SquareSet(129, 2164260864);
out\renderer\assets\index-4641637a.js:2742:    this.queen = new SquareSet(8, 134217728);
out\renderer\assets\index-4641637a.js:2743:    this.king = new SquareSet(16, 268435456);
out\renderer\assets\index-4641637a.js:2744:  }
out\renderer\assets\index-4641637a.js:2745:  static empty() {
out\renderer\assets\index-4641637a.js:2746:    const board = new Board();
out\renderer\assets\index-4641637a.js:2747:    board.clear();
out\renderer\assets\index-4641637a.js:2748:    return board;
out\renderer\assets\index-4641637a.js:2749:  }
out\renderer\assets\index-4641637a.js:2750:  clear() {
out\renderer\assets\index-4641637a.js:2751:    this.occupied = SquareSet.empty();
out\renderer\assets\index-4641637a.js:2752:    this.promoted = SquareSet.empty();
out\renderer\assets\index-4641637a.js:2753:    for (const color of COLORS)
out\renderer\assets\index-4641637a.js:2754:      this[color] = SquareSet.empty();
out\renderer\assets\index-4641637a.js:2755:    for (const role of ROLES)
out\renderer\assets\index-4641637a.js:2756:      this[role] = SquareSet.empty();
out\renderer\assets\index-4641637a.js:2757:  }
out\renderer\assets\index-4641637a.js:2758:  clone() {
out\renderer\assets\index-4641637a.js:2759:    const board = new Board();
out\renderer\assets\index-4641637a.js:2760:    board.occupied = this.occupied;
out\renderer\assets\index-4641637a.js:2761:    board.promoted = this.promoted;
out\renderer\assets\index-4641637a.js:2762:    for (const color of COLORS)
out\renderer\assets\index-4641637a.js:2763:      board[color] = this[color];
out\renderer\assets\index-4641637a.js:2764:    for (const role of ROLES)
out\renderer\assets\index-4641637a.js:2765:      board[role] = this[role];
out\renderer\assets\index-4641637a.js:2766:    return board;
out\renderer\assets\index-4641637a.js:2767:  }
out\renderer\assets\index-4641637a.js:2768:  getColor(square) {
out\renderer\assets\index-4641637a.js:2769:    if (this.white.has(square))
out\renderer\assets\index-4641637a.js:2770:      return "white";
out\renderer\assets\index-4641637a.js:2771:    if (this.black.has(square))
out\renderer\assets\index-4641637a.js:2772:      return "black";
out\renderer\assets\index-4641637a.js:2773:    return;
out\renderer\assets\index-4641637a.js:2774:  }
out\renderer\assets\index-4641637a.js:2775:  getRole(square) {
out\renderer\assets\index-4641637a.js:2776:    for (const role of ROLES) {
out\renderer\assets\index-4641637a.js:2777:      if (this[role].has(square))
out\renderer\assets\index-4641637a.js:2778:        return role;
out\renderer\assets\index-4641637a.js:2779:    }
out\renderer\assets\index-4641637a.js:2780:    return;
out\renderer\assets\index-4641637a.js:2781:  }
out\renderer\assets\index-4641637a.js:2782:  get(square) {
out\renderer\assets\index-4641637a.js:2783:    const color = this.getColor(square);
out\renderer\assets\index-4641637a.js:2784:    if (!color)
out\renderer\assets\index-4641637a.js:2785:      return;
out\renderer\assets\index-4641637a.js:2786:    const role = this.getRole(square);
out\renderer\assets\index-4641637a.js:2787:    const promoted = this.promoted.has(square);
out\renderer\assets\index-4641637a.js:2788:    return { color, role, promoted };
out\renderer\assets\index-4641637a.js:2789:  }
out\renderer\assets\index-4641637a.js:2790:  /**
out\renderer\assets\index-4641637a.js:2791:   * Removes and returns the piece from the given `square`, if any.
out\renderer\assets\index-4641637a.js:2792:   */
out\renderer\assets\index-4641637a.js:2793:  take(square) {
out\renderer\assets\index-4641637a.js:2794:    const piece = this.get(square);
out\renderer\assets\index-4641637a.js:2795:    if (piece) {
out\renderer\assets\index-4641637a.js:2796:      this.occupied = this.occupied.without(square);
out\renderer\assets\index-4641637a.js:2797:      this[piece.color] = this[piece.color].without(square);
out\renderer\assets\index-4641637a.js:2798:      this[piece.role] = this[piece.role].without(square);
out\renderer\assets\index-4641637a.js:2799:      if (piece.promoted)
out\renderer\assets\index-4641637a.js:2800:        this.promoted = this.promoted.without(square);
out\renderer\assets\index-4641637a.js:2801:    }
out\renderer\assets\index-4641637a.js:2802:    return piece;
out\renderer\assets\index-4641637a.js:2803:  }
out\renderer\assets\index-4641637a.js:2804:  /**
out\renderer\assets\index-4641637a.js:2805:   * Put `piece` onto `square`, potentially replacing an existing piece.
out\renderer\assets\index-4641637a.js:2806:   * Returns the existing piece, if any.
out\renderer\assets\index-4641637a.js:2807:   */
out\renderer\assets\index-4641637a.js:2808:  set(square, piece) {
out\renderer\assets\index-4641637a.js:2809:    const old = this.take(square);
out\renderer\assets\index-4641637a.js:2810:    this.occupied = this.occupied.with(square);
out\renderer\assets\index-4641637a.js:2811:    this[piece.color] = this[piece.color].with(square);
out\renderer\assets\index-4641637a.js:2812:    this[piece.role] = this[piece.role].with(square);
out\renderer\assets\index-4641637a.js:2813:    if (piece.promoted)
out\renderer\assets\index-4641637a.js:2814:      this.promoted = this.promoted.with(square);
out\renderer\assets\index-4641637a.js:2815:    return old;
out\renderer\assets\index-4641637a.js:2816:  }
out\renderer\assets\index-4641637a.js:2817:  has(square) {
out\renderer\assets\index-4641637a.js:2818:    return this.occupied.has(square);
out\renderer\assets\index-4641637a.js:2819:  }
out\renderer\assets\index-4641637a.js:2820:  *[Symbol.iterator]() {
out\renderer\assets\index-4641637a.js:2821:    for (const square of this.occupied) {
out\renderer\assets\index-4641637a.js:2822:      yield [square, this.get(square)];
out\renderer\assets\index-4641637a.js:2823:    }
out\renderer\assets\index-4641637a.js:2824:  }
out\renderer\assets\index-4641637a.js:2825:  pieces(color, role) {
out\renderer\assets\index-4641637a.js:2826:    return this[color].intersect(this[role]);
out\renderer\assets\index-4641637a.js:2827:  }
out\renderer\assets\index-4641637a.js:2828:  rooksAndQueens() {
out\renderer\assets\index-4641637a.js:2829:    return this.rook.union(this.queen);
out\renderer\assets\index-4641637a.js:2830:  }
out\renderer\assets\index-4641637a.js:2831:  bishopsAndQueens() {
out\renderer\assets\index-4641637a.js:2832:    return this.bishop.union(this.queen);
out\renderer\assets\index-4641637a.js:2833:  }
out\renderer\assets\index-4641637a.js:2834:  /**
out\renderer\assets\index-4641637a.js:2835:   * Finds the unique king of the given `color`, if any.
out\renderer\assets\index-4641637a.js:2836:   */
out\renderer\assets\index-4641637a.js:2837:  kingOf(color) {
out\renderer\assets\index-4641637a.js:2838:    return this.pieces(color, "king").singleSquare();
out\renderer\assets\index-4641637a.js:2839:  }
out\renderer\assets\index-4641637a.js:2840:}
out\renderer\assets\index-4641637a.js:2841:class MaterialSide {
out\renderer\assets\index-4641637a.js:2842:  constructor() {
out\renderer\assets\index-4641637a.js:2843:  }
out\renderer\assets\index-4641637a.js:2844:  static empty() {
out\renderer\assets\index-4641637a.js:2845:    const m = new MaterialSide();
out\renderer\assets\index-4641637a.js:2846:    for (const role of ROLES)
out\renderer\assets\index-4641637a.js:2847:      m[role] = 0;
out\renderer\assets\index-4641637a.js:2848:    return m;
out\renderer\assets\index-4641637a.js:2849:  }
out\renderer\assets\index-4641637a.js:2850:  static fromBoard(board, color) {
out\renderer\assets\index-4641637a.js:2851:    const m = new MaterialSide();
out\renderer\assets\index-4641637a.js:2852:    for (const role of ROLES)
out\renderer\assets\index-4641637a.js:2853:      m[role] = board.pieces(color, role).size();
out\renderer\assets\index-4641637a.js:2854:    return m;
out\renderer\assets\index-4641637a.js:2855:  }
out\renderer\assets\index-4641637a.js:2856:  clone() {
out\renderer\assets\index-4641637a.js:2857:    const m = new MaterialSide();
out\renderer\assets\index-4641637a.js:2858:    for (const role of ROLES)
out\renderer\assets\index-4641637a.js:2859:      m[role] = this[role];
out\renderer\assets\index-4641637a.js:2860:    return m;
out\renderer\assets\index-4641637a.js:2861:  }
out\renderer\assets\index-4641637a.js:2862:  equals(other) {
out\renderer\assets\index-4641637a.js:2863:    return ROLES.every((role) => this[role] === other[role]);
out\renderer\assets\index-4641637a.js:2864:  }
out\renderer\assets\index-4641637a.js:2865:  add(other) {
out\renderer\assets\index-4641637a.js:2866:    const m = new MaterialSide();
out\renderer\assets\index-4641637a.js:2867:    for (const role of ROLES)
out\renderer\assets\index-4641637a.js:2868:      m[role] = this[role] + other[role];
out\renderer\assets\index-4641637a.js:2869:    return m;
out\renderer\assets\index-4641637a.js:2870:  }
out\renderer\assets\index-4641637a.js:2871:  nonEmpty() {
out\renderer\assets\index-4641637a.js:2872:    return ROLES.some((role) => this[role] > 0);
out\renderer\assets\index-4641637a.js:2873:  }
out\renderer\assets\index-4641637a.js:2874:  isEmpty() {
out\renderer\assets\index-4641637a.js:2875:    return !this.nonEmpty();
out\renderer\assets\index-4641637a.js:2876:  }
out\renderer\assets\index-4641637a.js:2877:  hasPawns() {
out\renderer\assets\index-4641637a.js:2878:    return this.pawn > 0;
out\renderer\assets\index-4641637a.js:2879:  }
out\renderer\assets\index-4641637a.js:2880:  hasNonPawns() {
out\renderer\assets\index-4641637a.js:2881:    return this.knight > 0 || this.bishop > 0 || this.rook > 0 || this.queen > 0 || this.king > 0;
out\renderer\assets\index-4641637a.js:2882:  }
out\renderer\assets\index-4641637a.js:2883:  size() {
out\renderer\assets\index-4641637a.js:2884:    return this.pawn + this.knight + this.bishop + this.rook + this.queen + this.king;
out\renderer\assets\index-4641637a.js:2885:  }
out\renderer\assets\index-4641637a.js:2886:}
out\renderer\assets\index-4641637a.js:2887:class Material {
out\renderer\assets\index-4641637a.js:2888:  constructor(white, black) {
out\renderer\assets\index-4641637a.js:2889:    this.white = white;
out\renderer\assets\index-4641637a.js:2890:    this.black = black;
out\renderer\assets\index-4641637a.js:2891:  }
out\renderer\assets\index-4641637a.js:2892:  static empty() {
out\renderer\assets\index-4641637a.js:2893:    return new Material(MaterialSide.empty(), MaterialSide.empty());
out\renderer\assets\index-4641637a.js:2894:  }
out\renderer\assets\index-4641637a.js:2895:  static fromBoard(board) {
out\renderer\assets\index-4641637a.js:2896:    return new Material(MaterialSide.fromBoard(board, "white"), MaterialSide.fromBoard(board, "black"));
out\renderer\assets\index-4641637a.js:2897:  }
out\renderer\assets\index-4641637a.js:2898:  clone() {
out\renderer\assets\index-4641637a.js:2899:    return new Material(this.white.clone(), this.black.clone());
out\renderer\assets\index-4641637a.js:2900:  }
out\renderer\assets\index-4641637a.js:2901:  equals(other) {
out\renderer\assets\index-4641637a.js:2902:    return this.white.equals(other.white) && this.black.equals(other.black);
out\renderer\assets\index-4641637a.js:2903:  }
out\renderer\assets\index-4641637a.js:2904:  add(other) {
out\renderer\assets\index-4641637a.js:2905:    return new Material(this.white.add(other.white), this.black.add(other.black));
out\renderer\assets\index-4641637a.js:2906:  }
out\renderer\assets\index-4641637a.js:2907:  count(role) {
out\renderer\assets\index-4641637a.js:2908:    return this.white[role] + this.black[role];
out\renderer\assets\index-4641637a.js:2909:  }
out\renderer\assets\index-4641637a.js:2910:  size() {
out\renderer\assets\index-4641637a.js:2911:    return this.white.size() + this.black.size();
out\renderer\assets\index-4641637a.js:2912:  }
out\renderer\assets\index-4641637a.js:2913:  isEmpty() {
out\renderer\assets\index-4641637a.js:2914:    return this.white.isEmpty() && this.black.isEmpty();
out\renderer\assets\index-4641637a.js:2915:  }
out\renderer\assets\index-4641637a.js:2916:  nonEmpty() {
out\renderer\assets\index-4641637a.js:2917:    return !this.isEmpty();
out\renderer\assets\index-4641637a.js:2918:  }
out\renderer\assets\index-4641637a.js:2919:  hasPawns() {
out\renderer\assets\index-4641637a.js:2920:    return this.white.hasPawns() || this.black.hasPawns();
out\renderer\assets\index-4641637a.js:2921:  }
out\renderer\assets\index-4641637a.js:2922:  hasNonPawns() {
out\renderer\assets\index-4641637a.js:2923:    return this.white.hasNonPawns() || this.black.hasNonPawns();
out\renderer\assets\index-4641637a.js:2924:  }
out\renderer\assets\index-4641637a.js:2925:}
out\renderer\assets\index-4641637a.js:2926:class RemainingChecks {
out\renderer\assets\index-4641637a.js:2927:  constructor(white, black) {
out\renderer\assets\index-4641637a.js:2928:    this.white = white;
out\renderer\assets\index-4641637a.js:2929:    this.black = black;
out\renderer\assets\index-4641637a.js:2930:  }
out\renderer\assets\index-4641637a.js:2931:  static default() {
out\renderer\assets\index-4641637a.js:2932:    return new RemainingChecks(3, 3);
out\renderer\assets\index-4641637a.js:2933:  }
out\renderer\assets\index-4641637a.js:2934:  clone() {
out\renderer\assets\index-4641637a.js:2935:    return new RemainingChecks(this.white, this.black);
out\renderer\assets\index-4641637a.js:2936:  }
out\renderer\assets\index-4641637a.js:2937:  equals(other) {
out\renderer\assets\index-4641637a.js:2938:    return this.white === other.white && this.black === other.black;
out\renderer\assets\index-4641637a.js:2939:  }
out\renderer\assets\index-4641637a.js:2940:}
out\renderer\assets\index-4641637a.js:2941:class r {
out\renderer\assets\index-4641637a.js:2942:  unwrap(r2, t2) {
out\renderer\assets\index-4641637a.js:2943:    const e2 = this._chain((t3) => n.ok(r2 ? r2(t3) : t3), (r3) => t2 ? n.ok(t2(r3)) : n.err(r3));
out\renderer\assets\index-4641637a.js:2944:    if (e2.isErr)
out\renderer\assets\index-4641637a.js:2945:      throw e2.error;
out\renderer\assets\index-4641637a.js:2946:    return e2.value;
out\renderer\assets\index-4641637a.js:2947:  }
out\renderer\assets\index-4641637a.js:2948:  map(r2, t2) {
out\renderer\assets\index-4641637a.js:2949:    return this._chain((t3) => n.ok(r2(t3)), (r3) => n.err(t2 ? t2(r3) : r3));
out\renderer\assets\index-4641637a.js:2950:  }
out\renderer\assets\index-4641637a.js:2951:  chain(r2, t2) {
out\renderer\assets\index-4641637a.js:2952:    return this._chain(r2, t2 || ((r3) => n.err(r3)));
out\renderer\assets\index-4641637a.js:2953:  }
out\renderer\assets\index-4641637a.js:2954:}
out\renderer\assets\index-4641637a.js:2955:class t extends r {
out\renderer\assets\index-4641637a.js:2956:  constructor(r2) {
out\renderer\assets\index-4641637a.js:2957:    super(), this.value = void 0, this.isOk = true, this.isErr = false, this.value = r2;
out\renderer\assets\index-4641637a.js:2958:  }
out\renderer\assets\index-4641637a.js:2959:  _chain(r2, t2) {
out\renderer\assets\index-4641637a.js:2960:    return r2(this.value);
out\renderer\assets\index-4641637a.js:2961:  }
out\renderer\assets\index-4641637a.js:2962:}
out\renderer\assets\index-4641637a.js:2963:class e extends r {
out\renderer\assets\index-4641637a.js:2964:  constructor(r2) {
out\renderer\assets\index-4641637a.js:2965:    super(), this.error = void 0, this.isOk = false, this.isErr = true, this.error = r2;
out\renderer\assets\index-4641637a.js:2966:  }
out\renderer\assets\index-4641637a.js:2967:  _chain(r2, t2) {
out\renderer\assets\index-4641637a.js:2968:    return t2(this.error);
out\renderer\assets\index-4641637a.js:2969:  }
out\renderer\assets\index-4641637a.js:2970:}
out\renderer\assets\index-4641637a.js:2971:var n;
out\renderer\assets\index-4641637a.js:2972:!function(r2) {
out\renderer\assets\index-4641637a.js:2973:  r2.ok = function(r3) {
out\renderer\assets\index-4641637a.js:2974:    return new t(r3);
out\renderer\assets\index-4641637a.js:2975:  }, r2.err = function(r3) {
out\renderer\assets\index-4641637a.js:2976:    return new e(r3 || new Error());
out\renderer\assets\index-4641637a.js:2977:  }, r2.all = function(t2) {
out\renderer\assets\index-4641637a.js:2978:    if (Array.isArray(t2)) {
out\renderer\assets\index-4641637a.js:2979:      const e3 = [];
out\renderer\assets\index-4641637a.js:2980:      for (let r3 = 0; r3 < t2.length; r3++) {
out\renderer\assets\index-4641637a.js:2981:        const n3 = t2[r3];
out\renderer\assets\index-4641637a.js:2982:        if (n3.isErr)
out\renderer\assets\index-4641637a.js:2983:          return n3;
out\renderer\assets\index-4641637a.js:2984:        e3.push(n3.value);
out\renderer\assets\index-4641637a.js:2985:      }
out\renderer\assets\index-4641637a.js:2986:      return r2.ok(e3);
out\renderer\assets\index-4641637a.js:2987:    }
out\renderer\assets\index-4641637a.js:2988:    const e2 = {}, n2 = Object.keys(t2);
out\renderer\assets\index-4641637a.js:2989:    for (let r3 = 0; r3 < n2.length; r3++) {
out\renderer\assets\index-4641637a.js:2990:      const s = t2[n2[r3]];
out\renderer\assets\index-4641637a.js:2991:      if (s.isErr)
out\renderer\assets\index-4641637a.js:2992:        return s;
out\renderer\assets\index-4641637a.js:2993:      e2[n2[r3]] = s.value;
out\renderer\assets\index-4641637a.js:2994:    }
out\renderer\assets\index-4641637a.js:2995:    return r2.ok(e2);
out\renderer\assets\index-4641637a.js:2996:  };
out\renderer\assets\index-4641637a.js:2997:}(n || (n = {}));
out\renderer\assets\index-4641637a.js:2998:var IllegalSetup;
out\renderer\assets\index-4641637a.js:2999:(function(IllegalSetup2) {
out\renderer\assets\index-4641637a.js:3000:  IllegalSetup2["Empty"] = "ERR_EMPTY";
out\renderer\assets\index-4641637a.js:3001:  IllegalSetup2["OppositeCheck"] = "ERR_OPPOSITE_CHECK";
out\renderer\assets\index-4641637a.js:3002:  IllegalSetup2["ImpossibleCheck"] = "ERR_IMPOSSIBLE_CHECK";
out\renderer\assets\index-4641637a.js:3003:  IllegalSetup2["PawnsOnBackrank"] = "ERR_PAWNS_ON_BACKRANK";
out\renderer\assets\index-4641637a.js:3004:  IllegalSetup2["Kings"] = "ERR_KINGS";
out\renderer\assets\index-4641637a.js:3005:  IllegalSetup2["Variant"] = "ERR_VARIANT";
out\renderer\assets\index-4641637a.js:3006:})(IllegalSetup || (IllegalSetup = {}));
out\renderer\assets\index-4641637a.js:3007:class PositionError extends Error {
out\renderer\assets\index-4641637a.js:3008:}
out\renderer\assets\index-4641637a.js:3009:const attacksTo = (square, attacker, board, occupied) => board[attacker].intersect(rookAttacks(square, occupied).intersect(board.rooksAndQueens()).union(bishopAttacks(square, occupied).intersect(board.bishopsAndQueens())).union(knightAttacks(square).intersect(board.knight)).union(kingAttacks(square).intersect(board.king)).union(pawnAttacks(opposite(attacker), square).intersect(board.pawn)));
out\renderer\assets\index-4641637a.js:3010:class Castles {
out\renderer\assets\index-4641637a.js:3011:  constructor() {
out\renderer\assets\index-4641637a.js:3012:  }
out\renderer\assets\index-4641637a.js:3013:  static default() {
out\renderer\assets\index-4641637a.js:3014:    const castles = new Castles();
out\renderer\assets\index-4641637a.js:3015:    castles.unmovedRooks = SquareSet.corners();
out\renderer\assets\index-4641637a.js:3016:    castles.rook = {
out\renderer\assets\index-4641637a.js:3017:      white: { a: 0, h: 7 },
out\renderer\assets\index-4641637a.js:3018:      black: { a: 56, h: 63 }
out\renderer\assets\index-4641637a.js:3019:    };
out\renderer\assets\index-4641637a.js:3020:    castles.path = {
out\renderer\assets\index-4641637a.js:3021:      white: { a: new SquareSet(14, 0), h: new SquareSet(96, 0) },
out\renderer\assets\index-4641637a.js:3022:      black: { a: new SquareSet(0, 234881024), h: new SquareSet(0, 1610612736) }
out\renderer\assets\index-4641637a.js:3023:    };
out\renderer\assets\index-4641637a.js:3024:    return castles;
out\renderer\assets\index-4641637a.js:3025:  }
out\renderer\assets\index-4641637a.js:3026:  static empty() {
out\renderer\assets\index-4641637a.js:3027:    const castles = new Castles();
out\renderer\assets\index-4641637a.js:3028:    castles.unmovedRooks = SquareSet.empty();
out\renderer\assets\index-4641637a.js:3029:    castles.rook = {
out\renderer\assets\index-4641637a.js:3030:      white: { a: void 0, h: void 0 },
out\renderer\assets\index-4641637a.js:3031:      black: { a: void 0, h: void 0 }
out\renderer\assets\index-4641637a.js:3032:    };
out\renderer\assets\index-4641637a.js:3033:    castles.path = {
out\renderer\assets\index-4641637a.js:3034:      white: { a: SquareSet.empty(), h: SquareSet.empty() },
out\renderer\assets\index-4641637a.js:3035:      black: { a: SquareSet.empty(), h: SquareSet.empty() }
out\renderer\assets\index-4641637a.js:3036:    };
out\renderer\assets\index-4641637a.js:3037:    return castles;
out\renderer\assets\index-4641637a.js:3038:  }
out\renderer\assets\index-4641637a.js:3039:  clone() {
out\renderer\assets\index-4641637a.js:3040:    const castles = new Castles();
out\renderer\assets\index-4641637a.js:3041:    castles.unmovedRooks = this.unmovedRooks;
out\renderer\assets\index-4641637a.js:3042:    castles.rook = {
out\renderer\assets\index-4641637a.js:3043:      white: { a: this.rook.white.a, h: this.rook.white.h },
out\renderer\assets\index-4641637a.js:3044:      black: { a: this.rook.black.a, h: this.rook.black.h }
out\renderer\assets\index-4641637a.js:3045:    };
out\renderer\assets\index-4641637a.js:3046:    castles.path = {
out\renderer\assets\index-4641637a.js:3047:      white: { a: this.path.white.a, h: this.path.white.h },
out\renderer\assets\index-4641637a.js:3048:      black: { a: this.path.black.a, h: this.path.black.h }
out\renderer\assets\index-4641637a.js:3049:    };
out\renderer\assets\index-4641637a.js:3050:    return castles;
out\renderer\assets\index-4641637a.js:3051:  }
out\renderer\assets\index-4641637a.js:3052:  add(color, side, king2, rook2) {
out\renderer\assets\index-4641637a.js:3053:    const kingTo = kingCastlesTo(color, side);
out\renderer\assets\index-4641637a.js:3054:    const rookTo = rookCastlesTo(color, side);
out\renderer\assets\index-4641637a.js:3055:    this.unmovedRooks = this.unmovedRooks.with(rook2);
out\renderer\assets\index-4641637a.js:3056:    this.rook[color][side] = rook2;
out\renderer\assets\index-4641637a.js:3057:    this.path[color][side] = between(rook2, rookTo).with(rookTo).union(between(king2, kingTo).with(kingTo)).without(king2).without(rook2);
out\renderer\assets\index-4641637a.js:3058:  }
out\renderer\assets\index-4641637a.js:3059:  static fromSetup(setup) {
out\renderer\assets\index-4641637a.js:3060:    const castles = Castles.empty();
out\renderer\assets\index-4641637a.js:3061:    const rooks = setup.unmovedRooks.intersect(setup.board.rook);
out\renderer\assets\index-4641637a.js:3062:    for (const color of COLORS) {
out\renderer\assets\index-4641637a.js:3063:      const backrank = SquareSet.backrank(color);
out\renderer\assets\index-4641637a.js:3064:      const king2 = setup.board.kingOf(color);
out\renderer\assets\index-4641637a.js:3065:      if (!defined(king2) || !backrank.has(king2))
out\renderer\assets\index-4641637a.js:3066:        continue;
out\renderer\assets\index-4641637a.js:3067:      const side = rooks.intersect(setup.board[color]).intersect(backrank);
out\renderer\assets\index-4641637a.js:3068:      const aSide = side.first();
out\renderer\assets\index-4641637a.js:3069:      if (defined(aSide) && aSide < king2)
out\renderer\assets\index-4641637a.js:3070:        castles.add(color, "a", king2, aSide);
out\renderer\assets\index-4641637a.js:3071:      const hSide = side.last();
out\renderer\assets\index-4641637a.js:3072:      if (defined(hSide) && king2 < hSide)
out\renderer\assets\index-4641637a.js:3073:        castles.add(color, "h", king2, hSide);
out\renderer\assets\index-4641637a.js:3074:    }
out\renderer\assets\index-4641637a.js:3075:    return castles;
out\renderer\assets\index-4641637a.js:3076:  }
out\renderer\assets\index-4641637a.js:3077:  discardRook(square) {
out\renderer\assets\index-4641637a.js:3078:    if (this.unmovedRooks.has(square)) {
out\renderer\assets\index-4641637a.js:3079:      this.unmovedRooks = this.unmovedRooks.without(square);
out\renderer\assets\index-4641637a.js:3080:      for (const color of COLORS) {
out\renderer\assets\index-4641637a.js:3081:        for (const side of CASTLING_SIDES) {
out\renderer\assets\index-4641637a.js:3082:          if (this.rook[color][side] === square)
out\renderer\assets\index-4641637a.js:3083:            this.rook[color][side] = void 0;
out\renderer\assets\index-4641637a.js:3084:        }
out\renderer\assets\index-4641637a.js:3085:      }
out\renderer\assets\index-4641637a.js:3086:    }
out\renderer\assets\index-4641637a.js:3087:  }
out\renderer\assets\index-4641637a.js:3088:  discardColor(color) {
out\renderer\assets\index-4641637a.js:3089:    this.unmovedRooks = this.unmovedRooks.diff(SquareSet.backrank(color));
out\renderer\assets\index-4641637a.js:3090:    this.rook[color].a = void 0;
out\renderer\assets\index-4641637a.js:3091:    this.rook[color].h = void 0;
out\renderer\assets\index-4641637a.js:3092:  }
out\renderer\assets\index-4641637a.js:3093:}
out\renderer\assets\index-4641637a.js:3094:class Position {
out\renderer\assets\index-4641637a.js:3095:  constructor(rules) {
out\renderer\assets\index-4641637a.js:3096:    this.rules = rules;
out\renderer\assets\index-4641637a.js:3097:  }
out\renderer\assets\index-4641637a.js:3098:  reset() {
out\renderer\assets\index-4641637a.js:3099:    this.board = Board.default();
out\renderer\assets\index-4641637a.js:3100:    this.pockets = void 0;
out\renderer\assets\index-4641637a.js:3101:    this.turn = "white";
out\renderer\assets\index-4641637a.js:3102:    this.castles = Castles.default();
out\renderer\assets\index-4641637a.js:3103:    this.epSquare = void 0;
out\renderer\assets\index-4641637a.js:3104:    this.remainingChecks = void 0;
out\renderer\assets\index-4641637a.js:3105:    this.halfmoves = 0;
out\renderer\assets\index-4641637a.js:3106:    this.fullmoves = 1;
out\renderer\assets\index-4641637a.js:3107:  }
out\renderer\assets\index-4641637a.js:3108:  setupUnchecked(setup) {
out\renderer\assets\index-4641637a.js:3109:    this.board = setup.board.clone();
out\renderer\assets\index-4641637a.js:3110:    this.board.promoted = SquareSet.empty();
out\renderer\assets\index-4641637a.js:3111:    this.pockets = void 0;
out\renderer\assets\index-4641637a.js:3112:    this.turn = setup.turn;
out\renderer\assets\index-4641637a.js:3113:    this.castles = Castles.fromSetup(setup);
out\renderer\assets\index-4641637a.js:3114:    this.epSquare = validEpSquare(this, setup.epSquare);
out\renderer\assets\index-4641637a.js:3115:    this.remainingChecks = void 0;
out\renderer\assets\index-4641637a.js:3116:    this.halfmoves = setup.halfmoves;
out\renderer\assets\index-4641637a.js:3117:    this.fullmoves = setup.fullmoves;
out\renderer\assets\index-4641637a.js:3118:  }
out\renderer\assets\index-4641637a.js:3130:  kingAttackers(square, attacker, occupied) {
out\renderer\assets\index-4641637a.js:3131:    return attacksTo(square, attacker, this.board, occupied);
out\renderer\assets\index-4641637a.js:3132:  }
out\renderer\assets\index-4641637a.js:3133:  playCaptureAt(square, captured) {
out\renderer\assets\index-4641637a.js:3134:    this.halfmoves = 0;
out\renderer\assets\index-4641637a.js:3135:    if (captured.role === "rook")
out\renderer\assets\index-4641637a.js:3136:      this.castles.discardRook(square);
out\renderer\assets\index-4641637a.js:3137:    if (this.pockets)
out\renderer\assets\index-4641637a.js:3138:      this.pockets[opposite(captured.color)][captured.promoted ? "pawn" : captured.role]++;
out\renderer\assets\index-4641637a.js:3139:  }
out\renderer\assets\index-4641637a.js:3140:  ctx() {
out\renderer\assets\index-4641637a.js:3141:    const variantEnd = this.isVariantEnd();
out\renderer\assets\index-4641637a.js:3142:    const king2 = this.board.kingOf(this.turn);
out\renderer\assets\index-4641637a.js:3143:    if (!defined(king2))
out\renderer\assets\index-4641637a.js:3144:      return { king: king2, blockers: SquareSet.empty(), checkers: SquareSet.empty(), variantEnd, mustCapture: false };
out\renderer\assets\index-4641637a.js:3145:    const snipers = rookAttacks(king2, SquareSet.empty()).intersect(this.board.rooksAndQueens()).union(bishopAttacks(king2, SquareSet.empty()).intersect(this.board.bishopsAndQueens())).intersect(this.board[opposite(this.turn)]);
out\renderer\assets\index-4641637a.js:3146:    let blockers = SquareSet.empty();
out\renderer\assets\index-4641637a.js:3147:    for (const sniper of snipers) {
out\renderer\assets\index-4641637a.js:3148:      const b = between(king2, sniper).intersect(this.board.occupied);
out\renderer\assets\index-4641637a.js:3149:      if (!b.moreThanOne())
out\renderer\assets\index-4641637a.js:3150:        blockers = blockers.union(b);
out\renderer\assets\index-4641637a.js:3151:    }
out\renderer\assets\index-4641637a.js:3152:    const checkers = this.kingAttackers(king2, opposite(this.turn), this.board.occupied);
out\renderer\assets\index-4641637a.js:3153:    return {
out\renderer\assets\index-4641637a.js:3154:      king: king2,
out\renderer\assets\index-4641637a.js:3155:      blockers,
out\renderer\assets\index-4641637a.js:3156:      checkers,
out\renderer\assets\index-4641637a.js:3157:      variantEnd,
out\renderer\assets\index-4641637a.js:3158:      mustCapture: false
out\renderer\assets\index-4641637a.js:3159:    };
out\renderer\assets\index-4641637a.js:3160:  }
out\renderer\assets\index-4641637a.js:3161:  clone() {
out\renderer\assets\index-4641637a.js:3162:    var _a, _b;
out\renderer\assets\index-4641637a.js:3163:    const pos = new this.constructor();
out\renderer\assets\index-4641637a.js:3164:    pos.board = this.board.clone();
out\renderer\assets\index-4641637a.js:3165:    pos.pockets = (_a = this.pockets) === null || _a === void 0 ? void 0 : _a.clone();
out\renderer\assets\index-4641637a.js:3166:    pos.turn = this.turn;
out\renderer\assets\index-4641637a.js:3167:    pos.castles = this.castles.clone();
out\renderer\assets\index-4641637a.js:3168:    pos.epSquare = this.epSquare;
out\renderer\assets\index-4641637a.js:3169:    pos.remainingChecks = (_b = this.remainingChecks) === null || _b === void 0 ? void 0 : _b.clone();
out\renderer\assets\index-4641637a.js:3170:    pos.halfmoves = this.halfmoves;
out\renderer\assets\index-4641637a.js:3171:    pos.fullmoves = this.fullmoves;
out\renderer\assets\index-4641637a.js:3172:    return pos;
out\renderer\assets\index-4641637a.js:3173:  }
out\renderer\assets\index-4641637a.js:3174:  validate(opts) {
out\renderer\assets\index-4641637a.js:3175:    if (this.board.occupied.isEmpty())
out\renderer\assets\index-4641637a.js:3176:      return n.err(new PositionError(IllegalSetup.Empty));
out\renderer\assets\index-4641637a.js:3177:    if (this.board.king.size() !== 2)
out\renderer\assets\index-4641637a.js:3178:      return n.err(new PositionError(IllegalSetup.Kings));
out\renderer\assets\index-4641637a.js:3179:    if (!defined(this.board.kingOf(this.turn)))
out\renderer\assets\index-4641637a.js:3180:      return n.err(new PositionError(IllegalSetup.Kings));
out\renderer\assets\index-4641637a.js:3181:    const otherKing = this.board.kingOf(opposite(this.turn));
out\renderer\assets\index-4641637a.js:3182:    if (!defined(otherKing))
out\renderer\assets\index-4641637a.js:3183:      return n.err(new PositionError(IllegalSetup.Kings));
out\renderer\assets\index-4641637a.js:3184:    if (this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty())
out\renderer\assets\index-4641637a.js:3185:      return n.err(new PositionError(IllegalSetup.OppositeCheck));
out\renderer\assets\index-4641637a.js:3186:    if (SquareSet.backranks().intersects(this.board.pawn))
out\renderer\assets\index-4641637a.js:3187:      return n.err(new PositionError(IllegalSetup.PawnsOnBackrank));
out\renderer\assets\index-4641637a.js:3188:    return (opts === null || opts === void 0 ? void 0 : opts.ignoreImpossibleCheck) ? n.ok(void 0) : this.validateCheckers();
out\renderer\assets\index-4641637a.js:3189:  }
out\renderer\assets\index-4641637a.js:3190:  validateCheckers() {
out\renderer\assets\index-4641637a.js:3191:    const ourKing = this.board.kingOf(this.turn);
out\renderer\assets\index-4641637a.js:3192:    if (defined(ourKing)) {
out\renderer\assets\index-4641637a.js:3193:      const checkers = this.kingAttackers(ourKing, opposite(this.turn), this.board.occupied);
out\renderer\assets\index-4641637a.js:3194:      if (checkers.nonEmpty()) {
out\renderer\assets\index-4641637a.js:3195:        if (defined(this.epSquare)) {
out\renderer\assets\index-4641637a.js:3196:          const pushedTo = this.epSquare ^ 8;
out\renderer\assets\index-4641637a.js:3197:          const pushedFrom = this.epSquare ^ 24;
out\renderer\assets\index-4641637a.js:3198:          if (checkers.moreThanOne() || checkers.first() !== pushedTo && this.kingAttackers(ourKing, opposite(this.turn), this.board.occupied.without(pushedTo).with(pushedFrom)).nonEmpty())
out\renderer\assets\index-4641637a.js:3199:            return n.err(new PositionError(IllegalSetup.ImpossibleCheck));
out\renderer\assets\index-4641637a.js:3200:        } else {
out\renderer\assets\index-4641637a.js:3201:          if (checkers.size() > 2 || checkers.size() === 2 && ray(checkers.first(), checkers.last()).has(ourKing))
out\renderer\assets\index-4641637a.js:3202:            return n.err(new PositionError(IllegalSetup.ImpossibleCheck));
out\renderer\assets\index-4641637a.js:3203:        }
out\renderer\assets\index-4641637a.js:3204:      }
out\renderer\assets\index-4641637a.js:3205:    }
out\renderer\assets\index-4641637a.js:3206:    return n.ok(void 0);
out\renderer\assets\index-4641637a.js:3207:  }
out\renderer\assets\index-4641637a.js:3208:  dropDests(_ctx) {
out\renderer\assets\index-4641637a.js:3209:    return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3210:  }
out\renderer\assets\index-4641637a.js:3211:  dests(square, ctx) {
out\renderer\assets\index-4641637a.js:3212:    ctx = ctx || this.ctx();
out\renderer\assets\index-4641637a.js:3213:    if (ctx.variantEnd)
out\renderer\assets\index-4641637a.js:3214:      return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3215:    const piece = this.board.get(square);
out\renderer\assets\index-4641637a.js:3216:    if (!piece || piece.color !== this.turn)
out\renderer\assets\index-4641637a.js:3217:      return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3218:    let pseudo, legal;
out\renderer\assets\index-4641637a.js:3219:    if (piece.role === "pawn") {
out\renderer\assets\index-4641637a.js:3220:      pseudo = pawnAttacks(this.turn, square).intersect(this.board[opposite(this.turn)]);
out\renderer\assets\index-4641637a.js:3221:      const delta = this.turn === "white" ? 8 : -8;
out\renderer\assets\index-4641637a.js:3222:      const step2 = square + delta;
out\renderer\assets\index-4641637a.js:3223:      if (0 <= step2 && step2 < 64 && !this.board.occupied.has(step2)) {
out\renderer\assets\index-4641637a.js:3224:        pseudo = pseudo.with(step2);
out\renderer\assets\index-4641637a.js:3225:        const canDoubleStep = this.turn === "white" ? square < 16 : square >= 64 - 16;
out\renderer\assets\index-4641637a.js:3226:        const doubleStep = step2 + delta;
out\renderer\assets\index-4641637a.js:3227:        if (canDoubleStep && !this.board.occupied.has(doubleStep)) {
out\renderer\assets\index-4641637a.js:3228:          pseudo = pseudo.with(doubleStep);
out\renderer\assets\index-4641637a.js:3229:        }
out\renderer\assets\index-4641637a.js:3230:      }
out\renderer\assets\index-4641637a.js:3231:      if (defined(this.epSquare) && canCaptureEp(this, square, ctx)) {
out\renderer\assets\index-4641637a.js:3232:        const pawn2 = this.epSquare - delta;
out\renderer\assets\index-4641637a.js:3233:        if (ctx.checkers.isEmpty() || ctx.checkers.singleSquare() === pawn2) {
out\renderer\assets\index-4641637a.js:3234:          legal = SquareSet.fromSquare(this.epSquare);
out\renderer\assets\index-4641637a.js:3235:        }
out\renderer\assets\index-4641637a.js:3236:      }
out\renderer\assets\index-4641637a.js:3237:    } else if (piece.role === "bishop")
out\renderer\assets\index-4641637a.js:3238:      pseudo = bishopAttacks(square, this.board.occupied);
out\renderer\assets\index-4641637a.js:3239:    else if (piece.role === "knight")
out\renderer\assets\index-4641637a.js:3240:      pseudo = knightAttacks(square);
out\renderer\assets\index-4641637a.js:3241:    else if (piece.role === "rook")
out\renderer\assets\index-4641637a.js:3242:      pseudo = rookAttacks(square, this.board.occupied);
out\renderer\assets\index-4641637a.js:3243:    else if (piece.role === "queen")
out\renderer\assets\index-4641637a.js:3244:      pseudo = queenAttacks(square, this.board.occupied);
out\renderer\assets\index-4641637a.js:3245:    else
out\renderer\assets\index-4641637a.js:3246:      pseudo = kingAttacks(square);
out\renderer\assets\index-4641637a.js:3247:    pseudo = pseudo.diff(this.board[this.turn]);
out\renderer\assets\index-4641637a.js:3248:    if (defined(ctx.king)) {
out\renderer\assets\index-4641637a.js:3249:      if (piece.role === "king") {
out\renderer\assets\index-4641637a.js:3250:        const occ = this.board.occupied.without(square);
out\renderer\assets\index-4641637a.js:3251:        for (const to of pseudo) {
out\renderer\assets\index-4641637a.js:3252:          if (this.kingAttackers(to, opposite(this.turn), occ).nonEmpty())
out\renderer\assets\index-4641637a.js:3253:            pseudo = pseudo.without(to);
out\renderer\assets\index-4641637a.js:3254:        }
out\renderer\assets\index-4641637a.js:3255:        return pseudo.union(castlingDest(this, "a", ctx)).union(castlingDest(this, "h", ctx));
out\renderer\assets\index-4641637a.js:3256:      }
out\renderer\assets\index-4641637a.js:3257:      if (ctx.checkers.nonEmpty()) {
out\renderer\assets\index-4641637a.js:3258:        const checker = ctx.checkers.singleSquare();
out\renderer\assets\index-4641637a.js:3259:        if (!defined(checker))
out\renderer\assets\index-4641637a.js:3260:          return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3261:        pseudo = pseudo.intersect(between(checker, ctx.king).with(checker));
out\renderer\assets\index-4641637a.js:3262:      }
out\renderer\assets\index-4641637a.js:3263:      if (ctx.blockers.has(square))
out\renderer\assets\index-4641637a.js:3264:        pseudo = pseudo.intersect(ray(square, ctx.king));
out\renderer\assets\index-4641637a.js:3265:    }
out\renderer\assets\index-4641637a.js:3266:    if (legal)
out\renderer\assets\index-4641637a.js:3267:      pseudo = pseudo.union(legal);
out\renderer\assets\index-4641637a.js:3268:    return pseudo;
out\renderer\assets\index-4641637a.js:3269:  }
out\renderer\assets\index-4641637a.js:3270:  isVariantEnd() {
out\renderer\assets\index-4641637a.js:3271:    return false;
out\renderer\assets\index-4641637a.js:3272:  }
out\renderer\assets\index-4641637a.js:3273:  variantOutcome(_ctx) {
out\renderer\assets\index-4641637a.js:3274:    return;
out\renderer\assets\index-4641637a.js:3275:  }
out\renderer\assets\index-4641637a.js:3276:  hasInsufficientMaterial(color) {
out\renderer\assets\index-4641637a.js:3277:    if (this.board[color].intersect(this.board.pawn.union(this.board.rooksAndQueens())).nonEmpty())
out\renderer\assets\index-4641637a.js:3278:      return false;
out\renderer\assets\index-4641637a.js:3279:    if (this.board[color].intersects(this.board.knight)) {
out\renderer\assets\index-4641637a.js:3280:      return this.board[color].size() <= 2 && this.board[opposite(color)].diff(this.board.king).diff(this.board.queen).isEmpty();
out\renderer\assets\index-4641637a.js:3281:    }
out\renderer\assets\index-4641637a.js:3282:    if (this.board[color].intersects(this.board.bishop)) {
out\renderer\assets\index-4641637a.js:3283:      const sameColor = !this.board.bishop.intersects(SquareSet.darkSquares()) || !this.board.bishop.intersects(SquareSet.lightSquares());
out\renderer\assets\index-4641637a.js:3284:      return sameColor && this.board.pawn.isEmpty() && this.board.knight.isEmpty();
out\renderer\assets\index-4641637a.js:3285:    }
out\renderer\assets\index-4641637a.js:3286:    return true;
out\renderer\assets\index-4641637a.js:3287:  }
out\renderer\assets\index-4641637a.js:3289:  toSetup() {
out\renderer\assets\index-4641637a.js:3290:    var _a, _b;
out\renderer\assets\index-4641637a.js:3291:    return {
out\renderer\assets\index-4641637a.js:3292:      board: this.board.clone(),
out\renderer\assets\index-4641637a.js:3293:      pockets: (_a = this.pockets) === null || _a === void 0 ? void 0 : _a.clone(),
out\renderer\assets\index-4641637a.js:3294:      turn: this.turn,
out\renderer\assets\index-4641637a.js:3295:      unmovedRooks: this.castles.unmovedRooks,
out\renderer\assets\index-4641637a.js:3296:      epSquare: legalEpSquare(this),
out\renderer\assets\index-4641637a.js:3297:      remainingChecks: (_b = this.remainingChecks) === null || _b === void 0 ? void 0 : _b.clone(),
out\renderer\assets\index-4641637a.js:3298:      halfmoves: Math.min(this.halfmoves, 150),
out\renderer\assets\index-4641637a.js:3299:      fullmoves: Math.min(Math.max(this.fullmoves, 1), 9999)
out\renderer\assets\index-4641637a.js:3300:    };
out\renderer\assets\index-4641637a.js:3301:  }
out\renderer\assets\index-4641637a.js:3302:  isInsufficientMaterial() {
out\renderer\assets\index-4641637a.js:3303:    return COLORS.every((color) => this.hasInsufficientMaterial(color));
out\renderer\assets\index-4641637a.js:3304:  }
out\renderer\assets\index-4641637a.js:3305:  hasDests(ctx) {
out\renderer\assets\index-4641637a.js:3306:    ctx = ctx || this.ctx();
out\renderer\assets\index-4641637a.js:3307:    for (const square of this.board[this.turn]) {
out\renderer\assets\index-4641637a.js:3308:      if (this.dests(square, ctx).nonEmpty())
out\renderer\assets\index-4641637a.js:3309:        return true;
out\renderer\assets\index-4641637a.js:3310:    }
out\renderer\assets\index-4641637a.js:3311:    return this.dropDests(ctx).nonEmpty();
out\renderer\assets\index-4641637a.js:3312:  }
out\renderer\assets\index-4641637a.js:3313:  isLegal(move2, ctx) {
out\renderer\assets\index-4641637a.js:3314:    if (isDrop(move2)) {
out\renderer\assets\index-4641637a.js:3315:      if (!this.pockets || this.pockets[this.turn][move2.role] <= 0)
out\renderer\assets\index-4641637a.js:3316:        return false;
out\renderer\assets\index-4641637a.js:3317:      if (move2.role === "pawn" && SquareSet.backranks().has(move2.to))
out\renderer\assets\index-4641637a.js:3318:        return false;
out\renderer\assets\index-4641637a.js:3319:      return this.dropDests(ctx).has(move2.to);
out\renderer\assets\index-4641637a.js:3320:    } else {
out\renderer\assets\index-4641637a.js:3321:      if (move2.promotion === "pawn")
out\renderer\assets\index-4641637a.js:3322:        return false;
out\renderer\assets\index-4641637a.js:3323:      if (move2.promotion === "king" && this.rules !== "antichess")
out\renderer\assets\index-4641637a.js:3324:        return false;
out\renderer\assets\index-4641637a.js:3325:      if (!!move2.promotion !== (this.board.pawn.has(move2.from) && SquareSet.backranks().has(move2.to)))
out\renderer\assets\index-4641637a.js:3326:        return false;
out\renderer\assets\index-4641637a.js:3327:      const dests = this.dests(move2.from, ctx);
out\renderer\assets\index-4641637a.js:3328:      return dests.has(move2.to) || dests.has(normalizeMove(this, move2).to);
out\renderer\assets\index-4641637a.js:3329:    }
out\renderer\assets\index-4641637a.js:3330:  }
out\renderer\assets\index-4641637a.js:3331:  isCheck() {
out\renderer\assets\index-4641637a.js:3332:    const king2 = this.board.kingOf(this.turn);
out\renderer\assets\index-4641637a.js:3333:    return defined(king2) && this.kingAttackers(king2, opposite(this.turn), this.board.occupied).nonEmpty();
out\renderer\assets\index-4641637a.js:3334:  }
out\renderer\assets\index-4641637a.js:3335:  isEnd(ctx) {
out\renderer\assets\index-4641637a.js:3336:    if (ctx ? ctx.variantEnd : this.isVariantEnd())
out\renderer\assets\index-4641637a.js:3337:      return true;
out\renderer\assets\index-4641637a.js:3338:    return this.isInsufficientMaterial() || !this.hasDests(ctx);
out\renderer\assets\index-4641637a.js:3339:  }
out\renderer\assets\index-4641637a.js:3340:  isCheckmate(ctx) {
out\renderer\assets\index-4641637a.js:3341:    ctx = ctx || this.ctx();
out\renderer\assets\index-4641637a.js:3342:    return !ctx.variantEnd && ctx.checkers.nonEmpty() && !this.hasDests(ctx);
out\renderer\assets\index-4641637a.js:3343:  }
out\renderer\assets\index-4641637a.js:3344:  isStalemate(ctx) {
out\renderer\assets\index-4641637a.js:3345:    ctx = ctx || this.ctx();
out\renderer\assets\index-4641637a.js:3346:    return !ctx.variantEnd && ctx.checkers.isEmpty() && !this.hasDests(ctx);
out\renderer\assets\index-4641637a.js:3347:  }
out\renderer\assets\index-4641637a.js:3348:  outcome(ctx) {
out\renderer\assets\index-4641637a.js:3349:    const variantOutcome = this.variantOutcome(ctx);
out\renderer\assets\index-4641637a.js:3350:    if (variantOutcome)
out\renderer\assets\index-4641637a.js:3351:      return variantOutcome;
out\renderer\assets\index-4641637a.js:3352:    ctx = ctx || this.ctx();
out\renderer\assets\index-4641637a.js:3353:    if (this.isCheckmate(ctx))
out\renderer\assets\index-4641637a.js:3354:      return { winner: opposite(this.turn) };
out\renderer\assets\index-4641637a.js:3355:    else if (this.isInsufficientMaterial() || this.isStalemate(ctx))
out\renderer\assets\index-4641637a.js:3356:      return { winner: void 0 };
out\renderer\assets\index-4641637a.js:3357:    else
out\renderer\assets\index-4641637a.js:3358:      return;
out\renderer\assets\index-4641637a.js:3359:  }
out\renderer\assets\index-4641637a.js:3360:  allDests(ctx) {
out\renderer\assets\index-4641637a.js:3361:    ctx = ctx || this.ctx();
out\renderer\assets\index-4641637a.js:3362:    const d = /* @__PURE__ */ new Map();
out\renderer\assets\index-4641637a.js:3363:    if (ctx.variantEnd)
out\renderer\assets\index-4641637a.js:3364:      return d;
out\renderer\assets\index-4641637a.js:3365:    for (const square of this.board[this.turn]) {
out\renderer\assets\index-4641637a.js:3366:      d.set(square, this.dests(square, ctx));
out\renderer\assets\index-4641637a.js:3367:    }
out\renderer\assets\index-4641637a.js:3368:    return d;
out\renderer\assets\index-4641637a.js:3369:  }
out\renderer\assets\index-4641637a.js:3370:  play(move2) {
out\renderer\assets\index-4641637a.js:3371:    const turn = this.turn;
out\renderer\assets\index-4641637a.js:3372:    const epSquare = this.epSquare;
out\renderer\assets\index-4641637a.js:3373:    const castling = castlingSide(this, move2);
out\renderer\assets\index-4641637a.js:3374:    this.epSquare = void 0;
out\renderer\assets\index-4641637a.js:3375:    this.halfmoves += 1;
out\renderer\assets\index-4641637a.js:3376:    if (turn === "black")
out\renderer\assets\index-4641637a.js:3377:      this.fullmoves += 1;
out\renderer\assets\index-4641637a.js:3378:    this.turn = opposite(turn);
out\renderer\assets\index-4641637a.js:3379:    if (isDrop(move2)) {
out\renderer\assets\index-4641637a.js:3380:      this.board.set(move2.to, { role: move2.role, color: turn });
out\renderer\assets\index-4641637a.js:3381:      if (this.pockets)
out\renderer\assets\index-4641637a.js:3382:        this.pockets[turn][move2.role]--;
out\renderer\assets\index-4641637a.js:3383:      if (move2.role === "pawn")
out\renderer\assets\index-4641637a.js:3384:        this.halfmoves = 0;
out\renderer\assets\index-4641637a.js:3385:    } else {
out\renderer\assets\index-4641637a.js:3386:      const piece = this.board.take(move2.from);
out\renderer\assets\index-4641637a.js:3387:      if (!piece)
out\renderer\assets\index-4641637a.js:3388:        return;
out\renderer\assets\index-4641637a.js:3389:      let epCapture;
out\renderer\assets\index-4641637a.js:3390:      if (piece.role === "pawn") {
out\renderer\assets\index-4641637a.js:3391:        this.halfmoves = 0;
out\renderer\assets\index-4641637a.js:3392:        if (move2.to === epSquare) {
out\renderer\assets\index-4641637a.js:3393:          epCapture = this.board.take(move2.to + (turn === "white" ? -8 : 8));
out\renderer\assets\index-4641637a.js:3394:        }
out\renderer\assets\index-4641637a.js:3395:        const delta = move2.from - move2.to;
out\renderer\assets\index-4641637a.js:3396:        if (Math.abs(delta) === 16 && 8 <= move2.from && move2.from <= 55) {
out\renderer\assets\index-4641637a.js:3397:          this.epSquare = move2.from + move2.to >> 1;
out\renderer\assets\index-4641637a.js:3398:        }
out\renderer\assets\index-4641637a.js:3399:        if (move2.promotion) {
out\renderer\assets\index-4641637a.js:3400:          piece.role = move2.promotion;
out\renderer\assets\index-4641637a.js:3401:          piece.promoted = !!this.pockets;
out\renderer\assets\index-4641637a.js:3402:        }
out\renderer\assets\index-4641637a.js:3403:      } else if (piece.role === "rook") {
out\renderer\assets\index-4641637a.js:3404:        this.castles.discardRook(move2.from);
out\renderer\assets\index-4641637a.js:3405:      } else if (piece.role === "king") {
out\renderer\assets\index-4641637a.js:3406:        if (castling) {
out\renderer\assets\index-4641637a.js:3407:          const rookFrom = this.castles.rook[turn][castling];
out\renderer\assets\index-4641637a.js:3408:          if (defined(rookFrom)) {
out\renderer\assets\index-4641637a.js:3409:            const rook2 = this.board.take(rookFrom);
out\renderer\assets\index-4641637a.js:3410:            this.board.set(kingCastlesTo(turn, castling), piece);
out\renderer\assets\index-4641637a.js:3411:            if (rook2)
out\renderer\assets\index-4641637a.js:3412:              this.board.set(rookCastlesTo(turn, castling), rook2);
out\renderer\assets\index-4641637a.js:3413:          }
out\renderer\assets\index-4641637a.js:3414:        }
out\renderer\assets\index-4641637a.js:3415:        this.castles.discardColor(turn);
out\renderer\assets\index-4641637a.js:3416:      }
out\renderer\assets\index-4641637a.js:3417:      if (!castling) {
out\renderer\assets\index-4641637a.js:3418:        const capture = this.board.set(move2.to, piece) || epCapture;
out\renderer\assets\index-4641637a.js:3419:        if (capture)
out\renderer\assets\index-4641637a.js:3420:          this.playCaptureAt(move2.to, capture);
out\renderer\assets\index-4641637a.js:3421:      }
out\renderer\assets\index-4641637a.js:3422:    }
out\renderer\assets\index-4641637a.js:3423:    if (this.remainingChecks) {
out\renderer\assets\index-4641637a.js:3424:      if (this.isCheck())
out\renderer\assets\index-4641637a.js:3425:        this.remainingChecks[turn] = Math.max(this.remainingChecks[turn] - 1, 0);
out\renderer\assets\index-4641637a.js:3426:    }
out\renderer\assets\index-4641637a.js:3427:  }
out\renderer\assets\index-4641637a.js:3428:}
out\renderer\assets\index-4641637a.js:3429:class Chess extends Position {
out\renderer\assets\index-4641637a.js:3430:  constructor() {
out\renderer\assets\index-4641637a.js:3431:    super("chess");
out\renderer\assets\index-4641637a.js:3432:  }
out\renderer\assets\index-4641637a.js:3433:  static default() {
out\renderer\assets\index-4641637a.js:3434:    const pos = new this();
out\renderer\assets\index-4641637a.js:3435:    pos.reset();
out\renderer\assets\index-4641637a.js:3436:    return pos;
out\renderer\assets\index-4641637a.js:3437:  }
out\renderer\assets\index-4641637a.js:3438:  static fromSetup(setup, opts) {
out\renderer\assets\index-4641637a.js:3439:    const pos = new this();
out\renderer\assets\index-4641637a.js:3440:    pos.setupUnchecked(setup);
out\renderer\assets\index-4641637a.js:3441:    return pos.validate(opts).map((_) => pos);
out\renderer\assets\index-4641637a.js:3442:  }
out\renderer\assets\index-4641637a.js:3443:  clone() {
out\renderer\assets\index-4641637a.js:3444:    return super.clone();
out\renderer\assets\index-4641637a.js:3445:  }
out\renderer\assets\index-4641637a.js:3446:}
out\renderer\assets\index-4641637a.js:3447:const validEpSquare = (pos, square) => {
out\renderer\assets\index-4641637a.js:3448:  if (!defined(square))
out\renderer\assets\index-4641637a.js:3449:    return;
out\renderer\assets\index-4641637a.js:3450:  const epRank = pos.turn === "white" ? 5 : 2;
out\renderer\assets\index-4641637a.js:3451:  const forward = pos.turn === "white" ? 8 : -8;
out\renderer\assets\index-4641637a.js:3452:  if (squareRank(square) !== epRank)
out\renderer\assets\index-4641637a.js:3453:    return;
out\renderer\assets\index-4641637a.js:3454:  if (pos.board.occupied.has(square + forward))
out\renderer\assets\index-4641637a.js:3455:    return;
out\renderer\assets\index-4641637a.js:3456:  const pawn2 = square - forward;
out\renderer\assets\index-4641637a.js:3457:  if (!pos.board.pawn.has(pawn2) || !pos.board[opposite(pos.turn)].has(pawn2))
out\renderer\assets\index-4641637a.js:3458:    return;
out\renderer\assets\index-4641637a.js:3459:  return square;
out\renderer\assets\index-4641637a.js:3460:};
out\renderer\assets\index-4641637a.js:3461:const legalEpSquare = (pos) => {
out\renderer\assets\index-4641637a.js:3462:  if (!defined(pos.epSquare))
out\renderer\assets\index-4641637a.js:3463:    return;
out\renderer\assets\index-4641637a.js:3464:  const ctx = pos.ctx();
out\renderer\assets\index-4641637a.js:3465:  const ourPawns = pos.board.pieces(pos.turn, "pawn");
out\renderer\assets\index-4641637a.js:3466:  const candidates = ourPawns.intersect(pawnAttacks(opposite(pos.turn), pos.epSquare));
out\renderer\assets\index-4641637a.js:3467:  for (const candidate of candidates) {
out\renderer\assets\index-4641637a.js:3468:    if (pos.dests(candidate, ctx).has(pos.epSquare))
out\renderer\assets\index-4641637a.js:3469:      return pos.epSquare;
out\renderer\assets\index-4641637a.js:3470:  }
out\renderer\assets\index-4641637a.js:3471:  return;
out\renderer\assets\index-4641637a.js:3472:};
out\renderer\assets\index-4641637a.js:3473:const canCaptureEp = (pos, pawn2, ctx) => {
out\renderer\assets\index-4641637a.js:3474:  if (!defined(pos.epSquare))
out\renderer\assets\index-4641637a.js:3475:    return false;
out\renderer\assets\index-4641637a.js:3476:  if (!pawnAttacks(pos.turn, pawn2).has(pos.epSquare))
out\renderer\assets\index-4641637a.js:3477:    return false;
out\renderer\assets\index-4641637a.js:3478:  if (!defined(ctx.king))
out\renderer\assets\index-4641637a.js:3479:    return true;
out\renderer\assets\index-4641637a.js:3480:  const captured = pos.epSquare + (pos.turn === "white" ? -8 : 8);
out\renderer\assets\index-4641637a.js:3481:  const occupied = pos.board.occupied.toggle(pawn2).toggle(pos.epSquare).toggle(captured);
out\renderer\assets\index-4641637a.js:3482:  return !pos.kingAttackers(ctx.king, opposite(pos.turn), occupied).intersects(occupied);
out\renderer\assets\index-4641637a.js:3483:};
out\renderer\assets\index-4641637a.js:3484:const castlingDest = (pos, side, ctx) => {
out\renderer\assets\index-4641637a.js:3485:  if (!defined(ctx.king) || ctx.checkers.nonEmpty())
out\renderer\assets\index-4641637a.js:3486:    return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3487:  const rook2 = pos.castles.rook[pos.turn][side];
out\renderer\assets\index-4641637a.js:3488:  if (!defined(rook2))
out\renderer\assets\index-4641637a.js:3489:    return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3490:  if (pos.castles.path[pos.turn][side].intersects(pos.board.occupied))
out\renderer\assets\index-4641637a.js:3491:    return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3492:  const kingTo = kingCastlesTo(pos.turn, side);
out\renderer\assets\index-4641637a.js:3493:  const kingPath = between(ctx.king, kingTo);
out\renderer\assets\index-4641637a.js:3494:  const occ = pos.board.occupied.without(ctx.king);
out\renderer\assets\index-4641637a.js:3495:  for (const sq of kingPath) {
out\renderer\assets\index-4641637a.js:3496:    if (pos.kingAttackers(sq, opposite(pos.turn), occ).nonEmpty())
out\renderer\assets\index-4641637a.js:3497:      return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3498:  }
out\renderer\assets\index-4641637a.js:3499:  const rookTo = rookCastlesTo(pos.turn, side);
out\renderer\assets\index-4641637a.js:3500:  const after = pos.board.occupied.toggle(ctx.king).toggle(rook2).toggle(rookTo);
out\renderer\assets\index-4641637a.js:3501:  if (pos.kingAttackers(kingTo, opposite(pos.turn), after).nonEmpty())
out\renderer\assets\index-4641637a.js:3502:    return SquareSet.empty();
out\renderer\assets\index-4641637a.js:3503:  return SquareSet.fromSquare(rook2);
out\renderer\assets\index-4641637a.js:3504:};
out\renderer\assets\index-4641637a.js:3505:const castlingSide = (pos, move2) => {
out\renderer\assets\index-4641637a.js:3506:  if (isDrop(move2))
out\renderer\assets\index-4641637a.js:3507:    return;
out\renderer\assets\index-4641637a.js:3508:  const delta = move2.to - move2.from;
out\renderer\assets\index-4641637a.js:3509:  if (Math.abs(delta) !== 2 && !pos.board[pos.turn].has(move2.to))
out\renderer\assets\index-4641637a.js:3510:    return;
out\renderer\assets\index-4641637a.js:3511:  if (!pos.board.king.has(move2.from))
out\renderer\assets\index-4641637a.js:3512:    return;
out\renderer\assets\index-4641637a.js:3513:  return delta > 0 ? "h" : "a";
out\renderer\assets\index-4641637a.js:3514:};
out\renderer\assets\index-4641637a.js:3515:const normalizeMove = (pos, move2) => {
out\renderer\assets\index-4641637a.js:3516:  const side = castlingSide(pos, move2);
out\renderer\assets\index-4641637a.js:3517:  if (!side)
out\renderer\assets\index-4641637a.js:3518:    return move2;
out\renderer\assets\index-4641637a.js:3519:  const rookFrom = pos.castles.rook[pos.turn][side];
out\renderer\assets\index-4641637a.js:3520:  return {
out\renderer\assets\index-4641637a.js:3521:    from: move2.from,
out\renderer\assets\index-4641637a.js:3522:    to: defined(rookFrom) ? rookFrom : move2.to
out\renderer\assets\index-4641637a.js:3523:  };
out\renderer\assets\index-4641637a.js:3524:};
out\renderer\assets\index-4641637a.js:3525:var InvalidFen;
out\renderer\assets\index-4641637a.js:3526:(function(InvalidFen2) {
out\renderer\assets\index-4641637a.js:3527:  InvalidFen2["Fen"] = "ERR_FEN";
out\renderer\assets\index-4641637a.js:3528:  InvalidFen2["Board"] = "ERR_BOARD";
out\renderer\assets\index-4641637a.js:3529:  InvalidFen2["Pockets"] = "ERR_POCKETS";
out\renderer\assets\index-4641637a.js:3530:  InvalidFen2["Turn"] = "ERR_TURN";
out\renderer\assets\index-4641637a.js:3531:  InvalidFen2["Castling"] = "ERR_CASTLING";
out\renderer\assets\index-4641637a.js:3532:  InvalidFen2["EpSquare"] = "ERR_EP_SQUARE";
out\renderer\assets\index-4641637a.js:3533:  InvalidFen2["RemainingChecks"] = "ERR_REMAINING_CHECKS";
out\renderer\assets\index-4641637a.js:3534:  InvalidFen2["Halfmoves"] = "ERR_HALFMOVES";
out\renderer\assets\index-4641637a.js:3535:  InvalidFen2["Fullmoves"] = "ERR_FULLMOVES";
out\renderer\assets\index-4641637a.js:3536:})(InvalidFen || (InvalidFen = {}));
out\renderer\assets\index-4641637a.js:3537:class FenError extends Error {
out\renderer\assets\index-4641637a.js:3538:}
out\renderer\assets\index-4641637a.js:3539:const nthIndexOf = (haystack, needle, n2) => {
out\renderer\assets\index-4641637a.js:3540:  let index = haystack.indexOf(needle);
out\renderer\assets\index-4641637a.js:3541:  while (n2-- > 0) {
out\renderer\assets\index-4641637a.js:3542:    if (index === -1)
out\renderer\assets\index-4641637a.js:3543:      break;
out\renderer\assets\index-4641637a.js:3544:    index = haystack.indexOf(needle, index + needle.length);
out\renderer\assets\index-4641637a.js:3545:  }
out\renderer\assets\index-4641637a.js:3546:  return index;
out\renderer\assets\index-4641637a.js:3547:};
out\renderer\assets\index-4641637a.js:3548:const parseSmallUint = (str) => /^\d{1,4}$/.test(str) ? parseInt(str, 10) : void 0;
out\renderer\assets\index-4641637a.js:3549:const charToPiece = (ch) => {
out\renderer\assets\index-4641637a.js:3550:  const role = charToRole(ch);
out\renderer\assets\index-4641637a.js:3551:  return role && { role, color: ch.toLowerCase() === ch ? "black" : "white" };
out\renderer\assets\index-4641637a.js:3552:};
out\renderer\assets\index-4641637a.js:3553:const parseBoardFen = (boardPart) => {
out\renderer\assets\index-4641637a.js:3554:  const board = Board.empty();
out\renderer\assets\index-4641637a.js:3555:  let rank = 7;
out\renderer\assets\index-4641637a.js:3556:  let file = 0;
out\renderer\assets\index-4641637a.js:3557:  for (let i = 0; i < boardPart.length; i++) {
out\renderer\assets\index-4641637a.js:3558:    const c = boardPart[i];
out\renderer\assets\index-4641637a.js:3559:    if (c === "/" && file === 8) {
out\renderer\assets\index-4641637a.js:3560:      file = 0;
out\renderer\assets\index-4641637a.js:3561:      rank--;
out\renderer\assets\index-4641637a.js:3562:    } else {
out\renderer\assets\index-4641637a.js:3563:      const step2 = parseInt(c, 10);
out\renderer\assets\index-4641637a.js:3564:      if (step2 > 0)
out\renderer\assets\index-4641637a.js:3565:        file += step2;
out\renderer\assets\index-4641637a.js:3566:      else {
out\renderer\assets\index-4641637a.js:3567:        if (file >= 8 || rank < 0)
out\renderer\assets\index-4641637a.js:3568:          return n.err(new FenError(InvalidFen.Board));
out\renderer\assets\index-4641637a.js:3569:        const square = file + rank * 8;
out\renderer\assets\index-4641637a.js:3570:        const piece = charToPiece(c);
out\renderer\assets\index-4641637a.js:3571:        if (!piece)
out\renderer\assets\index-4641637a.js:3572:          return n.err(new FenError(InvalidFen.Board));
out\renderer\assets\index-4641637a.js:3573:        if (boardPart[i + 1] === "~") {
out\renderer\assets\index-4641637a.js:3574:          piece.promoted = true;
out\renderer\assets\index-4641637a.js:3575:          i++;
out\renderer\assets\index-4641637a.js:3576:        }
out\renderer\assets\index-4641637a.js:3577:        board.set(square, piece);
out\renderer\assets\index-4641637a.js:3578:        file++;
out\renderer\assets\index-4641637a.js:3579:      }
out\renderer\assets\index-4641637a.js:3580:    }
out\renderer\assets\index-4641637a.js:3581:  }
out\renderer\assets\index-4641637a.js:3582:  if (rank !== 0 || file !== 8)
out\renderer\assets\index-4641637a.js:3583:    return n.err(new FenError(InvalidFen.Board));
out\renderer\assets\index-4641637a.js:3584:  return n.ok(board);
out\renderer\assets\index-4641637a.js:3585:};
out\renderer\assets\index-4641637a.js:3586:const parsePockets = (pocketPart) => {
out\renderer\assets\index-4641637a.js:3587:  if (pocketPart.length > 64)
out\renderer\assets\index-4641637a.js:3588:    return n.err(new FenError(InvalidFen.Pockets));
out\renderer\assets\index-4641637a.js:3589:  const pockets = Material.empty();
out\renderer\assets\index-4641637a.js:3590:  for (const c of pocketPart) {
out\renderer\assets\index-4641637a.js:3591:    const piece = charToPiece(c);
out\renderer\assets\index-4641637a.js:3592:    if (!piece)
out\renderer\assets\index-4641637a.js:3593:      return n.err(new FenError(InvalidFen.Pockets));
out\renderer\assets\index-4641637a.js:3594:    pockets[piece.color][piece.role]++;
out\renderer\assets\index-4641637a.js:3595:  }
out\renderer\assets\index-4641637a.js:3596:  return n.ok(pockets);
out\renderer\assets\index-4641637a.js:3597:};
out\renderer\assets\index-4641637a.js:3598:const parseCastlingFen = (board, castlingPart) => {
out\renderer\assets\index-4641637a.js:3599:  let unmovedRooks = SquareSet.empty();
out\renderer\assets\index-4641637a.js:3600:  if (castlingPart === "-")
out\renderer\assets\index-4641637a.js:3601:    return n.ok(unmovedRooks);
out\renderer\assets\index-4641637a.js:3602:  for (const c of castlingPart) {
out\renderer\assets\index-4641637a.js:3603:    const lower = c.toLowerCase();
out\renderer\assets\index-4641637a.js:3604:    const color = c === lower ? "black" : "white";
out\renderer\assets\index-4641637a.js:3605:    const backrank = SquareSet.backrank(color).intersect(board[color]);
out\renderer\assets\index-4641637a.js:3606:    let candidates;
out\renderer\assets\index-4641637a.js:3607:    if (lower === "q")
out\renderer\assets\index-4641637a.js:3608:      candidates = backrank;
out\renderer\assets\index-4641637a.js:3609:    else if (lower === "k")
out\renderer\assets\index-4641637a.js:3610:      candidates = backrank.reversed();
out\renderer\assets\index-4641637a.js:3611:    else if ("a" <= lower && lower <= "h")
out\renderer\assets\index-4641637a.js:3612:      candidates = SquareSet.fromFile(lower.charCodeAt(0) - "a".charCodeAt(0)).intersect(backrank);
out\renderer\assets\index-4641637a.js:3613:    else
out\renderer\assets\index-4641637a.js:3614:      return n.err(new FenError(InvalidFen.Castling));
out\renderer\assets\index-4641637a.js:3615:    for (const square of candidates) {
out\renderer\assets\index-4641637a.js:3616:      if (board.king.has(square))
out\renderer\assets\index-4641637a.js:3617:        break;
out\renderer\assets\index-4641637a.js:3618:      if (board.rook.has(square)) {
out\renderer\assets\index-4641637a.js:3619:        unmovedRooks = unmovedRooks.with(square);
out\renderer\assets\index-4641637a.js:3620:        break;
out\renderer\assets\index-4641637a.js:3621:      }
out\renderer\assets\index-4641637a.js:3622:    }
out\renderer\assets\index-4641637a.js:3623:  }
out\renderer\assets\index-4641637a.js:3624:  if (COLORS.some((color) => SquareSet.backrank(color).intersect(unmovedRooks).size() > 2))
out\renderer\assets\index-4641637a.js:3625:    return n.err(new FenError(InvalidFen.Castling));
out\renderer\assets\index-4641637a.js:3626:  return n.ok(unmovedRooks);
out\renderer\assets\index-4641637a.js:3627:};
out\renderer\assets\index-4641637a.js:3628:const parseRemainingChecks = (part) => {
out\renderer\assets\index-4641637a.js:3629:  const parts = part.split("+");
out\renderer\assets\index-4641637a.js:3630:  if (parts.length === 3 && parts[0] === "") {
out\renderer\assets\index-4641637a.js:3631:    const white = parseSmallUint(parts[1]);
out\renderer\assets\index-4641637a.js:3632:    const black = parseSmallUint(parts[2]);
out\renderer\assets\index-4641637a.js:3633:    if (!defined(white) || white > 3 || !defined(black) || black > 3)
out\renderer\assets\index-4641637a.js:3634:      return n.err(new FenError(InvalidFen.RemainingChecks));
out\renderer\assets\index-4641637a.js:3635:    return n.ok(new RemainingChecks(3 - white, 3 - black));
out\renderer\assets\index-4641637a.js:3636:  } else if (parts.length === 2) {
out\renderer\assets\index-4641637a.js:3637:    const white = parseSmallUint(parts[0]);
out\renderer\assets\index-4641637a.js:3638:    const black = parseSmallUint(parts[1]);
out\renderer\assets\index-4641637a.js:3639:    if (!defined(white) || white > 3 || !defined(black) || black > 3)
out\renderer\assets\index-4641637a.js:3640:      return n.err(new FenError(InvalidFen.RemainingChecks));
out\renderer\assets\index-4641637a.js:3641:    return n.ok(new RemainingChecks(white, black));
out\renderer\assets\index-4641637a.js:3642:  } else
out\renderer\assets\index-4641637a.js:3643:    return n.err(new FenError(InvalidFen.RemainingChecks));
out\renderer\assets\index-4641637a.js:3644:};
out\renderer\assets\index-4641637a.js:3645:const parseFen = (fen) => {
out\renderer\assets\index-4641637a.js:3646:  const parts = fen.split(/[\s_]+/);
out\renderer\assets\index-4641637a.js:3647:  const boardPart = parts.shift();
out\renderer\assets\index-4641637a.js:3648:  let board;
out\renderer\assets\index-4641637a.js:3649:  let pockets = n.ok(void 0);
out\renderer\assets\index-4641637a.js:3650:  if (boardPart.endsWith("]")) {
out\renderer\assets\index-4641637a.js:3651:    const pocketStart = boardPart.indexOf("[");
out\renderer\assets\index-4641637a.js:3652:    if (pocketStart === -1)
out\renderer\assets\index-4641637a.js:3653:      return n.err(new FenError(InvalidFen.Fen));
out\renderer\assets\index-4641637a.js:3654:    board = parseBoardFen(boardPart.slice(0, pocketStart));
out\renderer\assets\index-4641637a.js:3655:    pockets = parsePockets(boardPart.slice(pocketStart + 1, -1));
out\renderer\assets\index-4641637a.js:3656:  } else {
out\renderer\assets\index-4641637a.js:3657:    const pocketStart = nthIndexOf(boardPart, "/", 7);
out\renderer\assets\index-4641637a.js:3658:    if (pocketStart === -1)
out\renderer\assets\index-4641637a.js:3659:      board = parseBoardFen(boardPart);
out\renderer\assets\index-4641637a.js:3660:    else {
out\renderer\assets\index-4641637a.js:3661:      board = parseBoardFen(boardPart.slice(0, pocketStart));
out\renderer\assets\index-4641637a.js:3662:      pockets = parsePockets(boardPart.slice(pocketStart + 1));
out\renderer\assets\index-4641637a.js:3663:    }
out\renderer\assets\index-4641637a.js:3664:  }
out\renderer\assets\index-4641637a.js:3665:  let turn;
out\renderer\assets\index-4641637a.js:3666:  const turnPart = parts.shift();
out\renderer\assets\index-4641637a.js:3667:  if (!defined(turnPart) || turnPart === "w")
out\renderer\assets\index-4641637a.js:3668:    turn = "white";
out\renderer\assets\index-4641637a.js:3669:  else if (turnPart === "b")
out\renderer\assets\index-4641637a.js:3670:    turn = "black";
out\renderer\assets\index-4641637a.js:3671:  else
out\renderer\assets\index-4641637a.js:3672:    return n.err(new FenError(InvalidFen.Turn));
out\renderer\assets\index-4641637a.js:3673:  return board.chain((board2) => {
out\renderer\assets\index-4641637a.js:3674:    const castlingPart = parts.shift();
out\renderer\assets\index-4641637a.js:3675:    const unmovedRooks = defined(castlingPart) ? parseCastlingFen(board2, castlingPart) : n.ok(SquareSet.empty());
out\renderer\assets\index-4641637a.js:3676:    const epPart = parts.shift();
out\renderer\assets\index-4641637a.js:3677:    let epSquare;
out\renderer\assets\index-4641637a.js:3678:    if (defined(epPart) && epPart !== "-") {
out\renderer\assets\index-4641637a.js:3679:      epSquare = parseSquare(epPart);
out\renderer\assets\index-4641637a.js:3680:      if (!defined(epSquare))
out\renderer\assets\index-4641637a.js:3681:        return n.err(new FenError(InvalidFen.EpSquare));
out\renderer\assets\index-4641637a.js:3682:    }
out\renderer\assets\index-4641637a.js:3683:    let halfmovePart = parts.shift();
out\renderer\assets\index-4641637a.js:3684:    let earlyRemainingChecks;
out\renderer\assets\index-4641637a.js:3685:    if (defined(halfmovePart) && halfmovePart.includes("+")) {
out\renderer\assets\index-4641637a.js:3686:      earlyRemainingChecks = parseRemainingChecks(halfmovePart);
out\renderer\assets\index-4641637a.js:3687:      halfmovePart = parts.shift();
out\renderer\assets\index-4641637a.js:3688:    }
out\renderer\assets\index-4641637a.js:3689:    const halfmoves = defined(halfmovePart) ? parseSmallUint(halfmovePart) : 0;
out\renderer\assets\index-4641637a.js:3690:    if (!defined(halfmoves))
out\renderer\assets\index-4641637a.js:3691:      return n.err(new FenError(InvalidFen.Halfmoves));
out\renderer\assets\index-4641637a.js:3692:    const fullmovesPart = parts.shift();
out\renderer\assets\index-4641637a.js:3693:    const fullmoves = defined(fullmovesPart) ? parseSmallUint(fullmovesPart) : 1;
out\renderer\assets\index-4641637a.js:3694:    if (!defined(fullmoves))
out\renderer\assets\index-4641637a.js:3695:      return n.err(new FenError(InvalidFen.Fullmoves));
out\renderer\assets\index-4641637a.js:3696:    const remainingChecksPart = parts.shift();
out\renderer\assets\index-4641637a.js:3697:    let remainingChecks = n.ok(void 0);
out\renderer\assets\index-4641637a.js:3698:    if (defined(remainingChecksPart)) {
out\renderer\assets\index-4641637a.js:3699:      if (defined(earlyRemainingChecks))
out\renderer\assets\index-4641637a.js:3700:        return n.err(new FenError(InvalidFen.RemainingChecks));
out\renderer\assets\index-4641637a.js:3701:      remainingChecks = parseRemainingChecks(remainingChecksPart);
out\renderer\assets\index-4641637a.js:3702:    } else if (defined(earlyRemainingChecks)) {
out\renderer\assets\index-4641637a.js:3703:      remainingChecks = earlyRemainingChecks;
out\renderer\assets\index-4641637a.js:3704:    }
out\renderer\assets\index-4641637a.js:3705:    if (parts.length > 0)
out\renderer\assets\index-4641637a.js:3706:      return n.err(new FenError(InvalidFen.Fen));
out\renderer\assets\index-4641637a.js:3707:    return pockets.chain((pockets2) => unmovedRooks.chain((unmovedRooks2) => remainingChecks.map((remainingChecks2) => {
out\renderer\assets\index-4641637a.js:3708:      return {
out\renderer\assets\index-4641637a.js:3709:        board: board2,
out\renderer\assets\index-4641637a.js:3710:        pockets: pockets2,
out\renderer\assets\index-4641637a.js:3711:        turn,
out\renderer\assets\index-4641637a.js:3712:        unmovedRooks: unmovedRooks2,
out\renderer\assets\index-4641637a.js:3713:        remainingChecks: remainingChecks2,
out\renderer\assets\index-4641637a.js:3714:        epSquare,
out\renderer\assets\index-4641637a.js:3715:        halfmoves,
out\renderer\assets\index-4641637a.js:3716:        fullmoves: Math.max(1, fullmoves)
out\renderer\assets\index-4641637a.js:3717:      };
out\renderer\assets\index-4641637a.js:3718:    })));
out\renderer\assets\index-4641637a.js:3719:  });
out\renderer\assets\index-4641637a.js:3720:};
out\renderer\assets\index-4641637a.js:3721:function create_fragment$1(ctx) {
out\renderer\assets\index-4641637a.js:3722:  let chessground_1;
out\renderer\assets\index-4641637a.js:3723:  let current;
out\renderer\assets\index-4641637a.js:3724:  let chessground_1_props = {};
out\renderer\assets\index-4641637a.js:3725:  chessground_1 = new Chessground_1({ props: chessground_1_props });
out\renderer\assets\index-4641637a.js:3726:  ctx[4](chessground_1);
out\renderer\assets\index-4641637a.js:3727:  return {
out\renderer\assets\index-4641637a.js:3728:    c() {
out\renderer\assets\index-4641637a.js:3729:      create_component(chessground_1.$$.fragment);
out\renderer\assets\index-4641637a.js:3730:    },
out\renderer\assets\index-4641637a.js:3731:    m(target, anchor) {
out\renderer\assets\index-4641637a.js:3732:      mount_component(chessground_1, target, anchor);
out\renderer\assets\index-4641637a.js:3733:      current = true;
out\renderer\assets\index-4641637a.js:3734:    },
out\renderer\assets\index-4641637a.js:3735:    p(ctx2, [dirty]) {
out\renderer\assets\index-4641637a.js:3736:      const chessground_1_changes = {};
out\renderer\assets\index-4641637a.js:3737:      chessground_1.$set(chessground_1_changes);
out\renderer\assets\index-4641637a.js:3738:    },
out\renderer\assets\index-4641637a.js:3739:    i(local) {
out\renderer\assets\index-4641637a.js:3740:      if (current)
out\renderer\assets\index-4641637a.js:3741:        return;
out\renderer\assets\index-4641637a.js:3742:      transition_in(chessground_1.$$.fragment, local);
out\renderer\assets\index-4641637a.js:3743:      current = true;
out\renderer\assets\index-4641637a.js:3744:    },
out\renderer\assets\index-4641637a.js:3745:    o(local) {
out\renderer\assets\index-4641637a.js:3746:      transition_out(chessground_1.$$.fragment, local);
out\renderer\assets\index-4641637a.js:3747:      current = false;
out\renderer\assets\index-4641637a.js:3748:    },
out\renderer\assets\index-4641637a.js:3749:    d(detaching) {
out\renderer\assets\index-4641637a.js:3750:      ctx[4](null);
out\renderer\assets\index-4641637a.js:3751:      destroy_component(chessground_1, detaching);
out\renderer\assets\index-4641637a.js:3752:    }
out\renderer\assets\index-4641637a.js:3753:  };
out\renderer\assets\index-4641637a.js:3754:}
out\renderer\assets\index-4641637a.js:3755:function instance$1($$self, $$props, $$invalidate) {
out\renderer\assets\index-4641637a.js:3756:  let { gameFen = "7k/5K2/7P/6pP/8/8/8/8 w - - 0 1" } = $$props;
out\renderer\assets\index-4641637a.js:3757:  let { gamePgn = "1. d4 d5 *" } = $$props;
out\renderer\assets\index-4641637a.js:3758:  let chessground;
out\renderer\assets\index-4641637a.js:3759:  const setup = parseFen("r1bqkbnr/ppp2Qpp/2np4/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4").unwrap();
out\renderer\assets\index-4641637a.js:3760:  Chess.fromSetup(setup).unwrap();
out\renderer\assets\index-4641637a.js:3761:  function onClick() {
out\renderer\assets\index-4641637a.js:3762:    chessground.newPiece({ color: "white", role: "bishop" }, "b5");
out\renderer\assets\index-4641637a.js:3763:    $$invalidate(1, gameFen = chessground.getFen());
out\renderer\assets\index-4641637a.js:3764:  }
out\renderer\assets\index-4641637a.js:3765:  function chessground_1_binding($$value) {
out\renderer\assets\index-4641637a.js:3766:    binding_callbacks[$$value ? "unshift" : "push"](() => {
out\renderer\assets\index-4641637a.js:3767:      chessground = $$value;
out\renderer\assets\index-4641637a.js:3768:      $$invalidate(0, chessground);
out\renderer\assets\index-4641637a.js:3769:    });
out\renderer\assets\index-4641637a.js:3770:  }
out\renderer\assets\index-4641637a.js:3771:  $$self.$$set = ($$props2) => {
out\renderer\assets\index-4641637a.js:3772:    if ("gameFen" in $$props2)
out\renderer\assets\index-4641637a.js:3773:      $$invalidate(1, gameFen = $$props2.gameFen);
out\renderer\assets\index-4641637a.js:3774:    if ("gamePgn" in $$props2)
out\renderer\assets\index-4641637a.js:3775:      $$invalidate(2, gamePgn = $$props2.gamePgn);
out\renderer\assets\index-4641637a.js:3776:  };
out\renderer\assets\index-4641637a.js:3777:  return [chessground, gameFen, gamePgn, onClick, chessground_1_binding];
out\renderer\assets\index-4641637a.js:3778:}
out\renderer\assets\index-4641637a.js:3779:class Chessboard extends SvelteComponent {
out\renderer\assets\index-4641637a.js:3780:  constructor(options) {
out\renderer\assets\index-4641637a.js:3781:    super();
out\renderer\assets\index-4641637a.js:3782:    init(this, options, instance$1, create_fragment$1, safe_not_equal, { gameFen: 1, gamePgn: 2, onClick: 3 });
out\renderer\assets\index-4641637a.js:3783:  }
out\renderer\assets\index-4641637a.js:3784:  get onClick() {
out\renderer\assets\index-4641637a.js:3785:    return this.$$.ctx[3];
out\renderer\assets\index-4641637a.js:3786:  }
out\renderer\assets\index-4641637a.js:3787:}
out\renderer\assets\index-4641637a.js:3788:function create_fragment(ctx) {
out\renderer\assets\index-4641637a.js:3789:  let div5;
out\renderer\assets\index-4641637a.js:3790:  let div0;
out\renderer\assets\index-4641637a.js:3791:  let chessboard_1;
out\renderer\assets\index-4641637a.js:3792:  let updating_gameFen;
out\renderer\assets\index-4641637a.js:3793:  let t0;
out\renderer\assets\index-4641637a.js:3794:  let div1;
out\renderer\assets\index-4641637a.js:3795:  let button;
out\renderer\assets\index-4641637a.js:3796:  let t2;
out\renderer\assets\index-4641637a.js:3797:  let div2;
out\renderer\assets\index-4641637a.js:3798:  let t4;
out\renderer\assets\index-4641637a.js:3799:  let div3;
out\renderer\assets\index-4641637a.js:3800:  let t5;
out\renderer\assets\index-4641637a.js:3801:  let t6;
out\renderer\assets\index-4641637a.js:3802:  let t7;
out\renderer\assets\index-4641637a.js:3803:  let div4;
out\renderer\assets\index-4641637a.js:3804:  let current;
out\renderer\assets\index-4641637a.js:3805:  let mounted;
out\renderer\assets\index-4641637a.js:3806:  let dispose;
out\renderer\assets\index-4641637a.js:3807:  function chessboard_1_gameFen_binding(value) {
out\renderer\assets\index-4641637a.js:3808:    ctx[4](value);
out\renderer\assets\index-4641637a.js:3809:  }
out\renderer\assets\index-4641637a.js:3810:  let chessboard_1_props = {};
out\renderer\assets\index-4641637a.js:3811:  if (
out\renderer\assets\index-4641637a.js:3812:    /*gameFen*/
out\renderer\assets\index-4641637a.js:3813:    ctx[0] !== void 0
out\renderer\assets\index-4641637a.js:3814:  ) {
out\renderer\assets\index-4641637a.js:3815:    chessboard_1_props.gameFen = /*gameFen*/
out\renderer\assets\index-4641637a.js:3816:    ctx[0];
out\renderer\assets\index-4641637a.js:3817:  }
out\renderer\assets\index-4641637a.js:3818:  chessboard_1 = new Chessboard({ props: chessboard_1_props });
out\renderer\assets\index-4641637a.js:3819:  ctx[3](chessboard_1);
out\renderer\assets\index-4641637a.js:3820:  binding_callbacks.push(() => bind(chessboard_1, "gameFen", chessboard_1_gameFen_binding));
out\renderer\assets\index-4641637a.js:3821:  return {
out\renderer\assets\index-4641637a.js:3822:    c() {
out\renderer\assets\index-4641637a.js:3823:      div5 = element("div");
out\renderer\assets\index-4641637a.js:3824:      div0 = element("div");
out\renderer\assets\index-4641637a.js:3825:      create_component(chessboard_1.$$.fragment);
out\renderer\assets\index-4641637a.js:3826:      t0 = space();
out\renderer\assets\index-4641637a.js:3827:      div1 = element("div");
out\renderer\assets\index-4641637a.js:3828:      button = element("button");
out\renderer\assets\index-4641637a.js:3829:      button.textContent = "Click";
out\renderer\assets\index-4641637a.js:3830:      t2 = space();
out\renderer\assets\index-4641637a.js:3831:      div2 = element("div");
out\renderer\assets\index-4641637a.js:3832:      div2.textContent = "Hey";
out\renderer\assets\index-4641637a.js:3833:      t4 = space();
out\renderer\assets\index-4641637a.js:3834:      div3 = element("div");
out\renderer\assets\index-4641637a.js:3835:      t5 = text("FEN = ");
out\renderer\assets\index-4641637a.js:3836:      t6 = text(
out\renderer\assets\index-4641637a.js:3837:        /*gameFen*/
out\renderer\assets\index-4641637a.js:3838:        ctx[0]
out\renderer\assets\index-4641637a.js:3839:      );
out\renderer\assets\index-4641637a.js:3840:      t7 = space();
out\renderer\assets\index-4641637a.js:3841:      div4 = element("div");
out\renderer\assets\index-4641637a.js:3842:      div4.textContent = "Graph";
out\renderer\assets\index-4641637a.js:3843:      attr(div0, "class", "w-[512px]");
out\renderer\assets\index-4641637a.js:3844:      attr(div3, "class", "col-span-3");
out\renderer\assets\index-4641637a.js:3845:      attr(div4, "class", "col-span-3 border");
out\renderer\assets\index-4641637a.js:3846:      attr(div5, "class", "grid grid-cols-[auto_auto_1fr]");
out\renderer\assets\index-4641637a.js:3847:    },
out\renderer\assets\index-4641637a.js:3848:    m(target, anchor) {
out\renderer\assets\index-4641637a.js:3849:      insert(target, div5, anchor);
out\renderer\assets\index-4641637a.js:3850:      append(div5, div0);
out\renderer\assets\index-4641637a.js:3851:      mount_component(chessboard_1, div0, null);
out\renderer\assets\index-4641637a.js:3852:      append(div5, t0);
out\renderer\assets\index-4641637a.js:3853:      append(div5, div1);
out\renderer\assets\index-4641637a.js:3854:      append(div1, button);
out\renderer\assets\index-4641637a.js:3855:      append(div5, t2);
out\renderer\assets\index-4641637a.js:3856:      append(div5, div2);
out\renderer\assets\index-4641637a.js:3857:      append(div5, t4);
out\renderer\assets\index-4641637a.js:3858:      append(div5, div3);
out\renderer\assets\index-4641637a.js:3859:      append(div3, t5);
out\renderer\assets\index-4641637a.js:3860:      append(div3, t6);
out\renderer\assets\index-4641637a.js:3861:      append(div5, t7);
out\renderer\assets\index-4641637a.js:3862:      append(div5, div4);
out\renderer\assets\index-4641637a.js:3863:      current = true;
out\renderer\assets\index-4641637a.js:3864:      if (!mounted) {
out\renderer\assets\index-4641637a.js:3865:        dispose = listen(
out\renderer\assets\index-4641637a.js:3866:          button,
out\renderer\assets\index-4641637a.js:3867:          "click",
out\renderer\assets\index-4641637a.js:3868:          /*onClick*/
out\renderer\assets\index-4641637a.js:3869:          ctx[2]
out\renderer\assets\index-4641637a.js:3870:        );
out\renderer\assets\index-4641637a.js:3871:        mounted = true;
out\renderer\assets\index-4641637a.js:3872:      }
out\renderer\assets\index-4641637a.js:3873:    },
out\renderer\assets\index-4641637a.js:3874:    p(ctx2, [dirty]) {
out\renderer\assets\index-4641637a.js:3875:      const chessboard_1_changes = {};
out\renderer\assets\index-4641637a.js:3876:      if (!updating_gameFen && dirty & /*gameFen*/
out\renderer\assets\index-4641637a.js:3877:      1) {
out\renderer\assets\index-4641637a.js:3878:        updating_gameFen = true;
out\renderer\assets\index-4641637a.js:3879:        chessboard_1_changes.gameFen = /*gameFen*/
out\renderer\assets\index-4641637a.js:3880:        ctx2[0];
out\renderer\assets\index-4641637a.js:3881:        add_flush_callback(() => updating_gameFen = false);
out\renderer\assets\index-4641637a.js:3882:      }
out\renderer\assets\index-4641637a.js:3883:      chessboard_1.$set(chessboard_1_changes);
out\renderer\assets\index-4641637a.js:3884:      if (!current || dirty & /*gameFen*/
out\renderer\assets\index-4641637a.js:3885:      1)
out\renderer\assets\index-4641637a.js:3886:        set_data(
out\renderer\assets\index-4641637a.js:3887:          t6,
out\renderer\assets\index-4641637a.js:3888:          /*gameFen*/
out\renderer\assets\index-4641637a.js:3889:          ctx2[0]
out\renderer\assets\index-4641637a.js:3890:        );
out\renderer\assets\index-4641637a.js:3891:    },
out\renderer\assets\index-4641637a.js:3892:    i(local) {
out\renderer\assets\index-4641637a.js:3893:      if (current)
out\renderer\assets\index-4641637a.js:3894:        return;
out\renderer\assets\index-4641637a.js:3895:      transition_in(chessboard_1.$$.fragment, local);
out\renderer\assets\index-4641637a.js:3896:      current = true;
out\renderer\assets\index-4641637a.js:3897:    },
out\renderer\assets\index-4641637a.js:3898:    o(local) {
out\renderer\assets\index-4641637a.js:3899:      transition_out(chessboard_1.$$.fragment, local);
out\renderer\assets\index-4641637a.js:3900:      current = false;
out\renderer\assets\index-4641637a.js:3901:    },
out\renderer\assets\index-4641637a.js:3902:    d(detaching) {
out\renderer\assets\index-4641637a.js:3903:      if (detaching)
out\renderer\assets\index-4641637a.js:3904:        detach(div5);
out\renderer\assets\index-4641637a.js:3905:      ctx[3](null);
out\renderer\assets\index-4641637a.js:3906:      destroy_component(chessboard_1);
out\renderer\assets\index-4641637a.js:3907:      mounted = false;
out\renderer\assets\index-4641637a.js:3908:      dispose();
out\renderer\assets\index-4641637a.js:3909:    }
out\renderer\assets\index-4641637a.js:3910:  };
out\renderer\assets\index-4641637a.js:3911:}
out\renderer\assets\index-4641637a.js:3912:function instance($$self, $$props, $$invalidate) {
out\renderer\assets\index-4641637a.js:3913:  const setup = parseFen("r1bqkbnr/ppp2Qpp/2np4/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4").unwrap();
out\renderer\assets\index-4641637a.js:3914:  Chess.fromSetup(setup).unwrap();
out\renderer\assets\index-4641637a.js:3915:  let gameFen = "7k/5K2/7P/6pP/8/8/8/8 w - - 0 1";
out\renderer\assets\index-4641637a.js:3916:  let chessboard;
out\renderer\assets\index-4641637a.js:3917:  function onClick() {
out\renderer\assets\index-4641637a.js:3918:    chessboard.onClick();
out\renderer\assets\index-4641637a.js:3919:  }
out\renderer\assets\index-4641637a.js:3920:  function chessboard_1_binding($$value) {
out\renderer\assets\index-4641637a.js:3921:    binding_callbacks[$$value ? "unshift" : "push"](() => {
out\renderer\assets\index-4641637a.js:3922:      chessboard = $$value;
out\renderer\assets\index-4641637a.js:3923:      $$invalidate(1, chessboard);
out\renderer\assets\index-4641637a.js:3924:    });
out\renderer\assets\index-4641637a.js:3925:  }
out\renderer\assets\index-4641637a.js:3926:  function chessboard_1_gameFen_binding(value) {
out\renderer\assets\index-4641637a.js:3927:    gameFen = value;
out\renderer\assets\index-4641637a.js:3928:    $$invalidate(0, gameFen);
out\renderer\assets\index-4641637a.js:3929:  }
out\renderer\assets\index-4641637a.js:3930:  return [
out\renderer\assets\index-4641637a.js:3931:    gameFen,
out\renderer\assets\index-4641637a.js:3932:    chessboard,
out\renderer\assets\index-4641637a.js:3933:    onClick,
out\renderer\assets\index-4641637a.js:3934:    chessboard_1_binding,
out\renderer\assets\index-4641637a.js:3935:    chessboard_1_gameFen_binding
out\renderer\assets\index-4641637a.js:3936:  ];
out\renderer\assets\index-4641637a.js:3937:}
out\renderer\assets\index-4641637a.js:3938:class App extends SvelteComponent {
out\renderer\assets\index-4641637a.js:3939:  constructor(options) {
out\renderer\assets\index-4641637a.js:3940:    super();
out\renderer\assets\index-4641637a.js:3941:    init(this, options, instance, create_fragment, safe_not_equal, {});
out\renderer\assets\index-4641637a.js:3942:  }
out\renderer\assets\index-4641637a.js:3943:}
out\renderer\assets\index-4641637a.js:3944:new App({
out\renderer\assets\index-4641637a.js:3945:  target: document.getElementById("app")
out\renderer\assets\index-4641637a.js:3946:});
postcss.config.js:1:module.exports = {
postcss.config.js:2:  plugins: {
postcss.config.js:3:    tailwindcss: {},
postcss.config.js:4:    autoprefixer: {}
postcss.config.js:5:  }
postcss.config.js:6:}
tailwind.config.js:1:/** @type {import('tailwindcss').Config} */
tailwind.config.js:2:export default {
tailwind.config.js:3:  content: ["./src/**/*.{html,js,svelte,ts}"],
tailwind.config.js:4:  theme: {
tailwind.config.js:5:    extend: {}
tailwind.config.js:6:  },
tailwind.config.js:7:  plugins: []
tailwind.config.js:8:}

